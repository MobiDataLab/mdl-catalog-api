{
  "openapi": "3.0.1",
  "servers": [
    {
      "description": "Openrouteservice API",
      "url": "https://api.openrouteservice.org"
    },
    {
      "description": "Development Server",
      "url": "http://localhost:{port}{basePath}",
      "variables": {
        "basePath": {
          "default": "/ors",
          "description": "Base path of the local openrouteservice instance"
        },
        "port": {
          "default": "8082",
          "description": "Port the local openrouteservice instance runs on"
        }
      }
    }
  ],
  "info": {
    "contact": {
      "email": "support@smartmobility.heigit.org",
      "name": "Openrouteservice",
      "url": "https://github.com/GIScience/openrouteservice"
    },
    "description": "This is the openrouteservice API documentation for ORS Core-Version 7.1.1. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).",
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://github.com/GIScience/openrouteservice/blob/main/LICENSE"
    },
    "title": "Openrouteservice",
    "version": "v2",
    "x-apisguru-categories": [
      "location"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://mobidatalab.github.io/mdl-catalog-api/v2/cache/logo/https_openrouteservice.org_dev_static_img_logo@2x.1368651.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://openrouteservice.org/wp-json/ors-api/v1/api-doc/source/V2",
        "version": "3.0"
      }
    ],
    "x-ors-version": "7.1.1",
    "x-preferred": true,
    "x-providerName": "openrouteservice.org"
  },
  "tags": [
    {
      "description": "Snap coordinates to the graph edges.",
      "name": "Snapping Service"
    },
    {
      "description": "Get information on the status of the api",
      "name": "Status service"
    },
    {
      "description": "Get directions for different modes of transport",
      "name": "Directions Service"
    },
    {
      "description": "Export the base graph for different modes of transport",
      "name": "Export Service"
    },
    {
      "description": "Get information on the health of the api",
      "name": "Health service"
    },
    {
      "description": "Obtain areas of reachability from given locations",
      "name": "Isochrones Service"
    },
    {
      "description": "Obtain one-to-many, many-to-one and many-to-many matrices for time and distance",
      "name": "Matrix Service"
    },
    {
      "description": "Resolve input coordinates to addresses and vice versa",
      "name": "Geocode"
    },
    {
      "description": "Obtain POIs of an area",
      "name": "Pois"
    },
    {
      "description": "Returns elevation for point or line geometries by building 3D geometries from freely available data sources.\n",
      "name": "Elevation"
    },
    {
      "description": "Optimize routes for vehicle fleets",
      "name": "Optimization"
    }
  ],
  "paths": {
    "/elevation/line": {
      "post": {
        "description": "This endpoint can take planar 2D line objects and enrich them with elevation from a variety of datasets.\n\nThe input and output formats are:\n  * GeoJSON\n  * Polyline\n  * <a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google's Encoded polyline</a> with coordinate precision 5 or 6\n\nExample:\n```\n  # POST LineString as polyline\n  curl -XPOST https://api.openrouteservice.org/elevation/line\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: INSERT_YOUR_KEY\n    -d '{\n      \"format_in\": \"polyline\",\n      \"format_out\": \"encodedpolyline5\",\n      \"geometry\": [[13.349762, 38.112952],\n                   [12.638397, 37.645772]]\n        }'\n```\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dataset": {
                    "default": "srtm",
                    "description": "The elevation dataset to be used.",
                    "enum": [
                      "srtm"
                    ],
                    "type": "string"
                  },
                  "format_in": {
                    "description": "The input format the API has to expect.",
                    "enum": [
                      "geojson",
                      "polyline",
                      "encodedpolyline5",
                      "encodedpolyline6"
                    ],
                    "example": "encodedpolyline5",
                    "type": "string"
                  },
                  "format_out": {
                    "default": "geojson",
                    "description": "The output format to be returned.",
                    "enum": [
                      "geojson",
                      "polyline",
                      "encodedpolyline5",
                      "encodedpolyline6"
                    ],
                    "type": "string"
                  },
                  "geometry": {
                    "description": "* geojson: A geometry object of a LineString GeoJSON, e.g.\n         {\"type\": \"LineString\",\n          \"coordinates\": [[13.331302, 38.108433],[13.331273, 38.10849]]\n         }\n* polyline: A list of coordinate lists, e.g.\n         [[13.331302, 38.108433], [13.331273, 38.10849]]\n\n* encodedpolyline5: A <a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google encoded polyline</a> with a coordinate precision of 5, e.g.\n         u`rgFswjpAKD\n\n* encodedpolyline6: A <a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google encoded polyline</a> with a coordinate precision of 6, e.g.\n         ap}tgAkutlXqBx@\n",
                    "example": "u`rgFswjpAKD",
                    "type": "object"
                  }
                },
                "required": [
                  "format_in",
                  "geometry"
                ],
                "type": "object"
              }
            }
          },
          "description": "Query the elevation of a line in various formats.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attribution": {
                      "type": "string"
                    },
                    "geometry": {
                      "properties": {
                        "coordinates": {
                          "items": {
                            "items": {
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Authorization field missing."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Key not authorised."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and more detailed internal\nerrorcode is provided.\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n| 4001 |  ValueError in parameters |\n| 4002 |  Wrong HTTP headers |\n| 4003 |  Problems with the provided geometry |\n| 4004 |  Exceeded the number of allowed vertices |\n"
          }
        },
        "summary": "Elevation Line Service",
        "tags": [
          "Elevation"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/elevation/point": {
      "get": {
        "description": "This endpoint can take a 2D point and enrich it with elevation from a variety of datasets.\n\nThe output formats are:\n  * GeoJSON\n  * Point\n\nExample:\n```\n  # GET point\n  curl -XGET https://localhost:5000/elevation/point?geometry=13.349762,38.11295\n```\n",
        "parameters": [
          {
            "description": "Insert your API Key here.\n",
            "example": "your-api-key",
            "in": "query",
            "name": "api_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The point to be queried, in comma-separated lon,lat values, e.g. [13.349762, 38.11295]",
            "example": "13.349762,38.11295",
            "explode": false,
            "in": "query",
            "name": "geometry",
            "required": true,
            "schema": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "The output format to be returned.",
            "in": "query",
            "name": "format_out",
            "schema": {
              "default": "geojson",
              "enum": [
                "geojson",
                "point"
              ],
              "type": "string"
            }
          },
          {
            "description": "The elevation dataset to be used.",
            "in": "query",
            "name": "dataset",
            "schema": {
              "default": "srtm",
              "enum": [
                "srtm"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attribution": {
                      "type": "string"
                    },
                    "geometry": {
                      "properties": {
                        "coordinates": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "type": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Authorization field missing."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Key not authorised."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and more detailed internal\nerror code is provided.\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n| 4001 |  ValueError in parameters |\n| 4002 |  Wrong HTTP headers |\n| 4003 |  Problems with the provided geometry |\n| 4004 |  Exceeded the number of allowed vertices |\n"
          }
        },
        "summary": "Elevation Point Service",
        "tags": [
          "Elevation"
        ]
      },
      "post": {
        "description": "This endpoint can take a 2D point and enrich it with elevation from a variety of datasets.\n\nThe input and output formats are:\n  * GeoJSON\n  * Point\n\nExample:\n```\n  # POST point as GeoJSON\n  # https://api.openrouteservice.org/elevation/point?api_key=YOUR-KEY\n  {\n    \"format_in\": \"geojson\",\n    \"format_out\": \"geojson\",\n    \"geometry\": {\n      \"coordinates\": [13.349762, 38.11295],\n      \"type\": \"Point\"\n    }\n  }\n```\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dataset": {
                    "default": "srtm",
                    "description": "The elevation dataset to be used.",
                    "enum": [
                      "srtm"
                    ],
                    "type": "string"
                  },
                  "format_in": {
                    "description": "The input format the API has to expect.",
                    "enum": [
                      "geojson",
                      "point"
                    ],
                    "example": "point",
                    "type": "string"
                  },
                  "format_out": {
                    "default": "geojson",
                    "description": "The output format to be returned.",
                    "enum": [
                      "geojson",
                      "point"
                    ],
                    "type": "string"
                  },
                  "geometry": {
                    "description": "* geojson: A geometry object of a Point GeoJSON, e.g.\n         {\"type\": \"Point\",\n          \"coordinates\": [13.331273, 38.10849]\n         }\n* point: A coordinate list, e.g.\n         [13.331273, 38.10849]\n",
                    "example": [
                      13.331273,
                      38.10849
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "format_in",
                  "geometry"
                ],
                "type": "object"
              }
            }
          },
          "description": "Query the elevation of a point in various formats.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attribution": {
                      "type": "string"
                    },
                    "geometry": {
                      "properties": {
                        "coordinates": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "type": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Authorization field missing."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Key not authorised."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and more detailed internal\nerrorcode is provided.\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n| 4001 |  ValueError in parameters |\n| 4002 |  Wrong HTTP headers |\n| 4003 |  Problems with the provided geometry |\n| 4004 |  Exceeded the number of allowed vertices |\n"
          }
        },
        "summary": "Elevation Point Service",
        "tags": [
          "Elevation"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/geocode/autocomplete": {
      "get": {
        "description": "**Requests should be throttled when using this endpoint!**\n*Be aware that Responses are asynchronous.*\nReturns a JSON formatted list of objects corresponding to the search input. `boundary.*`-parameters can be combined if they are overlapping. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/autocomplete.md)\n",
        "parameters": [
          {
            "description": "Insert your API Key here.\n",
            "in": "query",
            "name": "api_key",
            "required": true,
            "schema": {
              "default": "your-api-key",
              "type": "string"
            }
          },
          {
            "description": "Name of location, street address or postal code.\n",
            "example": "Toky",
            "in": "query",
            "name": "text",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Longitude of the `focus.point`. Specify the focus point to order results by linear distance to this point. Works for up to 100 kilometers distance.  Use with `focus.point.lat`.\n",
            "example": 8.673964,
            "in": "query",
            "name": "focus.point.lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Latitude of the `focus.point`. Specify the focus point to order results by linear distance to this point. Works for up to 100 kilometers distance. Use with `focus.point.lon`.\n",
            "example": 49.436431,
            "in": "query",
            "name": "focus.point.lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "focus.point.lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Left border of rectangular boundary to narrow results.\n",
            "example": 8.557663,
            "in": "query",
            "name": "boundary.rect.min_lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Bottom border of rectangular boundary to narrow results.\n",
            "example": 49.331387,
            "in": "query",
            "name": "boundary.rect.min_lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Right border of rectangular boundary to narrow results.\n",
            "example": 8.972054,
            "in": "query",
            "name": "boundary.rect.max_lon",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.min_lat",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Top border of rectangular boundary to narrow results.\n",
            "example": 49.525654,
            "in": "query",
            "name": "boundary.rect.max_lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.min_lat",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.max_lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Restrict results to single country. Possible values are [alpha-2 and alpha-3 country codes](https://en.wikipedia.org/wiki/ISO_3166-1). Example: `DEU` or `DE` for Germany.\n",
            "example": "DE",
            "in": "query",
            "name": "boundary.country",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restrict your search to specific sources. Searches all sources by default. You can either use the normal or short name.\nSources are [`openstreetmap(osm)`](http://www.openstreetmap.org/), [`openaddresses(oa)`](http://openaddresses.io/), [`whosonfirst(wof)`](https://whosonfirst.org/), [`geonames(gn)`](http://www.geonames.org/).\n",
            "in": "query",
            "name": "sources",
            "schema": {
              "default": [
                "osm",
                "oa",
                "gn",
                "wof"
              ],
              "items": {
                "enum": [
                  "openstreetmap",
                  "openaddresses",
                  "whosonfirst",
                  "geonames"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Restrict search to layers (place type). By default all layers are searched.\n  layer|description|\n  ----|----|\n  `venue`|points of interest, businesses, things with walls|\n  `address`|places with a street address|\n  `street`|streets,roads,highways|\n  `neighbourhood`|social communities, neighbourhoods|\n  `borough`|a local administrative boundary, currently only used for New York City|\n  `localadmin`|local administrative boundaries|\n  `locality`|towns, hamlets, cities|\n  `county`|official governmental area; usually bigger than a locality, almost always smaller than a region|\n  `macrocounty`|a related group of counties. Mostly in Europe.|\n  `region`|states and provinces|\n  `macroregion`|a related group of regions. Mostly in Europe|\n  `country`|places that issue passports, nations, nation-states|\n  `coarse`|alias for simultaneously using all administrative layers (everything except `venue` and `address`)|\n",
            "example": "region,county",
            "in": "query",
            "name": "layers",
            "schema": {
              "items": {
                "enum": [
                  "address",
                  "venue",
                  "neighbourhood",
                  "locality",
                  "borough",
                  "localadmin",
                  "county",
                  "macrocounty",
                  "region",
                  "macroregion",
                  "country",
                  "coarse"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "geocoding": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "title": "Geocode response",
                  "type": "object"
                }
              }
            },
            "description": "Please refer to [this external documentation](https://github.com/pelias/documentation/blob/master/autocomplete.md) for this endpoint"
          }
        },
        "summary": "Geocode Autocomplete Service",
        "tags": [
          "Geocode"
        ]
      }
    },
    "/geocode/reverse": {
      "get": {
        "description": "Returns the next enclosing object with an address tag which surrounds the given coordinate. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/reverse.md#reverse-geocoding)\n",
        "parameters": [
          {
            "description": "Insert your API Key here.\n",
            "in": "query",
            "name": "api_key",
            "required": true,
            "schema": {
              "default": "your-api-key",
              "type": "string"
            }
          },
          {
            "description": "Longitude of the coordinate to query.\n",
            "example": 2.294471,
            "in": "query",
            "name": "point.lon",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Latitude of the coordinate to query.\n",
            "in": "query",
            "name": "point.lat",
            "required": true,
            "schema": {
              "default": 48.858268,
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Restrict search to circular region around `point.lat/point.lon`. Value in kilometers.\n",
            "example": 35,
            "in": "query",
            "name": "boundary.circle.radius",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "description": "Set the number of returned results.\n",
            "in": "query",
            "name": "size",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Restrict search to layers (place type). By default all layers are searched.\n  layer|description|\n  ----|----|\n  `venue`|points of interest, businesses, things with walls|\n  `address`|places with a street address|\n  `street`|streets,roads,highways|\n  `neighbourhood`|social communities, neighbourhoods|\n  `locality`|towns, hamlets, cities|\n  `borough`|a local administrative boundary, currently only used for New York City|\n  `localadmin`|local administrative boundaries|\n  `county`|official governmental area; usually bigger than a locality, almost always smaller than a region|\n  `macrocounty`|a related group of counties. Mostly in Europe.|\n  `region`|states and provinces|\n  `macroregion`|a related group of regions. Mostly in Europe|\n  `country`|places that issue passports, nations, nation-states|\n  `coarse`|alias for simultaneously using all administrative layers (everything except `venue` and `address`)|\n",
            "example": "address,venue",
            "in": "query",
            "name": "layers",
            "schema": {
              "items": {
                "enum": [
                  "venue",
                  "address",
                  "street",
                  "neighbourhood",
                  "locality",
                  "borough",
                  "localadmin",
                  "county",
                  "macrocounty",
                  "region",
                  "macroregion",
                  "country",
                  "coarse"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Restrict your search to specific sources. Searches all sources by default. You can either use the normal or short name.\nSources are [`openstreetmap(osm)`](http://www.openstreetmap.org/), [`openaddresses(oa)`](http://openaddresses.io/), [`whosonfirst(wof)`](https://whosonfirst.org/), [`geonames(gn)`](http://www.geonames.org/).\n",
            "in": "query",
            "name": "sources",
            "schema": {
              "default": [
                "osm",
                "oa",
                "gn",
                "wof"
              ],
              "items": {
                "enum": [
                  "openstreetmap",
                  "openaddresses",
                  "whosonfirst",
                  "geonames"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Restrict search to country by [alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [alpha 3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) codes.\n",
            "example": "FR",
            "in": "query",
            "name": "boundary.country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "geocoding": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "title": "Geocode response",
                  "type": "object"
                }
              }
            },
            "description": "Please refer to [this external documentation](https://github.com/pelias/documentation/blob/master/reverse.md#reverse-geocoding) for this endpoint"
          }
        },
        "summary": "Reverse Geocode Service",
        "tags": [
          "Geocode"
        ]
      }
    },
    "/geocode/search": {
      "get": {
        "description": "Returns a JSON formatted list of objects corresponding to the search input. `boundary.*`-parameters can be combined if they are overlapping. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/search.md#search-the-world)\n",
        "parameters": [
          {
            "description": "Insert your API Key here.\n",
            "in": "query",
            "name": "api_key",
            "required": true,
            "schema": {
              "default": "you-api-key",
              "type": "string"
            }
          },
          {
            "description": "Name of location, street address or postal code.\n",
            "example": "Namibian Brewery",
            "in": "query",
            "name": "text",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Longitude of the `focus.point`. Specify the focus point to order results by linear distance to this point. Works for up to 100 kilometers distance.  Use with `focus.point.lat`.\n",
            "example": 8.673964,
            "in": "query",
            "name": "focus.point.lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Latitude of the `focus.point`. Specify the focus point to order results by linear distance to this point. Works for up to 100 kilometers distance. Use with `focus.point.lon`.\n",
            "example": 49.436431,
            "in": "query",
            "name": "focus.point.lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "focus.point.lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Left border of rectangular boundary to narrow results.\n",
            "example": 8.557663,
            "in": "query",
            "name": "boundary.rect.min_lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Bottom border of rectangular boundary to narrow results.\n",
            "example": 49.331387,
            "in": "query",
            "name": "boundary.rect.min_lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Right border of rectangular boundary to narrow results.\n",
            "example": 8.972054,
            "in": "query",
            "name": "boundary.rect.max_lon",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.min_lat",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Top border of rectangular boundary to narrow results.\n",
            "example": 49.525654,
            "in": "query",
            "name": "boundary.rect.max_lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.min_lat",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.max_lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Center Longitude of circular boundary to narrow results. Use with `boundary.circle.lat` & `boundary.circle.radius`.\n",
            "example": 8.673964,
            "in": "query",
            "name": "boundary.circle.lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Center Latitude of circular boundary to narrow results. Use with `boundary.circle.lon` & `boundary.circle.radius`.\n",
            "example": 49.436431,
            "in": "query",
            "name": "boundary.circle.lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.circle.lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Radius of circular boundary around the center coordinate in kilometers. Use with `boundary.circle.lon` & `boundary.circle.lat`.\n",
            "in": "query",
            "name": "boundary.circle.radius",
            "schema": {
              "default": 50,
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.circle.lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.circle.lat",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Restrict results to administrative boundary using a Pelias global id [`gid`](https://github.com/pelias/documentation/blob/f1f475aa4f8c18426fb80baea636990502c08ed3/search.md#search-within-a-parent-administrative-area).\n`gid`s for records can be found using either the [Who's on First Spelunker](http://spelunker.whosonfirst.org/),\na tool for searching Who's on First data, or from the responses of other Pelias queries.\nIn this case a [search for Oklahoma](http://pelias.github.io/compare/#/v1/search%3Ftext=oklahoma)\nwill return the proper `gid`.\n",
            "example": "whosonfirst:region:85688585",
            "in": "query",
            "name": "boundary.gid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restrict results to single country. Possible values are [alpha-2 and alpha-3 country codes](https://en.wikipedia.org/wiki/ISO_3166-1). Example: `DEU` or `DE` for Germany.\n",
            "example": "DE",
            "in": "query",
            "name": "boundary.country",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restrict your search to specific sources. Searches all sources by default. You can either use the normal or short name.\nSources are [`openstreetmap(osm)`](http://www.openstreetmap.org/), [`openaddresses(oa)`](http://openaddresses.io/), [`whosonfirst(wof)`](https://whosonfirst.org/), [`geonames(gn)`](http://www.geonames.org/).\n",
            "in": "query",
            "name": "sources",
            "schema": {
              "default": [
                "osm",
                "oa",
                "gn",
                "wof"
              ],
              "items": {
                "enum": [
                  "openstreetmap",
                  "openaddresses",
                  "whosonfirst",
                  "geonames"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Restrict search to layers (place type). By default all layers are searched.\n  layer|description|\n  ----|----|\n  `venue`|points of interest, businesses, things with walls|\n  `address`|places with a street address|\n  `street`|streets,roads,highways|\n  `neighbourhood`|social communities, neighbourhoods|\n  `borough`|a local administrative boundary, currently only used for New York City|\n  `localadmin`|local administrative boundaries|\n  `locality`|towns, hamlets, cities|\n  `county`|official governmental area; usually bigger than a locality, almost always smaller than a region|\n  `macrocounty`|a related group of counties. Mostly in Europe.|\n  `region`|states and provinces|\n  `macroregion`|a related group of regions. Mostly in Europe|\n  `country`|places that issue passports, nations, nation-states|\n  `coarse`|alias for simultaneously using all administrative layers (everything except `venue` and `address`)|\n",
            "example": "region,county",
            "in": "query",
            "name": "layers",
            "schema": {
              "items": {
                "enum": [
                  "address",
                  "venue",
                  "neighbourhood",
                  "locality",
                  "borough",
                  "localadmin",
                  "county",
                  "macrocounty",
                  "region",
                  "macroregion",
                  "country",
                  "coarse"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Set the number of returned results.\n",
            "in": "query",
            "name": "size",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "geocoding": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "title": "Geocode response",
                  "type": "object"
                }
              }
            },
            "description": "Please refer to [this external documentation](https://github.com/pelias/documentation/blob/master/search.md#search-the-world) for this endpoint"
          }
        },
        "summary": "Forward Geocode Service",
        "tags": [
          "Geocode"
        ]
      }
    },
    "/geocode/search/structured": {
      "get": {
        "description": "Returns a JSON formatted list of objects corresponding to the search input. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/structured-geocoding.md#structured-geocoding)\n",
        "parameters": [
          {
            "description": "Insert your API Key here.\n",
            "in": "query",
            "name": "api_key",
            "required": true,
            "schema": {
              "default": "your-api-key",
              "type": "string"
            }
          },
          {
            "description": "Search for full address with house number or only a street name.\n",
            "example": "none",
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for neighbourhoods. Neighbourhoods are vernacular geographic entities that may not necessarily be official administrative divisions but are important nonetheless. Example: `Notting Hill`.\n",
            "example": "none",
            "in": "query",
            "name": "neighbourhood",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for full country name, [alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [alpha 3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) codes.\n",
            "example": "none",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for postal codes. Postal codes are unique within a country so they are useful in geocoding as a shorthand for a fairly granular geographical location.\n",
            "example": "none",
            "in": "query",
            "name": "postalcode",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for regions. Regions are normally the first-level administrative divisions within countries. For US-regions [common abbreviations](https://en.wikipedia.org/wiki/List_of_U.S._state_abbreviations) can be used.\n",
            "example": "none",
            "in": "query",
            "name": "region",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for counties. Counties are administrative divisions between localities and regions. Can be useful when attempting to disambiguate between localities.\n",
            "example": "none",
            "in": "query",
            "name": "county",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for localities. Localities are equivalent to what are commonly referred to as *cities*.\n",
            "example": "Tokyo",
            "in": "query",
            "name": "locality",
            "schema": {
              "default": "Tokyo",
              "type": "string"
            }
          },
          {
            "description": "Search for boroughs. Boroughs are mostly known in the context of New York City, even though they may exist in other cities, such as Mexico City. Example: `Manhatten`.\n",
            "example": "none",
            "in": "query",
            "name": "borough",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Longitude of the `focus.point`. Specify the focus point to order results by linear distance to this point. Works for up to 100 kilometers distance.  Use with `focus.point.lat`.\n",
            "example": 8.673964,
            "in": "query",
            "name": "focus.point.lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Latitude of the `focus.point`. Specify the focus point to order results by linear distance to this point. Works for up to 100 kilometers distance. Use with `focus.point.lon`.\n",
            "example": 49.436431,
            "in": "query",
            "name": "focus.point.lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "focus.point.lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Left border of rectangular boundary to narrow results.\n",
            "example": 8.557663,
            "in": "query",
            "name": "boundary.rect.min_lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Bottom border of rectangular boundary to narrow results.\n",
            "example": 49.331387,
            "in": "query",
            "name": "boundary.rect.min_lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Right border of rectangular boundary to narrow results.\n",
            "example": 8.972054,
            "in": "query",
            "name": "boundary.rect.max_lon",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.min_lat",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Top border of rectangular boundary to narrow results.\n",
            "example": 49.525654,
            "in": "query",
            "name": "boundary.rect.max_lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.rect.min_lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.min_lat",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.rect.max_lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Center Longitude of circular boundary to narrow results. Use with `boundary.circle.lat` & `boundary.circle.radius`.\n",
            "example": 8.673964,
            "in": "query",
            "name": "boundary.circle.lon",
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Center Latitude of circular boundary to narrow results. Use with `boundary.circle.lon` & `boundary.circle.radius`.\n",
            "example": 49.436431,
            "in": "query",
            "name": "boundary.circle.lat",
            "schema": {
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.circle.lon",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Radius of circular boundary around the center coordinate in kilometers. Use with `boundary.circle.lon` & `boundary.circle.lat`.\n",
            "in": "query",
            "name": "boundary.circle.radius",
            "schema": {
              "default": 50,
              "format": "float",
              "type": "number"
            },
            "x-validWhen": [
              {
                "ref": "boundary.circle.lon",
                "skipRootPathLookup": true
              },
              {
                "ref": "boundary.circle.lat",
                "skipRootPathLookup": true
              }
            ]
          },
          {
            "description": "Restrict results to single country. Possible values are [alpha-2 and alpha-3 country codes](https://en.wikipedia.org/wiki/ISO_3166-1). Example: `DEU` or `DE` for Germany.\n",
            "example": "DE",
            "in": "query",
            "name": "boundary.country",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restrict search to layers (place type). By default all layers are searched.\n  layer|description|\n  ----|----|\n  `venue`|points of interest, businesses, things with walls|\n  `address`|places with a street address|\n  `street`|streets,roads,highways|\n  `neighbourhood`|social communities, neighbourhoods|\n  `borough`|a local administrative boundary, currently only used for New York City|\n  `localadmin`|local administrative boundaries|\n  `locality`|towns, hamlets, cities|\n  `county`|official governmental area; usually bigger than a locality, almost always smaller than a region|\n  `macrocounty`|a related group of counties. Mostly in Europe.|\n  `region`|states and provinces|\n  `macroregion`|a related group of regions. Mostly in Europe|\n  `country`|places that issue passports, nations, nation-states|\n  `coarse`|alias for simultaneously using all administrative layers (everything except `venue` and `address`)|\n",
            "example": "address,venue",
            "in": "query",
            "name": "layers",
            "schema": {
              "items": {
                "enum": [
                  "address",
                  "venue",
                  "neighbourhood",
                  "locality",
                  "borough",
                  "localadmin",
                  "county",
                  "macrocounty",
                  "region",
                  "macroregion",
                  "country",
                  "coarse"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Restrict your search to specific sources. Searches all sources by default. You can either use the normal or short name. Sources are [`openstreetmap(osm)`](http://www.openstreetmap.org/), [`openaddresses(oa)`](http://openaddresses.io/), [`whosonfirst(wof)`](https://whosonfirst.org/), [`geonames(gn)`](http://www.geonames.org/).\n",
            "in": "query",
            "name": "sources",
            "schema": {
              "default": [
                "osm",
                "oa",
                "gn",
                "wof"
              ],
              "items": {
                "enum": [
                  "openstreetmap",
                  "openaddresses",
                  "whosonfirst",
                  "geonames"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "x-multiSelect": true
          },
          {
            "description": "Set the number of returned results.\n",
            "in": "query",
            "name": "size",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "geocoding": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "title": "Geocode response",
                  "type": "object"
                }
              }
            },
            "description": "Please refer to [this external documentation](https://github.com/pelias/documentation/blob/master/structured-geocoding.md#structured-geocoding) for this endpoint"
          }
        },
        "summary": "Structured Forward Geocode Service (beta)",
        "tags": [
          "Geocode"
        ]
      }
    },
    "/optimization": {
      "post": {
        "description": "The optimization endpoint solves [Vehicle Routing Problems](https://en.wikipedia.org/wiki/Vehicle_routing_problem) and can be used to schedule multiple vehicles and jobs, respecting time windows, capacities and required skills.\n\nThis service is based on the excellent [Vroom project](https://github.com/VROOM-Project/vroom). Please also consult its [API documentation](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md).\n\nGeneral Info:\n- The expected order for all coordinates arrays is `[lon, lat]`\n- All timings are in seconds\n- All distances are in meters\n- A `time_window` object is a pair of timestamps in the form `[start, end]`\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "description": "Array of `job` objects describing the places to visit. For a detailed object description visit the [VROOM api description](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md#jobs)\n",
                    "example": [
                      {
                        "delivery": [
                          1
                        ],
                        "id": 1,
                        "location": [
                          1.98465,
                          48.70329
                        ],
                        "service": 300,
                        "skills": [
                          1
                        ],
                        "time_windows": [
                          [
                            32400,
                            36000
                          ]
                        ]
                      },
                      {
                        "delivery": [
                          1
                        ],
                        "id": 2,
                        "location": [
                          2.03655,
                          48.61128
                        ],
                        "service": 300,
                        "skills": [
                          1
                        ]
                      },
                      {
                        "delivery": [
                          1
                        ],
                        "id": 3,
                        "location": [
                          2.39719,
                          49.07611
                        ],
                        "service": 300,
                        "skills": [
                          2
                        ]
                      },
                      {
                        "delivery": [
                          1
                        ],
                        "id": 4,
                        "location": [
                          2.41808,
                          49.22619
                        ],
                        "service": 300,
                        "skills": [
                          2
                        ]
                      },
                      {
                        "delivery": [
                          1
                        ],
                        "id": 5,
                        "location": [
                          2.28325,
                          48.5958
                        ],
                        "service": 300,
                        "skills": [
                          14
                        ]
                      },
                      {
                        "delivery": [
                          1
                        ],
                        "id": 6,
                        "location": [
                          2.89357,
                          48.90736
                        ],
                        "service": 300,
                        "skills": [
                          14
                        ]
                      }
                    ],
                    "items": {
                      "description": "If a custom matrix is provided:\n- `location_index` is mandatory\n- `location` is optional but can be set to retrieve coordinates in the response\n\nIf no custom matrix is provided:\n- a `matrix` query will be sent to ORS\n- `location` is mandatory\n- `location_index` is irrelevant\n",
                      "properties": {
                        "delivery": {
                          "description": "an array of integers describing multidimensional quantities for delivery\n",
                          "items": {
                            "format": "int32",
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "description": {
                          "description": "a string describing this job\n",
                          "example": "Fix broken pipe",
                          "type": "string"
                        },
                        "id": {
                          "description": "an integer used as unique identifier\n",
                          "format": "int32",
                          "type": "integer"
                        },
                        "location": {
                          "description": "coordinates array in `[lon, lat]`\n",
                          "items": {
                            "items": {
                              "format": "float",
                              "type": "number"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "location_index": {
                          "description": "index of relevant row and column in custom matrix\n",
                          "type": "object"
                        },
                        "pickup": {
                          "description": "an array of integers describing multidimensional quantities for pickup\n",
                          "items": {
                            "format": "int32",
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "priority": {
                          "default": 0,
                          "description": "an integer in the range [0, 100] describing priority level (defaults to 0)\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "service": {
                          "description": "job service duration (defaults to 0), in seconds\n",
                          "type": "object"
                        },
                        "setup": {
                          "description": "job setup duration (defaults to 0), in seconds\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "skills": {
                          "description": "Array of integers defining mandatory skills for this job\n",
                          "items": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "time_windows": {
                          "description": "Array of `time_window` arrays describing valid slots for job service start and end,\nin week seconds, i.e. 28800 = Mon, 8 AM.\n",
                          "example": [
                            [
                              28800,
                              32400
                            ],
                            [
                              61200,
                              68400
                            ]
                          ],
                          "items": {
                            "items": {
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "matrices": {
                    "description": "The matrices object allows to input (non-empty) custom matrices for each vehicle profile.\n\nIf only the durations matrix is provided, internal costs are derived from durations based on vehicles costs properties.\n\nIf custom matrices are provided for all required vehicle profile values, the location, start and end properties become optional.\nInstead of the coordinates, row and column indications provided with the *_index keys are used during optimization.\n",
                    "example": {
                      "cycling-regular": {
                        "durations": [
                          [
                            0,
                            57
                          ],
                          [
                            43,
                            0
                          ]
                        ]
                      },
                      "driving-car": {
                        "durations": [
                          [
                            0,
                            14
                          ],
                          [
                            21,
                            0
                          ]
                        ]
                      }
                    },
                    "properties": {
                      "cycling-electric": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "cycling-mountain": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "cycling-regular": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "cycling-road": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "driving-car": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "driving-hgv": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "foot-hiking": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "foot-walking": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "wheelchair": {
                        "description": "Contains `durations`, `distances` or `cost` matrices for a profile",
                        "properties": {
                          "costs": {
                            "description": "costs for a custom cost matrix that will be used within all route cost evaluations",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "distances": {
                            "description": "distances for a custom distance matrix",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "durations": {
                            "description": "Durations for a custom travel-time matrix that will be used for all checks against timing constraints",
                            "items": {
                              "items": {
                                "format": "number",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "Additional options passed to the optimization engine.",
                    "properties": {
                      "g": {
                        "description": "Calculate geometries for the optimized routes.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "vehicles": {
                    "description": "Array of `vehicle` objects describing the available vehicles. For a detailed object description visit the [VROOM API description](https://github.com/VROOM-Project/vroom/blob/master/docs/API.md#vehicles)\n",
                    "example": [
                      {
                        "capacity": [
                          4
                        ],
                        "end": [
                          2.35044,
                          48.71764
                        ],
                        "id": 1,
                        "profile": "driving-car",
                        "skills": [
                          1,
                          14
                        ],
                        "start": [
                          2.35044,
                          48.71764
                        ],
                        "time_window": [
                          28800,
                          43200
                        ]
                      },
                      {
                        "capacity": [
                          4
                        ],
                        "end": [
                          2.35044,
                          48.71764
                        ],
                        "id": 2,
                        "profile": "driving-car",
                        "skills": [
                          2,
                          14
                        ],
                        "start": [
                          2.35044,
                          48.71764
                        ],
                        "time_window": [
                          28800,
                          43200
                        ]
                      }
                    ],
                    "items": {
                      "description": "A vehicle object with capacity, time windows and skills.\n",
                      "properties": {
                        "breaks": {
                          "description": "An array of `break` objects\n",
                          "items": {
                            "properties": {
                              "description": {
                                "description": "a string describing this break\n",
                                "type": "string"
                              },
                              "id": {
                                "description": "Integer used as unique identifier\n",
                                "format": "int32",
                                "type": "integer"
                              },
                              "max_load": {
                                "description": "Array of integers describing the maximum vehicle load for which this break can happen.\nAn error is reported if two break objects have the same id for the same vehicle.\n",
                                "items": {
                                  "format": "integer",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "service": {
                                "default": 0,
                                "description": "break duration in seconds (defaults to 0)\n",
                                "format": "int32",
                                "type": "number"
                              },
                              "time_windows": {
                                "description": "Array of time_window objects describing valid slots for break start and end,\nin week seconds, i.e. 28800 = Mon, 8 AM.\n",
                                "example": [
                                  [
                                    28800,
                                    32400
                                  ],
                                  [
                                    61200,
                                    68400
                                  ]
                                ],
                                "items": {
                                  "items": {
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "capacity": {
                          "description": "Array of integers describing multidimensional quantities.\n",
                          "items": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "costs": {
                          "properties": {
                            "fixed": {
                              "default": 0,
                              "description": "integer defining the cost of using this vehicle in the solution (defaults to 0)\n",
                              "format": "int32",
                              "type": "number"
                            },
                            "per_hour": {
                              "default": 3600,
                              "description": "integer defining the cost for one hour of travel time with this vehicle (defaults to 3600)\n",
                              "format": "int32",
                              "type": "number"
                            },
                            "per_km": {
                              "default": 0,
                              "description": "integer defining the cost for one km of travel time with this vehicle (defaults to 0)\n",
                              "format": "int32",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "description": {
                          "description": "a string describing this vehicle\n",
                          "example": "Delivery vehicle 1",
                          "type": "string"
                        },
                        "end": {
                          "description": "End coordinates array in `[lon, lat]` format. If left blank, the optimization\nengine will identify the optimal end point.\n",
                          "items": {
                            "format": "float",
                            "type": "number"
                          },
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "array"
                        },
                        "end_index": {
                          "description": "Index of relevant row and column in custom matrix.\n",
                          "type": "object"
                        },
                        "id": {
                          "description": "Integer used as unique identifier\n",
                          "format": "int32",
                          "type": "integer"
                        },
                        "max_distance": {
                          "description": "an integer defining the maximum distance for this vehicle\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "max_tasks": {
                          "description": "an integer defining the maximum number of tasks in a route for this vehicle\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "max_travel_time": {
                          "description": "an integer defining the maximum travel time for this vehicle\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "profile": {
                          "description": "The ORS routing profile for the vehicle.\n",
                          "enum": [
                            "driving-car",
                            "driving-hgv",
                            "cycling-regular",
                            "cycling-mountain",
                            "cycling-electric",
                            "cycling-road",
                            "foot-walking",
                            "foot-hiking",
                            "wheelchair"
                          ],
                          "example": "driving-car",
                          "type": "string"
                        },
                        "skills": {
                          "description": "Array of integers defining skills for this vehicle\n",
                          "items": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "speed_factor": {
                          "description": "A double value in the range (0, 5] used to scale all vehicle travel times (defaults to 1.).\nThe respected precision is limited to two digits after the decimal point.\n",
                          "format": "float",
                          "type": "number"
                        },
                        "start": {
                          "description": "Start coordinates array in `[lon, lat]` format. If left blank, the optimization\nengine will identify the optimal start point.\n",
                          "items": {
                            "format": "float",
                            "type": "number"
                          },
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "array"
                        },
                        "start_index": {
                          "description": "Index of relevant row and column in custom matrix.\n",
                          "type": "object"
                        },
                        "steps": {
                          "items": {
                            "properties": {
                              "id": {
                                "description": "id of the task to be performed at this step if `type` value is not `start` or `end`\n",
                                "format": "int32",
                                "type": "number"
                              },
                              "service_after": {
                                "description": "hard constraint on service time lower bound (as absolute or relative timestamp)\n",
                                "format": "int32",
                                "type": "number"
                              },
                              "service_at": {
                                "description": "hard constraint on service time (as absolute or relative timestamp)\n",
                                "format": "int32",
                                "type": "number"
                              },
                              "service_before": {
                                "description": "hard constraint on service time upper bound (as absolute or relative timestamp)\n",
                                "format": "int32",
                                "type": "number"
                              },
                              "type": {
                                "description": "step type (either start, job, pickup, delivery, break or end)]\n",
                                "enum": [
                                  "start",
                                  "job",
                                  "pickup",
                                  "delivery",
                                  "break",
                                  "end"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "time_window": {
                          "description": "A `time_window` array describing working hours for this vehicle,\nin week seconds, i.e. 28800 = Mon, 8 AM.\n",
                          "example": [
                            28800,
                            32400
                          ],
                          "items": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "jobs",
                  "vehicles"
                ],
                "type": "object"
              }
            }
          },
          "description": "The request body of the optimization request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "status code. Possible values:\n\n Value         | Status |\n :-----------: | :-----------: |\n `0` | no error raised |\n `1` | internal error |\n `2` | input error |\n `3` | routing error |\n",
                      "format": "int32",
                      "type": "integer"
                    },
                    "error": {
                      "description": "error message (present if `code` is different from `0`)\n",
                      "type": "string"
                    },
                    "routes": {
                      "description": "array of `route` objects\n",
                      "items": {
                        "properties": {
                          "cost": {
                            "description": "cost for this route",
                            "format": "float",
                            "type": "number"
                          },
                          "delivery": {
                            "description": "Total delivery for tasks in this route",
                            "items": {
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "description": {
                            "description": "vehicle description, if provided in input\n",
                            "type": "string"
                          },
                          "distance": {
                            "description": "total route distance. Only provided when using the `-g` flag",
                            "format": "float",
                            "type": "number"
                          },
                          "duration": {
                            "description": "total travel time for this route",
                            "format": "float",
                            "type": "number"
                          },
                          "geometry": {
                            "description": "polyline encoded route geometry. Only provided when using the `-g` flag",
                            "type": "string"
                          },
                          "pickup": {
                            "description": "total pickup for tasks in this route",
                            "items": {
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "service": {
                            "description": "total service time for this route",
                            "format": "float",
                            "type": "number"
                          },
                          "steps": {
                            "description": "array of `step` objects",
                            "items": {
                              "properties": {
                                "arrival": {
                                  "description": "estimated time of arrival at this step in seconds",
                                  "format": "float",
                                  "type": "number"
                                },
                                "description": {
                                  "description": "step description, if provided in input\n",
                                  "type": "string"
                                },
                                "distance": {
                                  "description": "traveled distance upon arrival at this step. Only provided when using the `-g` flag",
                                  "format": "float",
                                  "type": "number"
                                },
                                "duration": {
                                  "description": "cumulated travel time upon arrival at this step in seconds",
                                  "format": "float",
                                  "type": "number"
                                },
                                "id": {
                                  "description": "id of the task performed at this step, only provided if type value is `job`, `pickup`, `delivery` or `break`\n",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "load": {
                                  "description": "vehicle load after step completion (with capacity constraints)\n",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "location": {
                                  "description": "coordinates array for this step (if provided in input)",
                                  "items": {
                                    "format": "float",
                                    "type": "number"
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "service": {
                                  "description": "service time at this step\n",
                                  "format": "int32",
                                  "type": "number"
                                },
                                "setup": {
                                  "description": "setup time at this step\n",
                                  "format": "int32",
                                  "type": "number"
                                },
                                "type": {
                                  "description": "string that is either `start`, `job` or `end`",
                                  "type": "string"
                                },
                                "violations": {
                                  "description": "array of violation objects for this step",
                                  "items": {
                                    "description": "Note on violations: reporting only really makes sense when using -c to choose ETA for custom routes described in input using the steps keys for a vehicle.\nWhen using regular optimization, violations are still reported for consistency, but are guaranteed to be \"void\", i.e. violations arrays are empty.\n",
                                    "properties": {
                                      "cause": {
                                        "description": "string describing the cause of violation.\nPossible violation causes are:\n            - \"delay\" if actual service start does not meet a task time window and is late on a time window end\n            - \"lead_time\" if actual service start does not meet a task time window and is early on a time window start\n            - \"load\" if the vehicle load goes over its capacity\n            - \"max_tasks\" if the vehicle has more tasks than its max_tasks value\n            - \"skills\" if the vehicle does not hold all required skills for a task\n            - \"precedence\" if a shipment precedence constraint is not met (pickup without matching delivery, delivery before/without matching pickup)\n            - \"missing_break\" if a vehicle break has been omitted in its custom route\n            - \"max_travel_time\" if the vehicle has more travel time than its max_travel_time value\n            - \"max_load\" if the load during a break exceed its max_load value\n",
                                        "type": "string"
                                      },
                                      "duration": {
                                        "description": "Earliness (resp. lateness) if `cause` is \"lead_time\" (resp \"delay\")\n",
                                        "format": "int32",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "waiting_time": {
                                  "description": "waiting time upon arrival at this step, only provided if `type` value is `job`",
                                  "format": "float",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "vehicle": {
                            "description": "id of the vehicle assigned to this route",
                            "format": "int32",
                            "type": "integer"
                          },
                          "waiting_time": {
                            "description": "total waiting time for this route",
                            "format": "float",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "summary": {
                      "description": "object summarizing solution indicators\n",
                      "properties": {
                        "cost": {
                          "description": "total cost for all routes",
                          "type": "number"
                        },
                        "delivery": {
                          "description": "Total delivery for all routes",
                          "format": "int32",
                          "type": "number"
                        },
                        "distance": {
                          "description": "total distance for all routes. Only provided when using the `-g` flag with `OSRM`",
                          "format": "float",
                          "type": "number"
                        },
                        "duration": {
                          "description": "total travel time for all routes",
                          "format": "float",
                          "type": "number"
                        },
                        "pickup": {
                          "description": "Total pickup for all routes",
                          "format": "int32",
                          "type": "number"
                        },
                        "priority": {
                          "description": "total priority sum for all assigned tasks",
                          "format": "int32",
                          "type": "number"
                        },
                        "routes": {
                          "description": "Number of routes in the solution\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "service": {
                          "description": "total service time for all routes",
                          "format": "float",
                          "type": "number"
                        },
                        "setup": {
                          "description": "Total setup time for all routes\n",
                          "format": "int32",
                          "type": "number"
                        },
                        "unassigned": {
                          "description": "number of jobs that could not be served",
                          "format": "int32",
                          "type": "integer"
                        },
                        "violations": {
                          "description": "array of violation objects for all routes",
                          "items": {
                            "description": "Note on violations: reporting only really makes sense when using -c to choose ETA for custom routes described in input using the steps keys for a vehicle.\nWhen using regular optimization, violations are still reported for consistency, but are guaranteed to be \"void\", i.e. violations arrays are empty.\n",
                            "properties": {
                              "cause": {
                                "description": "string describing the cause of violation.\nPossible violation causes are:\n            - \"delay\" if actual service start does not meet a task time window and is late on a time window end\n            - \"lead_time\" if actual service start does not meet a task time window and is early on a time window start\n            - \"load\" if the vehicle load goes over its capacity\n            - \"max_tasks\" if the vehicle has more tasks than its max_tasks value\n            - \"skills\" if the vehicle does not hold all required skills for a task\n            - \"precedence\" if a shipment precedence constraint is not met (pickup without matching delivery, delivery before/without matching pickup)\n            - \"missing_break\" if a vehicle break has been omitted in its custom route\n            - \"max_travel_time\" if the vehicle has more travel time than its max_travel_time value\n            - \"max_load\" if the load during a break exceed its max_load value\n",
                                "type": "string"
                              },
                              "duration": {
                                "description": "Earliness (resp. lateness) if `cause` is \"lead_time\" (resp \"delay\")\n",
                                "format": "int32",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "waiting_time": {
                          "description": "total waiting time for all routes",
                          "format": "float",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "unassigned": {
                      "description": "array of objects describing unassigned jobs with their `id` and `location` (if provided)\n",
                      "items": {
                        "description": "Unassigned Job with `id` and `location` (if provided)",
                        "properties": {
                          "id": {
                            "description": "The `id` of the unassigned job\"",
                            "format": "int32",
                            "type": "integer"
                          },
                          "location": {
                            "description": "The `location` of the unassigned job",
                            "items": {
                              "format": "float",
                              "type": "number"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Valid response if code contains `0`"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Authorization field missing."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Key not authorised."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and more detailed internal\nerror code is provided.\n| Internal Code | Description  |\n|:-:|--------------------------|\n| 1 |  Internal Vroom error    |\n| 2 |  Error in input          |\n| 3 |  Routing error in ORS    |\n| 4 |  Request too large       |\n"
          }
        },
        "summary": "Optimization Service",
        "tags": [
          "Optimization"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/pois": {
      "post": {
        "description": "Returns points of interest in the area surrounding a geometry which can either be a bounding box, polygon or buffered linestring or point.\nFind more examples on [github](https://github.com/GIScience/openpoiservice).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filters": {
                    "description": "Filters in terms of osm_tags which should be applied to the query.",
                    "example": "{\"fee\":\"no\"}",
                    "properties": {
                      "category_group_ids": {
                        "example": [
                          420
                        ],
                        "items": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "category_ids": {
                        "example": [
                          601,
                          280
                        ],
                        "items": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "fee": {
                        "description": "Filter example.",
                        "example": [
                          true,
                          false
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "Filter by name of the poi object.",
                        "example": [
                          "Gas station",
                          "..."
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "smoking": {
                        "description": "Filter example.",
                        "example": [
                          "dedicated",
                          true,
                          false,
                          "separated",
                          "isolated",
                          "outside"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "wheelchair": {
                        "description": "Filter example.",
                        "example": [
                          true,
                          false,
                          "limited",
                          "designated"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "x-validWhen": {
                      "ref": "request",
                      "value": "pois"
                    }
                  },
                  "geometry": {
                    "default": "{\"bbox\":[[8.8034,53.0756],[8.7834,53.0456]],\"geojson\":{\"type\":\"Point\",\"coordinates\":[8.8034,53.0756]},\"buffer\":200}",
                    "description": "The geometry object which is a geojson or a bounding box object, optionally buffered.",
                    "properties": {
                      "bbox": {
                        "description": "The pattern for this bbox string is minlon,minlat,maxlon,maxlat",
                        "example": [
                          [
                            53.075051,
                            8.798952
                          ],
                          [
                            53.080785,
                            8.90716
                          ]
                        ],
                        "items": {
                          "type": "number"
                        },
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                      },
                      "buffer": {
                        "example": 500,
                        "format": "int64",
                        "type": "integer"
                      },
                      "geojson": {
                        "description": "This is a GeoJSON object. Is either Point, Polygon or LineString.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-validWhen": {
                      "ref": "request",
                      "valueNot": "list"
                    }
                  },
                  "limit": {
                    "description": "The limit of objects to be returned in the response.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "request",
                      "value": "pois"
                    }
                  },
                  "request": {
                    "description": "Examples:\n```\n#### JSON bodies for POST requests\n##### Pois around a buffered point\n{\n  \"request\": \"pois\",\n  \"geometry\": {\n    \"bbox\": [\n      [8.8034, 53.0756],\n      [8.7834, 53.0456]\n    ],\n    \"geojson\": {\n      \"type\": \"Point\",\n      \"coordinates\": [8.8034, 53.0756]\n    },\n    \"buffer\": 250\n  }\n}\n\n##### Pois given categories\n{\n  \"request\": \"pois\",\n  \"geometry\": {\n    \"bbox\": [\n      [8.8034, 53.0756],\n      [8.7834, 53.0456]\n    ],\n    \"geojson\": {\n      \"type\": \"Point\",\n      \"coordinates\": [8.8034, 53.0756]\n    },\n    \"buffer\": 100\n  },\n  \"limit\": 200,\n  \"filters\": {\n    \"category_ids\": [180, 245]\n  }\n}\n\n##### Pois given category groups\n{\n  \"request\": \"pois\",\n  \"geometry\": {\n    \"bbox\": [\n      [8.8034, 53.0756],\n      [8.7834, 53.0456]\n    ],\n    \"geojson\": {\n      \"type\": \"Point\",\n      \"coordinates\": [8.8034, 53.0756]\n    },\n    \"buffer\": 100\n  },\n  \"limit\": 200,\n  \"filters\": {\n    \"category_group_ids\": [160]\n  }\n}\n\n##### Pois statistics\n{\n  \"request\": \"stats\",\n  \"geometry\": {\n    \"bbox\": [\n      [8.8034, 53.0756],\n      [8.7834, 53.0456]\n    ],\n    \"geojson\": {\n      \"type\": \"Point\",\n      \"coordinates\": [8.8034, 53.0756]\n    },\n    \"buffer\": 100\n  }\n}\n\n##### Pois categories as a list\n{\n    \"request\": \"list\"\n}\n```\n",
                    "enum": [
                      "pois",
                      "stats",
                      "list"
                    ],
                    "example": "pois",
                    "type": "string"
                  },
                  "sortby": {
                    "description": "Either you can sort by category or the distance to the geometry object provided in the request.",
                    "enum": [
                      "category",
                      "distance"
                    ],
                    "example": "category",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "request",
                      "value": "pois"
                    }
                  }
                },
                "required": [
                  "geometry",
                  "request"
                ],
                "title": "Openpoiservice poi request",
                "type": "object"
              }
            }
          },
          "description": "body for a post request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The POI response GeoJSON FeatureCollection",
                  "properties": {
                    "features": {
                      "items": {
                        "properties": {
                          "feature_properties": {
                            "properties": {
                              "category_ids": {
                                "properties": {
                                  "category_id": {
                                    "properties": {
                                      "category_group": {
                                        "type": "number"
                                      },
                                      "category_name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "distance": {
                                "type": "number"
                              },
                              "osm_id": {
                                "type": "number"
                              },
                              "osm_tags": {
                                "properties": {
                                  "address": {
                                    "type": "string"
                                  },
                                  "distance": {
                                    "type": "string"
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "opening_hours": {
                                    "type": "string"
                                  },
                                  "website": {
                                    "type": "string"
                                  },
                                  "wheelchair": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "osm_type": {
                                "type": "number"
                              }
                            },
                            "title": "GeoJSON properties object",
                            "type": "object"
                          },
                          "geometry": {
                            "properties": {
                              "coordinates": {
                                "items": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": {
                                "default": "Point",
                                "type": "string"
                              }
                            },
                            "title": "GeoJSON geometry object",
                            "type": "object"
                          },
                          "type": {
                            "default": "Feature",
                            "type": "string"
                          }
                        },
                        "title": "GeoJSON features object",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "type": {
                      "default": "FeatureCollection",
                      "type": "string"
                    }
                  },
                  "title": "Openpoiservice poi response",
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request was invalid, and more detailed internal errorcode is provided.\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n| 4000 |  Invalid JSON object in request |\n| 4001 |  Category or category group ids missing |\n| 4002 |  Geometry is missing |\n| 4003 |  Bounding box and or geojson not present in request |\n| 4004 |  Buffer is missing |\n| 4005 |  Geometry length does not meet the restrictions |\n| 4006 |  Unsupported HTTP method |\n| 4007 |  GeoJSON parsing error |\n| 4008 |  Geometry size does not meet the restrictions |\n| 4009 |  Unsupported Content-Type |\n"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Authorization field missing."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Key not authorised."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Unknown internal error"
          }
        },
        "summary": "Pois Service",
        "tags": [
          "Pois"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/directions/{profile}": {
      "get": {
        "description": "Get a basic route between two points with the profile provided. Returned response is in GeoJSON format. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.",
        "operationId": "getSimpleGeoJsonRoute",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          },
          {
            "description": "Start coordinate of the route in `longitude,latitude` format.",
            "example": "8.681495,49.41461",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Destination coordinate of the route in `longitude,latitude` format.",
            "example": "8.687872,49.420318",
            "in": "query",
            "name": "end",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "description": "Bounding box that covers all returned routes",
                      "example": [
                        49.414057,
                        8.680894,
                        49.420514,
                        8.690123
                      ],
                      "items": {
                        "description": "Bounding box that covers all returned routes",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the request (as passed in by the query)",
                          "example": "request123",
                          "type": "string"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                          "properties": {
                            "alternative_routes": {
                              "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                              "example": {
                                "target_count": 2,
                                "weight_factor": 1.6
                              },
                              "properties": {
                                "share_factor": {
                                  "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                                  "example": 0.6,
                                  "format": "double",
                                  "type": "number"
                                },
                                "target_count": {
                                  "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                                  "example": 2,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "weight_factor": {
                                  "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                                  "example": 1.4,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "title": "Alternative Routes",
                              "type": "object"
                            },
                            "attributes": {
                              "description": "List of route attributes",
                              "example": [
                                "avgspeed",
                                "percentage"
                              ],
                              "items": {
                                "description": "List of route attributes",
                                "enum": [
                                  "avgspeed",
                                  "detourfactor",
                                  "percentage"
                                ],
                                "example": "[\"avgspeed\",\"percentage\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "bearings": {
                              "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                              "example": [
                                [
                                  30,
                                  20
                                ],
                                [],
                                [
                                  40,
                                  20
                                ]
                              ],
                              "items": {
                                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                "example": [
                                  [
                                    30,
                                    20
                                  ],
                                  [],
                                  [
                                    40,
                                    20
                                  ]
                                ],
                                "items": {
                                  "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "cycling-*"
                                  }
                                },
                                "type": "array",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              },
                              "type": "array",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "cycling-*"
                              }
                            },
                            "continue_straight": {
                              "default": false,
                              "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                              "type": "boolean"
                            },
                            "coordinates": {
                              "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ],
                                [
                                  8.687872,
                                  49.420318
                                ]
                              ],
                              "items": {
                                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ],
                                  [
                                    8.687872,
                                    49.420318
                                  ]
                                ],
                                "items": {
                                  "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "elevation": {
                              "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                              "example": false,
                              "type": "boolean"
                            },
                            "extra_info": {
                              "description": "The extra info items to include in the response",
                              "example": [
                                "waytype",
                                "surface"
                              ],
                              "items": {
                                "description": "Specify which extra info items to include in the response",
                                "enum": [
                                  "steepness",
                                  "suitability",
                                  "surface",
                                  "waycategory",
                                  "waytype",
                                  "tollways",
                                  "traildifficulty",
                                  "osmid",
                                  "roadaccessrestrictions",
                                  "countryinfo",
                                  "green",
                                  "noise",
                                  "csv",
                                  "shadow"
                                ],
                                "example": "[\"waytype\",\"surface\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "geometry": {
                              "default": true,
                              "description": "Specifies whether to return geometry. ",
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "format",
                                "value": [
                                  "json"
                                ]
                              }
                            },
                            "geometry_simplify": {
                              "default": false,
                              "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                              "type": "boolean"
                            },
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "ignore_transfers": {
                              "default": false,
                              "description": "Specifies if transfers as criterion should be ignored.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "instructions": {
                              "default": true,
                              "description": "Specifies whether to return instructions.",
                              "type": "boolean"
                            },
                            "instructions_format": {
                              "default": "text",
                              "description": "Select html for more verbose instructions.",
                              "enum": [
                                "html",
                                "text"
                              ],
                              "type": "string"
                            },
                            "language": {
                              "default": "en",
                              "description": "Language for the route instructions.",
                              "enum": [
                                "cs",
                                "cs-cz",
                                "de",
                                "de-de",
                                "en",
                                "en-us",
                                "eo",
                                "eo-eo",
                                "es",
                                "es-es",
                                "fr",
                                "fr-fr",
                                "gr",
                                "gr-gr",
                                "he",
                                "he-il",
                                "hu",
                                "hu-hu",
                                "id",
                                "id-id",
                                "it",
                                "it-it",
                                "ja",
                                "ja-jp",
                                "ne",
                                "ne-np",
                                "nl",
                                "nl-nl",
                                "nb",
                                "nb-no",
                                "pl",
                                "pl-pl",
                                "pt",
                                "pt-pt",
                                "ro",
                                "ro-ro",
                                "ru",
                                "ru-ru",
                                "tr",
                                "tr-tr",
                                "zh",
                                "zh-cn"
                              ],
                              "type": "string"
                            },
                            "maneuvers": {
                              "default": false,
                              "description": "Specifies whether the maneuver object is included into the step object or not. ",
                              "type": "boolean"
                            },
                            "maximum_speed": {
                              "description": "The maximum speed specified by user.",
                              "example": 90,
                              "format": "double",
                              "type": "number",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "driving-*"
                              }
                            },
                            "options": {
                              "description": "Advanced options for routing",
                              "example": {
                                "avoid_borders": "controlled"
                              },
                              "properties": {
                                "avoid_borders": {
                                  "description": "Specify which type of border crossing to avoid",
                                  "enum": [
                                    "all",
                                    "controlled",
                                    "none"
                                  ],
                                  "example": "controlled",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_countries": {
                                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                  "example": [
                                    11,
                                    193
                                  ],
                                  "items": {
                                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                    "example": "[11,193]",
                                    "type": "string",
                                    "x-validWhen": {
                                      "ref": "profile",
                                      "value": "driving-*"
                                    }
                                  },
                                  "type": "array",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_features": {
                                  "description": "List of features to avoid. ",
                                  "example": [
                                    "highways"
                                  ],
                                  "items": {
                                    "description": "Definition of the features to be avoided.",
                                    "enum": [
                                      "highways",
                                      "tollways",
                                      "ferries",
                                      "fords",
                                      "steps"
                                    ],
                                    "example": "[\"highways\"]",
                                    "type": "string",
                                    "x-itemRestrictions": {
                                      "itemsWhen": {
                                        "cycling-*": [
                                          "ferries",
                                          "steps",
                                          "fords"
                                        ],
                                        "driving-*": [
                                          "highways",
                                          "tollways",
                                          "ferries"
                                        ],
                                        "foot-*": [
                                          "ferries",
                                          "fords",
                                          "steps"
                                        ],
                                        "wheelchair": [
                                          "ferries",
                                          "steps"
                                        ]
                                      },
                                      "ref": "profile"
                                    }
                                  },
                                  "type": "array",
                                  "x-itemRestrictions": {
                                    "itemsWhen": {
                                      "cycling-*": [
                                        "ferries",
                                        "steps",
                                        "fords"
                                      ],
                                      "driving-*": [
                                        "highways",
                                        "tollways",
                                        "ferries"
                                      ],
                                      "foot-*": [
                                        "ferries",
                                        "fords",
                                        "steps"
                                      ],
                                      "wheelchair": [
                                        "ferries",
                                        "steps"
                                      ]
                                    },
                                    "ref": "profile"
                                  }
                                },
                                "avoid_polygons": {
                                  "additionalProperties": {
                                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                    "type": "object"
                                  },
                                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                  "properties": {
                                    "empty": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "profile_params": {
                                  "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                                  "properties": {
                                    "allow_unsuitable": {
                                      "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "restrictions": {
                                      "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                                      "properties": {
                                        "axleload": {
                                          "description": "Axleload restriction in tons.",
                                          "example": 50,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "hazmat": {
                                          "default": false,
                                          "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                          "type": "boolean",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "height": {
                                          "description": "Height restriction in metres. ",
                                          "example": 4.2,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "length": {
                                          "description": "Length restriction in metres.",
                                          "example": 8.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "maximum_incline": {
                                          "default": 6,
                                          "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "maximum_sloped_kerb": {
                                          "default": 0.6,
                                          "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "minimum_width": {
                                          "description": "Specifies the minimum width of the footway in metres.",
                                          "example": 2.5,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "smoothness_type": {
                                          "default": "good",
                                          "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                          "enum": [
                                            "excellent",
                                            "good",
                                            "intermediate",
                                            "bad",
                                            "very_bad",
                                            "horrible",
                                            "very_horrible",
                                            "impassable"
                                          ],
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "surface_type": {
                                          "default": "sett",
                                          "description": "Specifies the minimum surface type. Default is `sett`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "track_type": {
                                          "default": "grade1",
                                          "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "weight": {
                                          "description": "Weight restriction in tons. ",
                                          "example": 40,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "width": {
                                          "description": "Width restriction in metres.",
                                          "example": 5.6,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "surface_quality_known": {
                                      "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "weightings": {
                                      "description": "Describe additional weightings to be applied to edges on the routing.",
                                      "properties": {
                                        "green": {
                                          "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "quiet": {
                                          "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                          "example": 0.8,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "shadow": {
                                          "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "steepness_difficulty": {
                                          "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                          "example": 2,
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "cycling-*"
                                          }
                                        }
                                      },
                                      "title": "Profile Weightings",
                                      "type": "object"
                                    }
                                  },
                                  "title": "Profile Parameters",
                                  "type": "object",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "valueNot": "driving-car"
                                  }
                                },
                                "round_trip": {
                                  "description": "Specifies the parameters for generating round trip routes.",
                                  "example": {
                                    "length": 10000,
                                    "points": 5
                                  },
                                  "properties": {
                                    "length": {
                                      "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                                      "example": 10000,
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "points": {
                                      "description": "The number of points to use on the route. Larger values create more circular routes.",
                                      "example": 5,
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "seed": {
                                      "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                                      "example": 1,
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "title": "Round Trip Route Options",
                                  "type": "object"
                                },
                                "vehicle_type": {
                                  "default": "hgv",
                                  "description": "Definition of the vehicle type.",
                                  "enum": [
                                    "hgv",
                                    "bus",
                                    "agricultural",
                                    "delivery",
                                    "forestry",
                                    "goods",
                                    "unknown"
                                  ],
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-hgv"
                                  }
                                }
                              },
                              "title": "Route Options",
                              "type": "object"
                            },
                            "preference": {
                              "default": "recommended",
                              "description": "Specifies the route preference",
                              "enum": [
                                "fastest",
                                "shortest",
                                "recommended"
                              ],
                              "type": "string"
                            },
                            "radiuses": {
                              "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                              "example": [
                                200,
                                -1,
                                30
                              ],
                              "items": {
                                "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                                "format": "double",
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "roundabout_exits": {
                              "default": false,
                              "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                              "type": "boolean"
                            },
                            "schedule": {
                              "default": false,
                              "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "schedule_duration": {
                              "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "schedule_rows": {
                              "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                              "example": 3,
                              "format": "int32",
                              "type": "integer",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "skip_segments": {
                              "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                              "example": [
                                2,
                                4
                              ],
                              "items": {
                                "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "suppress_warnings": {
                              "description": "Suppress warning messages in the response",
                              "example": false,
                              "type": "boolean"
                            },
                            "units": {
                              "default": "m",
                              "description": "Specifies the distance unit.",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string"
                            },
                            "walking_time": {
                              "default": "PT15M",
                              "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            }
                          },
                          "required": [
                            "coordinates"
                          ],
                          "title": "Directions Service",
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "routing",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns GeoJSON. The decoded values of the extra information can be found [here](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html)."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Directions Service",
        "tags": [
          "Directions Service"
        ]
      },
      "post": {
        "description": "Returns a route between two or more locations for a selected profile and its settings as JSON",
        "operationId": "getDefault_3",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                "properties": {
                  "alternative_routes": {
                    "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                    "example": {
                      "target_count": 2,
                      "weight_factor": 1.6
                    },
                    "properties": {
                      "share_factor": {
                        "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                        "example": 0.6,
                        "format": "double",
                        "type": "number"
                      },
                      "target_count": {
                        "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "weight_factor": {
                        "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                        "example": 1.4,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "title": "Alternative Routes",
                    "type": "object"
                  },
                  "attributes": {
                    "description": "List of route attributes",
                    "example": [
                      "avgspeed",
                      "percentage"
                    ],
                    "items": {
                      "description": "List of route attributes",
                      "enum": [
                        "avgspeed",
                        "detourfactor",
                        "percentage"
                      ],
                      "example": "[\"avgspeed\",\"percentage\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "bearings": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "example": [
                      [
                        30,
                        20
                      ],
                      [],
                      [
                        40,
                        20
                      ]
                    ],
                    "items": {
                      "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                      "example": [
                        [
                          30,
                          20
                        ],
                        [],
                        [
                          40,
                          20
                        ]
                      ],
                      "items": {
                        "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      },
                      "type": "array",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "cycling-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "continue_straight": {
                    "default": false,
                    "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                    "type": "boolean"
                  },
                  "coordinates": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ],
                      [
                        8.687872,
                        49.420318
                      ]
                    ],
                    "items": {
                      "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ],
                        [
                          8.687872,
                          49.420318
                        ]
                      ],
                      "items": {
                        "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "elevation": {
                    "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                    "example": false,
                    "type": "boolean"
                  },
                  "extra_info": {
                    "description": "The extra info items to include in the response",
                    "example": [
                      "waytype",
                      "surface"
                    ],
                    "items": {
                      "description": "Specify which extra info items to include in the response",
                      "enum": [
                        "steepness",
                        "suitability",
                        "surface",
                        "waycategory",
                        "waytype",
                        "tollways",
                        "traildifficulty",
                        "osmid",
                        "roadaccessrestrictions",
                        "countryinfo",
                        "green",
                        "noise",
                        "csv",
                        "shadow"
                      ],
                      "example": "[\"waytype\",\"surface\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "geometry": {
                    "default": true,
                    "description": "Specifies whether to return geometry. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "format",
                      "value": [
                        "json"
                      ]
                    }
                  },
                  "geometry_simplify": {
                    "default": false,
                    "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "ignore_transfers": {
                    "default": false,
                    "description": "Specifies if transfers as criterion should be ignored.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "instructions": {
                    "default": true,
                    "description": "Specifies whether to return instructions.",
                    "type": "boolean"
                  },
                  "instructions_format": {
                    "default": "text",
                    "description": "Select html for more verbose instructions.",
                    "enum": [
                      "html",
                      "text"
                    ],
                    "type": "string"
                  },
                  "language": {
                    "default": "en",
                    "description": "Language for the route instructions.",
                    "enum": [
                      "cs",
                      "cs-cz",
                      "de",
                      "de-de",
                      "en",
                      "en-us",
                      "eo",
                      "eo-eo",
                      "es",
                      "es-es",
                      "fr",
                      "fr-fr",
                      "gr",
                      "gr-gr",
                      "he",
                      "he-il",
                      "hu",
                      "hu-hu",
                      "id",
                      "id-id",
                      "it",
                      "it-it",
                      "ja",
                      "ja-jp",
                      "ne",
                      "ne-np",
                      "nl",
                      "nl-nl",
                      "nb",
                      "nb-no",
                      "pl",
                      "pl-pl",
                      "pt",
                      "pt-pt",
                      "ro",
                      "ro-ro",
                      "ru",
                      "ru-ru",
                      "tr",
                      "tr-tr",
                      "zh",
                      "zh-cn"
                    ],
                    "type": "string"
                  },
                  "maneuvers": {
                    "default": false,
                    "description": "Specifies whether the maneuver object is included into the step object or not. ",
                    "type": "boolean"
                  },
                  "maximum_speed": {
                    "description": "The maximum speed specified by user.",
                    "example": 90,
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "preference": {
                    "default": "recommended",
                    "description": "Specifies the route preference",
                    "enum": [
                      "fastest",
                      "shortest",
                      "recommended"
                    ],
                    "type": "string"
                  },
                  "radiuses": {
                    "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                    "example": [
                      200,
                      -1,
                      30
                    ],
                    "items": {
                      "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "roundabout_exits": {
                    "default": false,
                    "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                    "type": "boolean"
                  },
                  "schedule": {
                    "default": false,
                    "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "schedule_duration": {
                    "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "schedule_rows": {
                    "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                    "example": 3,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "skip_segments": {
                    "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                    "example": [
                      2,
                      4
                    ],
                    "items": {
                      "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "suppress_warnings": {
                    "description": "Suppress warning messages in the response",
                    "example": false,
                    "type": "boolean"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string"
                  },
                  "walking_time": {
                    "default": "PT15M",
                    "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  }
                },
                "required": [
                  "coordinates"
                ],
                "title": "Directions Service",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "description": "Bounding box that covers all returned routes",
                      "example": [
                        49.414057,
                        8.680894,
                        49.420514,
                        8.690123
                      ],
                      "items": {
                        "description": "Bounding box that covers all returned routes",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the request (as passed in by the query)",
                          "example": "request123",
                          "type": "string"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                          "properties": {
                            "alternative_routes": {
                              "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                              "example": {
                                "target_count": 2,
                                "weight_factor": 1.6
                              },
                              "properties": {
                                "share_factor": {
                                  "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                                  "example": 0.6,
                                  "format": "double",
                                  "type": "number"
                                },
                                "target_count": {
                                  "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                                  "example": 2,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "weight_factor": {
                                  "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                                  "example": 1.4,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "title": "Alternative Routes",
                              "type": "object"
                            },
                            "attributes": {
                              "description": "List of route attributes",
                              "example": [
                                "avgspeed",
                                "percentage"
                              ],
                              "items": {
                                "description": "List of route attributes",
                                "enum": [
                                  "avgspeed",
                                  "detourfactor",
                                  "percentage"
                                ],
                                "example": "[\"avgspeed\",\"percentage\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "bearings": {
                              "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                              "example": [
                                [
                                  30,
                                  20
                                ],
                                [],
                                [
                                  40,
                                  20
                                ]
                              ],
                              "items": {
                                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                "example": [
                                  [
                                    30,
                                    20
                                  ],
                                  [],
                                  [
                                    40,
                                    20
                                  ]
                                ],
                                "items": {
                                  "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "cycling-*"
                                  }
                                },
                                "type": "array",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              },
                              "type": "array",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "cycling-*"
                              }
                            },
                            "continue_straight": {
                              "default": false,
                              "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                              "type": "boolean"
                            },
                            "coordinates": {
                              "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ],
                                [
                                  8.687872,
                                  49.420318
                                ]
                              ],
                              "items": {
                                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ],
                                  [
                                    8.687872,
                                    49.420318
                                  ]
                                ],
                                "items": {
                                  "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "elevation": {
                              "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                              "example": false,
                              "type": "boolean"
                            },
                            "extra_info": {
                              "description": "The extra info items to include in the response",
                              "example": [
                                "waytype",
                                "surface"
                              ],
                              "items": {
                                "description": "Specify which extra info items to include in the response",
                                "enum": [
                                  "steepness",
                                  "suitability",
                                  "surface",
                                  "waycategory",
                                  "waytype",
                                  "tollways",
                                  "traildifficulty",
                                  "osmid",
                                  "roadaccessrestrictions",
                                  "countryinfo",
                                  "green",
                                  "noise",
                                  "csv",
                                  "shadow"
                                ],
                                "example": "[\"waytype\",\"surface\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "geometry": {
                              "default": true,
                              "description": "Specifies whether to return geometry. ",
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "format",
                                "value": [
                                  "json"
                                ]
                              }
                            },
                            "geometry_simplify": {
                              "default": false,
                              "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                              "type": "boolean"
                            },
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "ignore_transfers": {
                              "default": false,
                              "description": "Specifies if transfers as criterion should be ignored.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "instructions": {
                              "default": true,
                              "description": "Specifies whether to return instructions.",
                              "type": "boolean"
                            },
                            "instructions_format": {
                              "default": "text",
                              "description": "Select html for more verbose instructions.",
                              "enum": [
                                "html",
                                "text"
                              ],
                              "type": "string"
                            },
                            "language": {
                              "default": "en",
                              "description": "Language for the route instructions.",
                              "enum": [
                                "cs",
                                "cs-cz",
                                "de",
                                "de-de",
                                "en",
                                "en-us",
                                "eo",
                                "eo-eo",
                                "es",
                                "es-es",
                                "fr",
                                "fr-fr",
                                "gr",
                                "gr-gr",
                                "he",
                                "he-il",
                                "hu",
                                "hu-hu",
                                "id",
                                "id-id",
                                "it",
                                "it-it",
                                "ja",
                                "ja-jp",
                                "ne",
                                "ne-np",
                                "nl",
                                "nl-nl",
                                "nb",
                                "nb-no",
                                "pl",
                                "pl-pl",
                                "pt",
                                "pt-pt",
                                "ro",
                                "ro-ro",
                                "ru",
                                "ru-ru",
                                "tr",
                                "tr-tr",
                                "zh",
                                "zh-cn"
                              ],
                              "type": "string"
                            },
                            "maneuvers": {
                              "default": false,
                              "description": "Specifies whether the maneuver object is included into the step object or not. ",
                              "type": "boolean"
                            },
                            "maximum_speed": {
                              "description": "The maximum speed specified by user.",
                              "example": 90,
                              "format": "double",
                              "type": "number",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "driving-*"
                              }
                            },
                            "options": {
                              "description": "Advanced options for routing",
                              "example": {
                                "avoid_borders": "controlled"
                              },
                              "properties": {
                                "avoid_borders": {
                                  "description": "Specify which type of border crossing to avoid",
                                  "enum": [
                                    "all",
                                    "controlled",
                                    "none"
                                  ],
                                  "example": "controlled",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_countries": {
                                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                  "example": [
                                    11,
                                    193
                                  ],
                                  "items": {
                                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                    "example": "[11,193]",
                                    "type": "string",
                                    "x-validWhen": {
                                      "ref": "profile",
                                      "value": "driving-*"
                                    }
                                  },
                                  "type": "array",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_features": {
                                  "description": "List of features to avoid. ",
                                  "example": [
                                    "highways"
                                  ],
                                  "items": {
                                    "description": "Definition of the features to be avoided.",
                                    "enum": [
                                      "highways",
                                      "tollways",
                                      "ferries",
                                      "fords",
                                      "steps"
                                    ],
                                    "example": "[\"highways\"]",
                                    "type": "string",
                                    "x-itemRestrictions": {
                                      "itemsWhen": {
                                        "cycling-*": [
                                          "ferries",
                                          "steps",
                                          "fords"
                                        ],
                                        "driving-*": [
                                          "highways",
                                          "tollways",
                                          "ferries"
                                        ],
                                        "foot-*": [
                                          "ferries",
                                          "fords",
                                          "steps"
                                        ],
                                        "wheelchair": [
                                          "ferries",
                                          "steps"
                                        ]
                                      },
                                      "ref": "profile"
                                    }
                                  },
                                  "type": "array",
                                  "x-itemRestrictions": {
                                    "itemsWhen": {
                                      "cycling-*": [
                                        "ferries",
                                        "steps",
                                        "fords"
                                      ],
                                      "driving-*": [
                                        "highways",
                                        "tollways",
                                        "ferries"
                                      ],
                                      "foot-*": [
                                        "ferries",
                                        "fords",
                                        "steps"
                                      ],
                                      "wheelchair": [
                                        "ferries",
                                        "steps"
                                      ]
                                    },
                                    "ref": "profile"
                                  }
                                },
                                "avoid_polygons": {
                                  "additionalProperties": {
                                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                    "type": "object"
                                  },
                                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                  "properties": {
                                    "empty": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "profile_params": {
                                  "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                                  "properties": {
                                    "allow_unsuitable": {
                                      "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "restrictions": {
                                      "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                                      "properties": {
                                        "axleload": {
                                          "description": "Axleload restriction in tons.",
                                          "example": 50,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "hazmat": {
                                          "default": false,
                                          "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                          "type": "boolean",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "height": {
                                          "description": "Height restriction in metres. ",
                                          "example": 4.2,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "length": {
                                          "description": "Length restriction in metres.",
                                          "example": 8.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "maximum_incline": {
                                          "default": 6,
                                          "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "maximum_sloped_kerb": {
                                          "default": 0.6,
                                          "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "minimum_width": {
                                          "description": "Specifies the minimum width of the footway in metres.",
                                          "example": 2.5,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "smoothness_type": {
                                          "default": "good",
                                          "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                          "enum": [
                                            "excellent",
                                            "good",
                                            "intermediate",
                                            "bad",
                                            "very_bad",
                                            "horrible",
                                            "very_horrible",
                                            "impassable"
                                          ],
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "surface_type": {
                                          "default": "sett",
                                          "description": "Specifies the minimum surface type. Default is `sett`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "track_type": {
                                          "default": "grade1",
                                          "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "weight": {
                                          "description": "Weight restriction in tons. ",
                                          "example": 40,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "width": {
                                          "description": "Width restriction in metres.",
                                          "example": 5.6,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "surface_quality_known": {
                                      "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "weightings": {
                                      "description": "Describe additional weightings to be applied to edges on the routing.",
                                      "properties": {
                                        "green": {
                                          "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "quiet": {
                                          "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                          "example": 0.8,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "shadow": {
                                          "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "steepness_difficulty": {
                                          "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                          "example": 2,
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "cycling-*"
                                          }
                                        }
                                      },
                                      "title": "Profile Weightings",
                                      "type": "object"
                                    }
                                  },
                                  "title": "Profile Parameters",
                                  "type": "object",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "valueNot": "driving-car"
                                  }
                                },
                                "round_trip": {
                                  "description": "Specifies the parameters for generating round trip routes.",
                                  "example": {
                                    "length": 10000,
                                    "points": 5
                                  },
                                  "properties": {
                                    "length": {
                                      "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                                      "example": 10000,
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "points": {
                                      "description": "The number of points to use on the route. Larger values create more circular routes.",
                                      "example": 5,
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "seed": {
                                      "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                                      "example": 1,
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "title": "Round Trip Route Options",
                                  "type": "object"
                                },
                                "vehicle_type": {
                                  "default": "hgv",
                                  "description": "Definition of the vehicle type.",
                                  "enum": [
                                    "hgv",
                                    "bus",
                                    "agricultural",
                                    "delivery",
                                    "forestry",
                                    "goods",
                                    "unknown"
                                  ],
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-hgv"
                                  }
                                }
                              },
                              "title": "Route Options",
                              "type": "object"
                            },
                            "preference": {
                              "default": "recommended",
                              "description": "Specifies the route preference",
                              "enum": [
                                "fastest",
                                "shortest",
                                "recommended"
                              ],
                              "type": "string"
                            },
                            "radiuses": {
                              "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                              "example": [
                                200,
                                -1,
                                30
                              ],
                              "items": {
                                "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                                "format": "double",
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "roundabout_exits": {
                              "default": false,
                              "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                              "type": "boolean"
                            },
                            "schedule": {
                              "default": false,
                              "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "schedule_duration": {
                              "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "schedule_rows": {
                              "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                              "example": 3,
                              "format": "int32",
                              "type": "integer",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "skip_segments": {
                              "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                              "example": [
                                2,
                                4
                              ],
                              "items": {
                                "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "suppress_warnings": {
                              "description": "Suppress warning messages in the response",
                              "example": false,
                              "type": "boolean"
                            },
                            "units": {
                              "default": "m",
                              "description": "Specifies the distance unit.",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string"
                            },
                            "walking_time": {
                              "default": "PT15M",
                              "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            }
                          },
                          "required": [
                            "coordinates"
                          ],
                          "title": "Directions Service",
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "routing",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "routes": {
                      "description": "A list of routes returned from the request",
                      "items": {
                        "description": "An individual JSON based route created by the service",
                        "properties": {
                          "arrival": {
                            "description": "Arrival date and time",
                            "example": "2020-01-31T13:15:00+01:00",
                            "format": "date-time",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "arrival",
                              "value": true
                            }
                          },
                          "bbox": {
                            "description": "A bounding box which contains the entire route",
                            "example": [
                              49.414057,
                              8.680894,
                              49.420514,
                              8.690123
                            ],
                            "items": {
                              "description": "A bounding box which contains the entire route",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "departure": {
                            "description": "Departure date and time",
                            "example": "2020-01-31T12:45:00+01:00",
                            "format": "date-time",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "departure",
                              "value": true
                            }
                          },
                          "extras": {
                            "additionalProperties": {
                              "description": "An object representing one of the extra info items requested",
                              "properties": {
                                "summary": {
                                  "description": "List representing the summary of the extra info items.",
                                  "items": {
                                    "description": "List representing the summary of the extra info items.",
                                    "properties": {
                                      "amount": {
                                        "description": "Category percentage of the entire route.",
                                        "example": 23.8,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "distance": {
                                        "description": "Cumulative distance of this value.",
                                        "example": 123.1,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "value": {
                                        "description": "[Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.",
                                        "example": 5,
                                        "format": "double",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "values": {
                                  "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                                  "example": [
                                    [
                                      0,
                                      3,
                                      26
                                    ],
                                    [
                                      3,
                                      10,
                                      12
                                    ]
                                  ],
                                  "items": {
                                    "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                                    "example": [
                                      [
                                        0,
                                        3,
                                        26
                                      ],
                                      [
                                        3,
                                        10,
                                        12
                                      ]
                                    ],
                                    "items": {
                                      "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "description": "List of extra info objects representing the extra info items that were requested for the route.",
                            "type": "object"
                          },
                          "geometry": {
                            "description": "The geometry of the route. For JSON route responses this is an encoded polyline.",
                            "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                            "type": "string"
                          },
                          "legs": {
                            "description": "List containing the legs the route consists of.",
                            "items": {
                              "description": "Leg of a route",
                              "properties": {
                                "arrival": {
                                  "description": "Arrival date and time",
                                  "example": "2020-01-31T13:15:00+01:00",
                                  "format": "date-time",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "arrival",
                                    "value": true
                                  }
                                },
                                "departure": {
                                  "description": "Departure date and time",
                                  "example": "2020-01-31T12:45:00+01:00",
                                  "format": "date-time",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "departure",
                                    "value": true
                                  }
                                },
                                "departure_location": {
                                  "description": "The departure location of the leg.",
                                  "example": "Dossenheim, Süd Bstg G1",
                                  "type": "string"
                                },
                                "distance": {
                                  "description": "The distance for the leg in metres.",
                                  "example": 245,
                                  "format": "double",
                                  "type": "number"
                                },
                                "duration": {
                                  "description": "The duration for the leg in seconds.",
                                  "example": 96.2,
                                  "format": "double",
                                  "type": "number"
                                },
                                "feed_id": {
                                  "description": "The feed ID this public transport leg based its information from.",
                                  "example": "gtfs_0",
                                  "type": "string"
                                },
                                "geometry": {
                                  "description": "The geometry of the leg. This is an encoded polyline.",
                                  "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                                  "type": "string"
                                },
                                "instructions": {
                                  "description": "List containing the specific steps the segment consists of.",
                                  "items": {
                                    "description": "Step of a route segment",
                                    "properties": {
                                      "distance": {
                                        "description": "The distance for the step in metres.",
                                        "example": 245,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "duration": {
                                        "description": "The duration for the step in seconds.",
                                        "example": 96.2,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "exit_bearings": {
                                        "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                        "example": [
                                          10,
                                          45,
                                          60
                                        ],
                                        "items": {
                                          "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "roundabout_exits",
                                            "value": true
                                          }
                                        },
                                        "type": "array",
                                        "x-validWhen": {
                                          "ref": "roundabout_exits",
                                          "value": true
                                        }
                                      },
                                      "exit_number": {
                                        "description": "Only for roundabouts. Contains the number of the exit to take.",
                                        "example": 2,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "instruction": {
                                        "description": "The routing instruction text for the step.",
                                        "example": "Turn right onto Berliner Straße",
                                        "type": "string"
                                      },
                                      "maneuver": {
                                        "description": "Maneuver object of the step",
                                        "properties": {
                                          "bearing_after": {
                                            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                                            "example": 96,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "bearing_before": {
                                            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                                            "example": 24,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "location": {
                                            "description": "The coordinate of the point where a maneuver takes place.",
                                            "example": [
                                              8.678962,
                                              49.407819
                                            ],
                                            "items": {
                                              "description": "The coordinate of the point where a maneuver takes place.",
                                              "format": "double",
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "x-validWhen": {
                                          "ref": "maneuvers",
                                          "value": true
                                        }
                                      },
                                      "name": {
                                        "description": "The name of the next street.",
                                        "example": "Berliner Straße",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                                        "example": 1,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "way_points": {
                                        "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                        "example": [
                                          45,
                                          48
                                        ],
                                        "items": {
                                          "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "is_in_same_vehicle_as_previous": {
                                  "description": "Whether the legs continues in the same vehicle as the previous one.",
                                  "example": false,
                                  "type": "boolean"
                                },
                                "route_desc": {
                                  "description": "The route description of the leg (if provided in the GTFS data set).",
                                  "example": "Bus",
                                  "type": "string"
                                },
                                "route_id": {
                                  "description": "The route ID of this public transport leg.",
                                  "example": "vrn-19-39A-1",
                                  "type": "string"
                                },
                                "route_long_name": {
                                  "description": "The public transport route name of the leg.",
                                  "example": "RNV Bus 39A",
                                  "type": "string"
                                },
                                "route_short_name": {
                                  "description": "The public transport route name (short version) of the leg.",
                                  "example": "39A",
                                  "type": "string"
                                },
                                "route_type": {
                                  "description": "The route type of the leg (if provided in the GTFS data set).",
                                  "example": 1,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "stops": {
                                  "description": "List containing the stops the along the leg.",
                                  "items": {
                                    "description": "Stop of a public transport leg",
                                    "properties": {
                                      "arrival_cancelled": {
                                        "description": "Whether arrival at the stop was cancelled.",
                                        "example": false,
                                        "type": "boolean"
                                      },
                                      "arrival_time": {
                                        "description": "Arrival time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "departure_cancelled": {
                                        "description": "Whether departure at the stop was cancelled.",
                                        "example": false,
                                        "type": "boolean"
                                      },
                                      "departure_time": {
                                        "description": "Departure time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "location": {
                                        "description": "The location of the stop.",
                                        "example": [
                                          8.6912542,
                                          49.399979
                                        ],
                                        "items": {
                                          "description": "The location of the stop.",
                                          "format": "double",
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      "name": {
                                        "description": "The name of the stop.",
                                        "example": "Heidelberg, Alois-Link-Platz",
                                        "type": "string"
                                      },
                                      "planned_arrival_time": {
                                        "description": "Planned arrival time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "planned_departure_time": {
                                        "description": "Planned departure time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "predicted_arrival_time": {
                                        "description": "Predicted arrival time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "predicted_departure_time": {
                                        "description": "Predicted departure time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "stop_id": {
                                        "description": "The ID of the stop.",
                                        "example": "de:08221:1138:0:O",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "trip_headsign": {
                                  "description": "The headsign of the public transport vehicle of the leg.",
                                  "example": "Bismarckplatz - Speyererhof - EMBL - Boxberg - Mombertplatz",
                                  "type": "string"
                                },
                                "trip_id": {
                                  "description": "The trip ID of this public transport leg.",
                                  "example": "trip_id: vrn-19-39A-1-2-21-H-8-Special-50-42",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of the leg, possible values are currently 'walk' and 'pt'.",
                                  "example": "pt",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "segments": {
                            "description": "List containing the segments and its corresponding steps which make up the route.",
                            "items": {
                              "description": "List containing the segments and its correspoding steps which make up the route.",
                              "properties": {
                                "ascent": {
                                  "description": " Contains ascent of this segment in metres.",
                                  "example": 56.3,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "elevation",
                                    "value": true
                                  }
                                },
                                "avgspeed": {
                                  "description": "Contains the average speed of this segment in km/h.",
                                  "example": 56.3,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "attributes",
                                    "valueContains": "avgspeed"
                                  }
                                },
                                "descent": {
                                  "description": "Contains descent of this segment in metres.",
                                  "example": 45.2,
                                  "format": "double",
                                  "type": "number"
                                },
                                "detourfactor": {
                                  "description": "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.",
                                  "example": 0.5,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "attributes",
                                    "valueContains": "detourfactor"
                                  }
                                },
                                "distance": {
                                  "description": "Contains the distance of the segment in specified units.",
                                  "example": 253,
                                  "format": "double",
                                  "type": "number"
                                },
                                "duration": {
                                  "description": "Contains the duration of the segment in seconds.",
                                  "example": 37.7,
                                  "format": "double",
                                  "type": "number"
                                },
                                "percentage": {
                                  "description": "Contains the proportion of the route in percent.",
                                  "example": 43.2,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "attributes",
                                    "valueContains": "percentage"
                                  }
                                },
                                "steps": {
                                  "description": "List containing the specific steps the segment consists of.",
                                  "items": {
                                    "description": "Step of a route segment",
                                    "properties": {
                                      "distance": {
                                        "description": "The distance for the step in metres.",
                                        "example": 245,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "duration": {
                                        "description": "The duration for the step in seconds.",
                                        "example": 96.2,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "exit_bearings": {
                                        "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                        "example": [
                                          10,
                                          45,
                                          60
                                        ],
                                        "items": {
                                          "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "roundabout_exits",
                                            "value": true
                                          }
                                        },
                                        "type": "array",
                                        "x-validWhen": {
                                          "ref": "roundabout_exits",
                                          "value": true
                                        }
                                      },
                                      "exit_number": {
                                        "description": "Only for roundabouts. Contains the number of the exit to take.",
                                        "example": 2,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "instruction": {
                                        "description": "The routing instruction text for the step.",
                                        "example": "Turn right onto Berliner Straße",
                                        "type": "string"
                                      },
                                      "maneuver": {
                                        "description": "Maneuver object of the step",
                                        "properties": {
                                          "bearing_after": {
                                            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                                            "example": 96,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "bearing_before": {
                                            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                                            "example": 24,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "location": {
                                            "description": "The coordinate of the point where a maneuver takes place.",
                                            "example": [
                                              8.678962,
                                              49.407819
                                            ],
                                            "items": {
                                              "description": "The coordinate of the point where a maneuver takes place.",
                                              "format": "double",
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "x-validWhen": {
                                          "ref": "maneuvers",
                                          "value": true
                                        }
                                      },
                                      "name": {
                                        "description": "The name of the next street.",
                                        "example": "Berliner Straße",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                                        "example": 1,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "way_points": {
                                        "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                        "example": [
                                          45,
                                          48
                                        ],
                                        "items": {
                                          "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "summary": {
                            "description": "Contains total sums of duration, route distance and actual distance of the route.",
                            "properties": {
                              "ascent": {
                                "description": "Total ascent in meters.",
                                "example": 166.3,
                                "format": "double",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "elevation",
                                  "value": true
                                }
                              },
                              "descent": {
                                "description": "Total descent in meters.",
                                "example": 201.3,
                                "format": "double",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "elevation",
                                  "value": true
                                }
                              },
                              "distance": {
                                "description": "Total route distance in specified units.",
                                "example": 12.6,
                                "format": "double",
                                "type": "number"
                              },
                              "duration": {
                                "description": "Total duration in seconds.",
                                "example": 604,
                                "format": "double",
                                "type": "number"
                              },
                              "fare": {
                                "format": "int32",
                                "type": "integer"
                              },
                              "transfers": {
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "warnings": {
                            "description": "List of warnings that have been generated for the route",
                            "items": {
                              "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
                              "properties": {
                                "code": {
                                  "description": "Identification code for the warning",
                                  "example": 1,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "message": {
                                  "description": "The message associated with the warning",
                                  "example": "This route may go over restricted roads",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "way_points": {
                            "description": "List containing the indices of way points corresponding to the *geometry*.",
                            "example": [
                              0,
                              23
                            ],
                            "items": {
                              "description": "List containing the indices of way points corresponding to the *geometry*.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns JSON. The decoded values of the extra information can be found [here](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html)."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Directions Service",
        "tags": [
          "Directions Service"
        ]
      }
    },
    "/v2/directions/{profile}/geojson": {
      "post": {
        "description": "Returns a route between two or more locations for a selected profile and its settings as GeoJSON",
        "operationId": "getGeoJsonRoute",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                "properties": {
                  "alternative_routes": {
                    "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                    "example": {
                      "target_count": 2,
                      "weight_factor": 1.6
                    },
                    "properties": {
                      "share_factor": {
                        "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                        "example": 0.6,
                        "format": "double",
                        "type": "number"
                      },
                      "target_count": {
                        "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "weight_factor": {
                        "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                        "example": 1.4,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "title": "Alternative Routes",
                    "type": "object"
                  },
                  "attributes": {
                    "description": "List of route attributes",
                    "example": [
                      "avgspeed",
                      "percentage"
                    ],
                    "items": {
                      "description": "List of route attributes",
                      "enum": [
                        "avgspeed",
                        "detourfactor",
                        "percentage"
                      ],
                      "example": "[\"avgspeed\",\"percentage\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "bearings": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "example": [
                      [
                        30,
                        20
                      ],
                      [],
                      [
                        40,
                        20
                      ]
                    ],
                    "items": {
                      "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                      "example": [
                        [
                          30,
                          20
                        ],
                        [],
                        [
                          40,
                          20
                        ]
                      ],
                      "items": {
                        "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      },
                      "type": "array",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "cycling-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "continue_straight": {
                    "default": false,
                    "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                    "type": "boolean"
                  },
                  "coordinates": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ],
                      [
                        8.687872,
                        49.420318
                      ]
                    ],
                    "items": {
                      "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ],
                        [
                          8.687872,
                          49.420318
                        ]
                      ],
                      "items": {
                        "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "elevation": {
                    "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                    "example": false,
                    "type": "boolean"
                  },
                  "extra_info": {
                    "description": "The extra info items to include in the response",
                    "example": [
                      "waytype",
                      "surface"
                    ],
                    "items": {
                      "description": "Specify which extra info items to include in the response",
                      "enum": [
                        "steepness",
                        "suitability",
                        "surface",
                        "waycategory",
                        "waytype",
                        "tollways",
                        "traildifficulty",
                        "osmid",
                        "roadaccessrestrictions",
                        "countryinfo",
                        "green",
                        "noise",
                        "csv",
                        "shadow"
                      ],
                      "example": "[\"waytype\",\"surface\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "geometry": {
                    "default": true,
                    "description": "Specifies whether to return geometry. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "format",
                      "value": [
                        "json"
                      ]
                    }
                  },
                  "geometry_simplify": {
                    "default": false,
                    "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "ignore_transfers": {
                    "default": false,
                    "description": "Specifies if transfers as criterion should be ignored.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "instructions": {
                    "default": true,
                    "description": "Specifies whether to return instructions.",
                    "type": "boolean"
                  },
                  "instructions_format": {
                    "default": "text",
                    "description": "Select html for more verbose instructions.",
                    "enum": [
                      "html",
                      "text"
                    ],
                    "type": "string"
                  },
                  "language": {
                    "default": "en",
                    "description": "Language for the route instructions.",
                    "enum": [
                      "cs",
                      "cs-cz",
                      "de",
                      "de-de",
                      "en",
                      "en-us",
                      "eo",
                      "eo-eo",
                      "es",
                      "es-es",
                      "fr",
                      "fr-fr",
                      "gr",
                      "gr-gr",
                      "he",
                      "he-il",
                      "hu",
                      "hu-hu",
                      "id",
                      "id-id",
                      "it",
                      "it-it",
                      "ja",
                      "ja-jp",
                      "ne",
                      "ne-np",
                      "nl",
                      "nl-nl",
                      "nb",
                      "nb-no",
                      "pl",
                      "pl-pl",
                      "pt",
                      "pt-pt",
                      "ro",
                      "ro-ro",
                      "ru",
                      "ru-ru",
                      "tr",
                      "tr-tr",
                      "zh",
                      "zh-cn"
                    ],
                    "type": "string"
                  },
                  "maneuvers": {
                    "default": false,
                    "description": "Specifies whether the maneuver object is included into the step object or not. ",
                    "type": "boolean"
                  },
                  "maximum_speed": {
                    "description": "The maximum speed specified by user.",
                    "example": 90,
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "preference": {
                    "default": "recommended",
                    "description": "Specifies the route preference",
                    "enum": [
                      "fastest",
                      "shortest",
                      "recommended"
                    ],
                    "type": "string"
                  },
                  "radiuses": {
                    "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                    "example": [
                      200,
                      -1,
                      30
                    ],
                    "items": {
                      "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "roundabout_exits": {
                    "default": false,
                    "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                    "type": "boolean"
                  },
                  "schedule": {
                    "default": false,
                    "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "schedule_duration": {
                    "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "schedule_rows": {
                    "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                    "example": 3,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "skip_segments": {
                    "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                    "example": [
                      2,
                      4
                    ],
                    "items": {
                      "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "suppress_warnings": {
                    "description": "Suppress warning messages in the response",
                    "example": false,
                    "type": "boolean"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string"
                  },
                  "walking_time": {
                    "default": "PT15M",
                    "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  }
                },
                "required": [
                  "coordinates"
                ],
                "title": "Directions Service",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "description": "Bounding box that covers all returned routes",
                      "example": [
                        49.414057,
                        8.680894,
                        49.420514,
                        8.690123
                      ],
                      "items": {
                        "description": "Bounding box that covers all returned routes",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the request (as passed in by the query)",
                          "example": "request123",
                          "type": "string"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                          "properties": {
                            "alternative_routes": {
                              "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                              "example": {
                                "target_count": 2,
                                "weight_factor": 1.6
                              },
                              "properties": {
                                "share_factor": {
                                  "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                                  "example": 0.6,
                                  "format": "double",
                                  "type": "number"
                                },
                                "target_count": {
                                  "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                                  "example": 2,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "weight_factor": {
                                  "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                                  "example": 1.4,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "title": "Alternative Routes",
                              "type": "object"
                            },
                            "attributes": {
                              "description": "List of route attributes",
                              "example": [
                                "avgspeed",
                                "percentage"
                              ],
                              "items": {
                                "description": "List of route attributes",
                                "enum": [
                                  "avgspeed",
                                  "detourfactor",
                                  "percentage"
                                ],
                                "example": "[\"avgspeed\",\"percentage\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "bearings": {
                              "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                              "example": [
                                [
                                  30,
                                  20
                                ],
                                [],
                                [
                                  40,
                                  20
                                ]
                              ],
                              "items": {
                                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                "example": [
                                  [
                                    30,
                                    20
                                  ],
                                  [],
                                  [
                                    40,
                                    20
                                  ]
                                ],
                                "items": {
                                  "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "cycling-*"
                                  }
                                },
                                "type": "array",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              },
                              "type": "array",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "cycling-*"
                              }
                            },
                            "continue_straight": {
                              "default": false,
                              "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                              "type": "boolean"
                            },
                            "coordinates": {
                              "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ],
                                [
                                  8.687872,
                                  49.420318
                                ]
                              ],
                              "items": {
                                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ],
                                  [
                                    8.687872,
                                    49.420318
                                  ]
                                ],
                                "items": {
                                  "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "elevation": {
                              "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                              "example": false,
                              "type": "boolean"
                            },
                            "extra_info": {
                              "description": "The extra info items to include in the response",
                              "example": [
                                "waytype",
                                "surface"
                              ],
                              "items": {
                                "description": "Specify which extra info items to include in the response",
                                "enum": [
                                  "steepness",
                                  "suitability",
                                  "surface",
                                  "waycategory",
                                  "waytype",
                                  "tollways",
                                  "traildifficulty",
                                  "osmid",
                                  "roadaccessrestrictions",
                                  "countryinfo",
                                  "green",
                                  "noise",
                                  "csv",
                                  "shadow"
                                ],
                                "example": "[\"waytype\",\"surface\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "geometry": {
                              "default": true,
                              "description": "Specifies whether to return geometry. ",
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "format",
                                "value": [
                                  "json"
                                ]
                              }
                            },
                            "geometry_simplify": {
                              "default": false,
                              "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                              "type": "boolean"
                            },
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "ignore_transfers": {
                              "default": false,
                              "description": "Specifies if transfers as criterion should be ignored.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "instructions": {
                              "default": true,
                              "description": "Specifies whether to return instructions.",
                              "type": "boolean"
                            },
                            "instructions_format": {
                              "default": "text",
                              "description": "Select html for more verbose instructions.",
                              "enum": [
                                "html",
                                "text"
                              ],
                              "type": "string"
                            },
                            "language": {
                              "default": "en",
                              "description": "Language for the route instructions.",
                              "enum": [
                                "cs",
                                "cs-cz",
                                "de",
                                "de-de",
                                "en",
                                "en-us",
                                "eo",
                                "eo-eo",
                                "es",
                                "es-es",
                                "fr",
                                "fr-fr",
                                "gr",
                                "gr-gr",
                                "he",
                                "he-il",
                                "hu",
                                "hu-hu",
                                "id",
                                "id-id",
                                "it",
                                "it-it",
                                "ja",
                                "ja-jp",
                                "ne",
                                "ne-np",
                                "nl",
                                "nl-nl",
                                "nb",
                                "nb-no",
                                "pl",
                                "pl-pl",
                                "pt",
                                "pt-pt",
                                "ro",
                                "ro-ro",
                                "ru",
                                "ru-ru",
                                "tr",
                                "tr-tr",
                                "zh",
                                "zh-cn"
                              ],
                              "type": "string"
                            },
                            "maneuvers": {
                              "default": false,
                              "description": "Specifies whether the maneuver object is included into the step object or not. ",
                              "type": "boolean"
                            },
                            "maximum_speed": {
                              "description": "The maximum speed specified by user.",
                              "example": 90,
                              "format": "double",
                              "type": "number",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "driving-*"
                              }
                            },
                            "options": {
                              "description": "Advanced options for routing",
                              "example": {
                                "avoid_borders": "controlled"
                              },
                              "properties": {
                                "avoid_borders": {
                                  "description": "Specify which type of border crossing to avoid",
                                  "enum": [
                                    "all",
                                    "controlled",
                                    "none"
                                  ],
                                  "example": "controlled",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_countries": {
                                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                  "example": [
                                    11,
                                    193
                                  ],
                                  "items": {
                                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                    "example": "[11,193]",
                                    "type": "string",
                                    "x-validWhen": {
                                      "ref": "profile",
                                      "value": "driving-*"
                                    }
                                  },
                                  "type": "array",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_features": {
                                  "description": "List of features to avoid. ",
                                  "example": [
                                    "highways"
                                  ],
                                  "items": {
                                    "description": "Definition of the features to be avoided.",
                                    "enum": [
                                      "highways",
                                      "tollways",
                                      "ferries",
                                      "fords",
                                      "steps"
                                    ],
                                    "example": "[\"highways\"]",
                                    "type": "string",
                                    "x-itemRestrictions": {
                                      "itemsWhen": {
                                        "cycling-*": [
                                          "ferries",
                                          "steps",
                                          "fords"
                                        ],
                                        "driving-*": [
                                          "highways",
                                          "tollways",
                                          "ferries"
                                        ],
                                        "foot-*": [
                                          "ferries",
                                          "fords",
                                          "steps"
                                        ],
                                        "wheelchair": [
                                          "ferries",
                                          "steps"
                                        ]
                                      },
                                      "ref": "profile"
                                    }
                                  },
                                  "type": "array",
                                  "x-itemRestrictions": {
                                    "itemsWhen": {
                                      "cycling-*": [
                                        "ferries",
                                        "steps",
                                        "fords"
                                      ],
                                      "driving-*": [
                                        "highways",
                                        "tollways",
                                        "ferries"
                                      ],
                                      "foot-*": [
                                        "ferries",
                                        "fords",
                                        "steps"
                                      ],
                                      "wheelchair": [
                                        "ferries",
                                        "steps"
                                      ]
                                    },
                                    "ref": "profile"
                                  }
                                },
                                "avoid_polygons": {
                                  "additionalProperties": {
                                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                    "type": "object"
                                  },
                                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                  "properties": {
                                    "empty": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "profile_params": {
                                  "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                                  "properties": {
                                    "allow_unsuitable": {
                                      "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "restrictions": {
                                      "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                                      "properties": {
                                        "axleload": {
                                          "description": "Axleload restriction in tons.",
                                          "example": 50,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "hazmat": {
                                          "default": false,
                                          "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                          "type": "boolean",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "height": {
                                          "description": "Height restriction in metres. ",
                                          "example": 4.2,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "length": {
                                          "description": "Length restriction in metres.",
                                          "example": 8.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "maximum_incline": {
                                          "default": 6,
                                          "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "maximum_sloped_kerb": {
                                          "default": 0.6,
                                          "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "minimum_width": {
                                          "description": "Specifies the minimum width of the footway in metres.",
                                          "example": 2.5,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "smoothness_type": {
                                          "default": "good",
                                          "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                          "enum": [
                                            "excellent",
                                            "good",
                                            "intermediate",
                                            "bad",
                                            "very_bad",
                                            "horrible",
                                            "very_horrible",
                                            "impassable"
                                          ],
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "surface_type": {
                                          "default": "sett",
                                          "description": "Specifies the minimum surface type. Default is `sett`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "track_type": {
                                          "default": "grade1",
                                          "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "weight": {
                                          "description": "Weight restriction in tons. ",
                                          "example": 40,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "width": {
                                          "description": "Width restriction in metres.",
                                          "example": 5.6,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "surface_quality_known": {
                                      "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "weightings": {
                                      "description": "Describe additional weightings to be applied to edges on the routing.",
                                      "properties": {
                                        "green": {
                                          "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "quiet": {
                                          "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                          "example": 0.8,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "shadow": {
                                          "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "steepness_difficulty": {
                                          "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                          "example": 2,
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "cycling-*"
                                          }
                                        }
                                      },
                                      "title": "Profile Weightings",
                                      "type": "object"
                                    }
                                  },
                                  "title": "Profile Parameters",
                                  "type": "object",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "valueNot": "driving-car"
                                  }
                                },
                                "round_trip": {
                                  "description": "Specifies the parameters for generating round trip routes.",
                                  "example": {
                                    "length": 10000,
                                    "points": 5
                                  },
                                  "properties": {
                                    "length": {
                                      "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                                      "example": 10000,
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "points": {
                                      "description": "The number of points to use on the route. Larger values create more circular routes.",
                                      "example": 5,
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "seed": {
                                      "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                                      "example": 1,
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "title": "Round Trip Route Options",
                                  "type": "object"
                                },
                                "vehicle_type": {
                                  "default": "hgv",
                                  "description": "Definition of the vehicle type.",
                                  "enum": [
                                    "hgv",
                                    "bus",
                                    "agricultural",
                                    "delivery",
                                    "forestry",
                                    "goods",
                                    "unknown"
                                  ],
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-hgv"
                                  }
                                }
                              },
                              "title": "Route Options",
                              "type": "object"
                            },
                            "preference": {
                              "default": "recommended",
                              "description": "Specifies the route preference",
                              "enum": [
                                "fastest",
                                "shortest",
                                "recommended"
                              ],
                              "type": "string"
                            },
                            "radiuses": {
                              "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                              "example": [
                                200,
                                -1,
                                30
                              ],
                              "items": {
                                "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                                "format": "double",
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "roundabout_exits": {
                              "default": false,
                              "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                              "type": "boolean"
                            },
                            "schedule": {
                              "default": false,
                              "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "schedule_duration": {
                              "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "schedule_rows": {
                              "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                              "example": 3,
                              "format": "int32",
                              "type": "integer",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "skip_segments": {
                              "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                              "example": [
                                2,
                                4
                              ],
                              "items": {
                                "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "suppress_warnings": {
                              "description": "Suppress warning messages in the response",
                              "example": false,
                              "type": "boolean"
                            },
                            "units": {
                              "default": "m",
                              "description": "Specifies the distance unit.",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string"
                            },
                            "walking_time": {
                              "default": "PT15M",
                              "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            }
                          },
                          "required": [
                            "coordinates"
                          ],
                          "title": "Directions Service",
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "routing",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns GeoJSON. The decoded values of the extra information can be found [here](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html)."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Directions Service GeoJSON",
        "tags": [
          "Directions Service"
        ]
      }
    },
    "/v2/directions/{profile}/gpx": {
      "post": {
        "description": "Returns a route between two or more locations for a selected profile and its settings as GPX. The schema can be found [here](https://raw.githubusercontent.com/GIScience/openrouteservice-schema/main/gpx/v1/ors-gpx.xsd)",
        "operationId": "getGPXRoute",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                "properties": {
                  "alternative_routes": {
                    "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                    "example": {
                      "target_count": 2,
                      "weight_factor": 1.6
                    },
                    "properties": {
                      "share_factor": {
                        "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                        "example": 0.6,
                        "format": "double",
                        "type": "number"
                      },
                      "target_count": {
                        "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "weight_factor": {
                        "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                        "example": 1.4,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "title": "Alternative Routes",
                    "type": "object"
                  },
                  "attributes": {
                    "description": "List of route attributes",
                    "example": [
                      "avgspeed",
                      "percentage"
                    ],
                    "items": {
                      "description": "List of route attributes",
                      "enum": [
                        "avgspeed",
                        "detourfactor",
                        "percentage"
                      ],
                      "example": "[\"avgspeed\",\"percentage\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "bearings": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "example": [
                      [
                        30,
                        20
                      ],
                      [],
                      [
                        40,
                        20
                      ]
                    ],
                    "items": {
                      "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                      "example": [
                        [
                          30,
                          20
                        ],
                        [],
                        [
                          40,
                          20
                        ]
                      ],
                      "items": {
                        "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      },
                      "type": "array",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "cycling-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "continue_straight": {
                    "default": false,
                    "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                    "type": "boolean"
                  },
                  "coordinates": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ],
                      [
                        8.687872,
                        49.420318
                      ]
                    ],
                    "items": {
                      "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ],
                        [
                          8.687872,
                          49.420318
                        ]
                      ],
                      "items": {
                        "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "elevation": {
                    "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                    "example": false,
                    "type": "boolean"
                  },
                  "extra_info": {
                    "description": "The extra info items to include in the response",
                    "example": [
                      "waytype",
                      "surface"
                    ],
                    "items": {
                      "description": "Specify which extra info items to include in the response",
                      "enum": [
                        "steepness",
                        "suitability",
                        "surface",
                        "waycategory",
                        "waytype",
                        "tollways",
                        "traildifficulty",
                        "osmid",
                        "roadaccessrestrictions",
                        "countryinfo",
                        "green",
                        "noise",
                        "csv",
                        "shadow"
                      ],
                      "example": "[\"waytype\",\"surface\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "geometry": {
                    "default": true,
                    "description": "Specifies whether to return geometry. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "format",
                      "value": [
                        "json"
                      ]
                    }
                  },
                  "geometry_simplify": {
                    "default": false,
                    "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "ignore_transfers": {
                    "default": false,
                    "description": "Specifies if transfers as criterion should be ignored.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "instructions": {
                    "default": true,
                    "description": "Specifies whether to return instructions.",
                    "type": "boolean"
                  },
                  "instructions_format": {
                    "default": "text",
                    "description": "Select html for more verbose instructions.",
                    "enum": [
                      "html",
                      "text"
                    ],
                    "type": "string"
                  },
                  "language": {
                    "default": "en",
                    "description": "Language for the route instructions.",
                    "enum": [
                      "cs",
                      "cs-cz",
                      "de",
                      "de-de",
                      "en",
                      "en-us",
                      "eo",
                      "eo-eo",
                      "es",
                      "es-es",
                      "fr",
                      "fr-fr",
                      "gr",
                      "gr-gr",
                      "he",
                      "he-il",
                      "hu",
                      "hu-hu",
                      "id",
                      "id-id",
                      "it",
                      "it-it",
                      "ja",
                      "ja-jp",
                      "ne",
                      "ne-np",
                      "nl",
                      "nl-nl",
                      "nb",
                      "nb-no",
                      "pl",
                      "pl-pl",
                      "pt",
                      "pt-pt",
                      "ro",
                      "ro-ro",
                      "ru",
                      "ru-ru",
                      "tr",
                      "tr-tr",
                      "zh",
                      "zh-cn"
                    ],
                    "type": "string"
                  },
                  "maneuvers": {
                    "default": false,
                    "description": "Specifies whether the maneuver object is included into the step object or not. ",
                    "type": "boolean"
                  },
                  "maximum_speed": {
                    "description": "The maximum speed specified by user.",
                    "example": 90,
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "preference": {
                    "default": "recommended",
                    "description": "Specifies the route preference",
                    "enum": [
                      "fastest",
                      "shortest",
                      "recommended"
                    ],
                    "type": "string"
                  },
                  "radiuses": {
                    "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                    "example": [
                      200,
                      -1,
                      30
                    ],
                    "items": {
                      "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "roundabout_exits": {
                    "default": false,
                    "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                    "type": "boolean"
                  },
                  "schedule": {
                    "default": false,
                    "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "schedule_duration": {
                    "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "schedule_rows": {
                    "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                    "example": 3,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "skip_segments": {
                    "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                    "example": [
                      2,
                      4
                    ],
                    "items": {
                      "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "suppress_warnings": {
                    "description": "Suppress warning messages in the response",
                    "example": false,
                    "type": "boolean"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string"
                  },
                  "walking_time": {
                    "default": "PT15M",
                    "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  }
                },
                "required": [
                  "coordinates"
                ],
                "title": "Directions Service",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/gpx+xml": {
                "schema": {
                  "properties": {
                    "gpxRouteElements": {
                      "items": {
                        "type": "object",
                        "xml": {
                          "name": "rte"
                        }
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "xml": {
                    "name": "gpx"
                  }
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns GPX."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Directions Service GPX",
        "tags": [
          "Directions Service"
        ]
      }
    },
    "/v2/directions/{profile}/json": {
      "post": {
        "description": "Returns a route between two or more locations for a selected profile and its settings as JSON",
        "operationId": "getJsonRoute",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                "properties": {
                  "alternative_routes": {
                    "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                    "example": {
                      "target_count": 2,
                      "weight_factor": 1.6
                    },
                    "properties": {
                      "share_factor": {
                        "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                        "example": 0.6,
                        "format": "double",
                        "type": "number"
                      },
                      "target_count": {
                        "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "weight_factor": {
                        "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                        "example": 1.4,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "title": "Alternative Routes",
                    "type": "object"
                  },
                  "attributes": {
                    "description": "List of route attributes",
                    "example": [
                      "avgspeed",
                      "percentage"
                    ],
                    "items": {
                      "description": "List of route attributes",
                      "enum": [
                        "avgspeed",
                        "detourfactor",
                        "percentage"
                      ],
                      "example": "[\"avgspeed\",\"percentage\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "bearings": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "example": [
                      [
                        30,
                        20
                      ],
                      [],
                      [
                        40,
                        20
                      ]
                    ],
                    "items": {
                      "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                      "example": [
                        [
                          30,
                          20
                        ],
                        [],
                        [
                          40,
                          20
                        ]
                      ],
                      "items": {
                        "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      },
                      "type": "array",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "cycling-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "continue_straight": {
                    "default": false,
                    "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                    "type": "boolean"
                  },
                  "coordinates": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ],
                      [
                        8.687872,
                        49.420318
                      ]
                    ],
                    "items": {
                      "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ],
                        [
                          8.687872,
                          49.420318
                        ]
                      ],
                      "items": {
                        "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "elevation": {
                    "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                    "example": false,
                    "type": "boolean"
                  },
                  "extra_info": {
                    "description": "The extra info items to include in the response",
                    "example": [
                      "waytype",
                      "surface"
                    ],
                    "items": {
                      "description": "Specify which extra info items to include in the response",
                      "enum": [
                        "steepness",
                        "suitability",
                        "surface",
                        "waycategory",
                        "waytype",
                        "tollways",
                        "traildifficulty",
                        "osmid",
                        "roadaccessrestrictions",
                        "countryinfo",
                        "green",
                        "noise",
                        "csv",
                        "shadow"
                      ],
                      "example": "[\"waytype\",\"surface\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "geometry": {
                    "default": true,
                    "description": "Specifies whether to return geometry. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "format",
                      "value": [
                        "json"
                      ]
                    }
                  },
                  "geometry_simplify": {
                    "default": false,
                    "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "ignore_transfers": {
                    "default": false,
                    "description": "Specifies if transfers as criterion should be ignored.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "instructions": {
                    "default": true,
                    "description": "Specifies whether to return instructions.",
                    "type": "boolean"
                  },
                  "instructions_format": {
                    "default": "text",
                    "description": "Select html for more verbose instructions.",
                    "enum": [
                      "html",
                      "text"
                    ],
                    "type": "string"
                  },
                  "language": {
                    "default": "en",
                    "description": "Language for the route instructions.",
                    "enum": [
                      "cs",
                      "cs-cz",
                      "de",
                      "de-de",
                      "en",
                      "en-us",
                      "eo",
                      "eo-eo",
                      "es",
                      "es-es",
                      "fr",
                      "fr-fr",
                      "gr",
                      "gr-gr",
                      "he",
                      "he-il",
                      "hu",
                      "hu-hu",
                      "id",
                      "id-id",
                      "it",
                      "it-it",
                      "ja",
                      "ja-jp",
                      "ne",
                      "ne-np",
                      "nl",
                      "nl-nl",
                      "nb",
                      "nb-no",
                      "pl",
                      "pl-pl",
                      "pt",
                      "pt-pt",
                      "ro",
                      "ro-ro",
                      "ru",
                      "ru-ru",
                      "tr",
                      "tr-tr",
                      "zh",
                      "zh-cn"
                    ],
                    "type": "string"
                  },
                  "maneuvers": {
                    "default": false,
                    "description": "Specifies whether the maneuver object is included into the step object or not. ",
                    "type": "boolean"
                  },
                  "maximum_speed": {
                    "description": "The maximum speed specified by user.",
                    "example": 90,
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "preference": {
                    "default": "recommended",
                    "description": "Specifies the route preference",
                    "enum": [
                      "fastest",
                      "shortest",
                      "recommended"
                    ],
                    "type": "string"
                  },
                  "radiuses": {
                    "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                    "example": [
                      200,
                      -1,
                      30
                    ],
                    "items": {
                      "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "roundabout_exits": {
                    "default": false,
                    "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                    "type": "boolean"
                  },
                  "schedule": {
                    "default": false,
                    "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "schedule_duration": {
                    "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "schedule_rows": {
                    "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                    "example": 3,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "skip_segments": {
                    "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                    "example": [
                      2,
                      4
                    ],
                    "items": {
                      "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "suppress_warnings": {
                    "description": "Suppress warning messages in the response",
                    "example": false,
                    "type": "boolean"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string"
                  },
                  "walking_time": {
                    "default": "PT15M",
                    "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  }
                },
                "required": [
                  "coordinates"
                ],
                "title": "Directions Service",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "description": "Bounding box that covers all returned routes",
                      "example": [
                        49.414057,
                        8.680894,
                        49.420514,
                        8.690123
                      ],
                      "items": {
                        "description": "Bounding box that covers all returned routes",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the request (as passed in by the query)",
                          "example": "request123",
                          "type": "string"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                          "properties": {
                            "alternative_routes": {
                              "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                              "example": {
                                "target_count": 2,
                                "weight_factor": 1.6
                              },
                              "properties": {
                                "share_factor": {
                                  "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                                  "example": 0.6,
                                  "format": "double",
                                  "type": "number"
                                },
                                "target_count": {
                                  "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                                  "example": 2,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "weight_factor": {
                                  "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                                  "example": 1.4,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "title": "Alternative Routes",
                              "type": "object"
                            },
                            "attributes": {
                              "description": "List of route attributes",
                              "example": [
                                "avgspeed",
                                "percentage"
                              ],
                              "items": {
                                "description": "List of route attributes",
                                "enum": [
                                  "avgspeed",
                                  "detourfactor",
                                  "percentage"
                                ],
                                "example": "[\"avgspeed\",\"percentage\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "bearings": {
                              "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                              "example": [
                                [
                                  30,
                                  20
                                ],
                                [],
                                [
                                  40,
                                  20
                                ]
                              ],
                              "items": {
                                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                "example": [
                                  [
                                    30,
                                    20
                                  ],
                                  [],
                                  [
                                    40,
                                    20
                                  ]
                                ],
                                "items": {
                                  "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "cycling-*"
                                  }
                                },
                                "type": "array",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              },
                              "type": "array",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "cycling-*"
                              }
                            },
                            "continue_straight": {
                              "default": false,
                              "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                              "type": "boolean"
                            },
                            "coordinates": {
                              "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ],
                                [
                                  8.687872,
                                  49.420318
                                ]
                              ],
                              "items": {
                                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ],
                                  [
                                    8.687872,
                                    49.420318
                                  ]
                                ],
                                "items": {
                                  "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "elevation": {
                              "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                              "example": false,
                              "type": "boolean"
                            },
                            "extra_info": {
                              "description": "The extra info items to include in the response",
                              "example": [
                                "waytype",
                                "surface"
                              ],
                              "items": {
                                "description": "Specify which extra info items to include in the response",
                                "enum": [
                                  "steepness",
                                  "suitability",
                                  "surface",
                                  "waycategory",
                                  "waytype",
                                  "tollways",
                                  "traildifficulty",
                                  "osmid",
                                  "roadaccessrestrictions",
                                  "countryinfo",
                                  "green",
                                  "noise",
                                  "csv",
                                  "shadow"
                                ],
                                "example": "[\"waytype\",\"surface\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "geometry": {
                              "default": true,
                              "description": "Specifies whether to return geometry. ",
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "format",
                                "value": [
                                  "json"
                                ]
                              }
                            },
                            "geometry_simplify": {
                              "default": false,
                              "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                              "type": "boolean"
                            },
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "ignore_transfers": {
                              "default": false,
                              "description": "Specifies if transfers as criterion should be ignored.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "instructions": {
                              "default": true,
                              "description": "Specifies whether to return instructions.",
                              "type": "boolean"
                            },
                            "instructions_format": {
                              "default": "text",
                              "description": "Select html for more verbose instructions.",
                              "enum": [
                                "html",
                                "text"
                              ],
                              "type": "string"
                            },
                            "language": {
                              "default": "en",
                              "description": "Language for the route instructions.",
                              "enum": [
                                "cs",
                                "cs-cz",
                                "de",
                                "de-de",
                                "en",
                                "en-us",
                                "eo",
                                "eo-eo",
                                "es",
                                "es-es",
                                "fr",
                                "fr-fr",
                                "gr",
                                "gr-gr",
                                "he",
                                "he-il",
                                "hu",
                                "hu-hu",
                                "id",
                                "id-id",
                                "it",
                                "it-it",
                                "ja",
                                "ja-jp",
                                "ne",
                                "ne-np",
                                "nl",
                                "nl-nl",
                                "nb",
                                "nb-no",
                                "pl",
                                "pl-pl",
                                "pt",
                                "pt-pt",
                                "ro",
                                "ro-ro",
                                "ru",
                                "ru-ru",
                                "tr",
                                "tr-tr",
                                "zh",
                                "zh-cn"
                              ],
                              "type": "string"
                            },
                            "maneuvers": {
                              "default": false,
                              "description": "Specifies whether the maneuver object is included into the step object or not. ",
                              "type": "boolean"
                            },
                            "maximum_speed": {
                              "description": "The maximum speed specified by user.",
                              "example": 90,
                              "format": "double",
                              "type": "number",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "driving-*"
                              }
                            },
                            "options": {
                              "description": "Advanced options for routing",
                              "example": {
                                "avoid_borders": "controlled"
                              },
                              "properties": {
                                "avoid_borders": {
                                  "description": "Specify which type of border crossing to avoid",
                                  "enum": [
                                    "all",
                                    "controlled",
                                    "none"
                                  ],
                                  "example": "controlled",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_countries": {
                                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                  "example": [
                                    11,
                                    193
                                  ],
                                  "items": {
                                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                    "example": "[11,193]",
                                    "type": "string",
                                    "x-validWhen": {
                                      "ref": "profile",
                                      "value": "driving-*"
                                    }
                                  },
                                  "type": "array",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_features": {
                                  "description": "List of features to avoid. ",
                                  "example": [
                                    "highways"
                                  ],
                                  "items": {
                                    "description": "Definition of the features to be avoided.",
                                    "enum": [
                                      "highways",
                                      "tollways",
                                      "ferries",
                                      "fords",
                                      "steps"
                                    ],
                                    "example": "[\"highways\"]",
                                    "type": "string",
                                    "x-itemRestrictions": {
                                      "itemsWhen": {
                                        "cycling-*": [
                                          "ferries",
                                          "steps",
                                          "fords"
                                        ],
                                        "driving-*": [
                                          "highways",
                                          "tollways",
                                          "ferries"
                                        ],
                                        "foot-*": [
                                          "ferries",
                                          "fords",
                                          "steps"
                                        ],
                                        "wheelchair": [
                                          "ferries",
                                          "steps"
                                        ]
                                      },
                                      "ref": "profile"
                                    }
                                  },
                                  "type": "array",
                                  "x-itemRestrictions": {
                                    "itemsWhen": {
                                      "cycling-*": [
                                        "ferries",
                                        "steps",
                                        "fords"
                                      ],
                                      "driving-*": [
                                        "highways",
                                        "tollways",
                                        "ferries"
                                      ],
                                      "foot-*": [
                                        "ferries",
                                        "fords",
                                        "steps"
                                      ],
                                      "wheelchair": [
                                        "ferries",
                                        "steps"
                                      ]
                                    },
                                    "ref": "profile"
                                  }
                                },
                                "avoid_polygons": {
                                  "additionalProperties": {
                                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                    "type": "object"
                                  },
                                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                  "properties": {
                                    "empty": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "profile_params": {
                                  "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                                  "properties": {
                                    "allow_unsuitable": {
                                      "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "restrictions": {
                                      "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                                      "properties": {
                                        "axleload": {
                                          "description": "Axleload restriction in tons.",
                                          "example": 50,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "hazmat": {
                                          "default": false,
                                          "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                          "type": "boolean",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "height": {
                                          "description": "Height restriction in metres. ",
                                          "example": 4.2,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "length": {
                                          "description": "Length restriction in metres.",
                                          "example": 8.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "maximum_incline": {
                                          "default": 6,
                                          "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "maximum_sloped_kerb": {
                                          "default": 0.6,
                                          "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "minimum_width": {
                                          "description": "Specifies the minimum width of the footway in metres.",
                                          "example": 2.5,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "smoothness_type": {
                                          "default": "good",
                                          "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                          "enum": [
                                            "excellent",
                                            "good",
                                            "intermediate",
                                            "bad",
                                            "very_bad",
                                            "horrible",
                                            "very_horrible",
                                            "impassable"
                                          ],
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "surface_type": {
                                          "default": "sett",
                                          "description": "Specifies the minimum surface type. Default is `sett`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "track_type": {
                                          "default": "grade1",
                                          "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "weight": {
                                          "description": "Weight restriction in tons. ",
                                          "example": 40,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "width": {
                                          "description": "Width restriction in metres.",
                                          "example": 5.6,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "surface_quality_known": {
                                      "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "weightings": {
                                      "description": "Describe additional weightings to be applied to edges on the routing.",
                                      "properties": {
                                        "green": {
                                          "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "quiet": {
                                          "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                          "example": 0.8,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "shadow": {
                                          "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "steepness_difficulty": {
                                          "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                          "example": 2,
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "cycling-*"
                                          }
                                        }
                                      },
                                      "title": "Profile Weightings",
                                      "type": "object"
                                    }
                                  },
                                  "title": "Profile Parameters",
                                  "type": "object",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "valueNot": "driving-car"
                                  }
                                },
                                "round_trip": {
                                  "description": "Specifies the parameters for generating round trip routes.",
                                  "example": {
                                    "length": 10000,
                                    "points": 5
                                  },
                                  "properties": {
                                    "length": {
                                      "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                                      "example": 10000,
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "points": {
                                      "description": "The number of points to use on the route. Larger values create more circular routes.",
                                      "example": 5,
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "seed": {
                                      "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                                      "example": 1,
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "title": "Round Trip Route Options",
                                  "type": "object"
                                },
                                "vehicle_type": {
                                  "default": "hgv",
                                  "description": "Definition of the vehicle type.",
                                  "enum": [
                                    "hgv",
                                    "bus",
                                    "agricultural",
                                    "delivery",
                                    "forestry",
                                    "goods",
                                    "unknown"
                                  ],
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-hgv"
                                  }
                                }
                              },
                              "title": "Route Options",
                              "type": "object"
                            },
                            "preference": {
                              "default": "recommended",
                              "description": "Specifies the route preference",
                              "enum": [
                                "fastest",
                                "shortest",
                                "recommended"
                              ],
                              "type": "string"
                            },
                            "radiuses": {
                              "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                              "example": [
                                200,
                                -1,
                                30
                              ],
                              "items": {
                                "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                                "format": "double",
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "roundabout_exits": {
                              "default": false,
                              "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                              "type": "boolean"
                            },
                            "schedule": {
                              "default": false,
                              "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                              "example": true,
                              "type": "boolean",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            },
                            "schedule_duration": {
                              "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "schedule_rows": {
                              "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                              "example": 3,
                              "format": "int32",
                              "type": "integer",
                              "x-validWhen": {
                                "ref": "schedule",
                                "value": true
                              }
                            },
                            "skip_segments": {
                              "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                              "example": [
                                2,
                                4
                              ],
                              "items": {
                                "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "suppress_warnings": {
                              "description": "Suppress warning messages in the response",
                              "example": false,
                              "type": "boolean"
                            },
                            "units": {
                              "default": "m",
                              "description": "Specifies the distance unit.",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string"
                            },
                            "walking_time": {
                              "default": "PT15M",
                              "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                              "example": "PT30M",
                              "type": "string",
                              "x-validWhen": {
                                "ref": "profile",
                                "value": "public-transport"
                              }
                            }
                          },
                          "required": [
                            "coordinates"
                          ],
                          "title": "Directions Service",
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "routing",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "routes": {
                      "description": "A list of routes returned from the request",
                      "items": {
                        "description": "An individual JSON based route created by the service",
                        "properties": {
                          "arrival": {
                            "description": "Arrival date and time",
                            "example": "2020-01-31T13:15:00+01:00",
                            "format": "date-time",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "arrival",
                              "value": true
                            }
                          },
                          "bbox": {
                            "description": "A bounding box which contains the entire route",
                            "example": [
                              49.414057,
                              8.680894,
                              49.420514,
                              8.690123
                            ],
                            "items": {
                              "description": "A bounding box which contains the entire route",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "departure": {
                            "description": "Departure date and time",
                            "example": "2020-01-31T12:45:00+01:00",
                            "format": "date-time",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "departure",
                              "value": true
                            }
                          },
                          "extras": {
                            "additionalProperties": {
                              "description": "An object representing one of the extra info items requested",
                              "properties": {
                                "summary": {
                                  "description": "List representing the summary of the extra info items.",
                                  "items": {
                                    "description": "List representing the summary of the extra info items.",
                                    "properties": {
                                      "amount": {
                                        "description": "Category percentage of the entire route.",
                                        "example": 23.8,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "distance": {
                                        "description": "Cumulative distance of this value.",
                                        "example": 123.1,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "value": {
                                        "description": "[Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.",
                                        "example": 5,
                                        "format": "double",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "values": {
                                  "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                                  "example": [
                                    [
                                      0,
                                      3,
                                      26
                                    ],
                                    [
                                      3,
                                      10,
                                      12
                                    ]
                                  ],
                                  "items": {
                                    "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                                    "example": [
                                      [
                                        0,
                                        3,
                                        26
                                      ],
                                      [
                                        3,
                                        10,
                                        12
                                      ]
                                    ],
                                    "items": {
                                      "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "description": "List of extra info objects representing the extra info items that were requested for the route.",
                            "type": "object"
                          },
                          "geometry": {
                            "description": "The geometry of the route. For JSON route responses this is an encoded polyline.",
                            "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                            "type": "string"
                          },
                          "legs": {
                            "description": "List containing the legs the route consists of.",
                            "items": {
                              "description": "Leg of a route",
                              "properties": {
                                "arrival": {
                                  "description": "Arrival date and time",
                                  "example": "2020-01-31T13:15:00+01:00",
                                  "format": "date-time",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "arrival",
                                    "value": true
                                  }
                                },
                                "departure": {
                                  "description": "Departure date and time",
                                  "example": "2020-01-31T12:45:00+01:00",
                                  "format": "date-time",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "departure",
                                    "value": true
                                  }
                                },
                                "departure_location": {
                                  "description": "The departure location of the leg.",
                                  "example": "Dossenheim, Süd Bstg G1",
                                  "type": "string"
                                },
                                "distance": {
                                  "description": "The distance for the leg in metres.",
                                  "example": 245,
                                  "format": "double",
                                  "type": "number"
                                },
                                "duration": {
                                  "description": "The duration for the leg in seconds.",
                                  "example": 96.2,
                                  "format": "double",
                                  "type": "number"
                                },
                                "feed_id": {
                                  "description": "The feed ID this public transport leg based its information from.",
                                  "example": "gtfs_0",
                                  "type": "string"
                                },
                                "geometry": {
                                  "description": "The geometry of the leg. This is an encoded polyline.",
                                  "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                                  "type": "string"
                                },
                                "instructions": {
                                  "description": "List containing the specific steps the segment consists of.",
                                  "items": {
                                    "description": "Step of a route segment",
                                    "properties": {
                                      "distance": {
                                        "description": "The distance for the step in metres.",
                                        "example": 245,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "duration": {
                                        "description": "The duration for the step in seconds.",
                                        "example": 96.2,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "exit_bearings": {
                                        "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                        "example": [
                                          10,
                                          45,
                                          60
                                        ],
                                        "items": {
                                          "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "roundabout_exits",
                                            "value": true
                                          }
                                        },
                                        "type": "array",
                                        "x-validWhen": {
                                          "ref": "roundabout_exits",
                                          "value": true
                                        }
                                      },
                                      "exit_number": {
                                        "description": "Only for roundabouts. Contains the number of the exit to take.",
                                        "example": 2,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "instruction": {
                                        "description": "The routing instruction text for the step.",
                                        "example": "Turn right onto Berliner Straße",
                                        "type": "string"
                                      },
                                      "maneuver": {
                                        "description": "Maneuver object of the step",
                                        "properties": {
                                          "bearing_after": {
                                            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                                            "example": 96,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "bearing_before": {
                                            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                                            "example": 24,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "location": {
                                            "description": "The coordinate of the point where a maneuver takes place.",
                                            "example": [
                                              8.678962,
                                              49.407819
                                            ],
                                            "items": {
                                              "description": "The coordinate of the point where a maneuver takes place.",
                                              "format": "double",
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "x-validWhen": {
                                          "ref": "maneuvers",
                                          "value": true
                                        }
                                      },
                                      "name": {
                                        "description": "The name of the next street.",
                                        "example": "Berliner Straße",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                                        "example": 1,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "way_points": {
                                        "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                        "example": [
                                          45,
                                          48
                                        ],
                                        "items": {
                                          "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "is_in_same_vehicle_as_previous": {
                                  "description": "Whether the legs continues in the same vehicle as the previous one.",
                                  "example": false,
                                  "type": "boolean"
                                },
                                "route_desc": {
                                  "description": "The route description of the leg (if provided in the GTFS data set).",
                                  "example": "Bus",
                                  "type": "string"
                                },
                                "route_id": {
                                  "description": "The route ID of this public transport leg.",
                                  "example": "vrn-19-39A-1",
                                  "type": "string"
                                },
                                "route_long_name": {
                                  "description": "The public transport route name of the leg.",
                                  "example": "RNV Bus 39A",
                                  "type": "string"
                                },
                                "route_short_name": {
                                  "description": "The public transport route name (short version) of the leg.",
                                  "example": "39A",
                                  "type": "string"
                                },
                                "route_type": {
                                  "description": "The route type of the leg (if provided in the GTFS data set).",
                                  "example": 1,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "stops": {
                                  "description": "List containing the stops the along the leg.",
                                  "items": {
                                    "description": "Stop of a public transport leg",
                                    "properties": {
                                      "arrival_cancelled": {
                                        "description": "Whether arrival at the stop was cancelled.",
                                        "example": false,
                                        "type": "boolean"
                                      },
                                      "arrival_time": {
                                        "description": "Arrival time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "departure_cancelled": {
                                        "description": "Whether departure at the stop was cancelled.",
                                        "example": false,
                                        "type": "boolean"
                                      },
                                      "departure_time": {
                                        "description": "Departure time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "location": {
                                        "description": "The location of the stop.",
                                        "example": [
                                          8.6912542,
                                          49.399979
                                        ],
                                        "items": {
                                          "description": "The location of the stop.",
                                          "format": "double",
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      "name": {
                                        "description": "The name of the stop.",
                                        "example": "Heidelberg, Alois-Link-Platz",
                                        "type": "string"
                                      },
                                      "planned_arrival_time": {
                                        "description": "Planned arrival time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "planned_departure_time": {
                                        "description": "Planned departure time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "predicted_arrival_time": {
                                        "description": "Predicted arrival time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "predicted_departure_time": {
                                        "description": "Predicted departure time of the stop.",
                                        "example": "2022-07-04T13:22:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                      },
                                      "stop_id": {
                                        "description": "The ID of the stop.",
                                        "example": "de:08221:1138:0:O",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "trip_headsign": {
                                  "description": "The headsign of the public transport vehicle of the leg.",
                                  "example": "Bismarckplatz - Speyererhof - EMBL - Boxberg - Mombertplatz",
                                  "type": "string"
                                },
                                "trip_id": {
                                  "description": "The trip ID of this public transport leg.",
                                  "example": "trip_id: vrn-19-39A-1-2-21-H-8-Special-50-42",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of the leg, possible values are currently 'walk' and 'pt'.",
                                  "example": "pt",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "segments": {
                            "description": "List containing the segments and its corresponding steps which make up the route.",
                            "items": {
                              "description": "List containing the segments and its correspoding steps which make up the route.",
                              "properties": {
                                "ascent": {
                                  "description": " Contains ascent of this segment in metres.",
                                  "example": 56.3,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "elevation",
                                    "value": true
                                  }
                                },
                                "avgspeed": {
                                  "description": "Contains the average speed of this segment in km/h.",
                                  "example": 56.3,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "attributes",
                                    "valueContains": "avgspeed"
                                  }
                                },
                                "descent": {
                                  "description": "Contains descent of this segment in metres.",
                                  "example": 45.2,
                                  "format": "double",
                                  "type": "number"
                                },
                                "detourfactor": {
                                  "description": "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.",
                                  "example": 0.5,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "attributes",
                                    "valueContains": "detourfactor"
                                  }
                                },
                                "distance": {
                                  "description": "Contains the distance of the segment in specified units.",
                                  "example": 253,
                                  "format": "double",
                                  "type": "number"
                                },
                                "duration": {
                                  "description": "Contains the duration of the segment in seconds.",
                                  "example": 37.7,
                                  "format": "double",
                                  "type": "number"
                                },
                                "percentage": {
                                  "description": "Contains the proportion of the route in percent.",
                                  "example": 43.2,
                                  "format": "double",
                                  "type": "number",
                                  "x-validWhen": {
                                    "ref": "attributes",
                                    "valueContains": "percentage"
                                  }
                                },
                                "steps": {
                                  "description": "List containing the specific steps the segment consists of.",
                                  "items": {
                                    "description": "Step of a route segment",
                                    "properties": {
                                      "distance": {
                                        "description": "The distance for the step in metres.",
                                        "example": 245,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "duration": {
                                        "description": "The duration for the step in seconds.",
                                        "example": 96.2,
                                        "format": "double",
                                        "type": "number"
                                      },
                                      "exit_bearings": {
                                        "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                        "example": [
                                          10,
                                          45,
                                          60
                                        ],
                                        "items": {
                                          "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "roundabout_exits",
                                            "value": true
                                          }
                                        },
                                        "type": "array",
                                        "x-validWhen": {
                                          "ref": "roundabout_exits",
                                          "value": true
                                        }
                                      },
                                      "exit_number": {
                                        "description": "Only for roundabouts. Contains the number of the exit to take.",
                                        "example": 2,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "instruction": {
                                        "description": "The routing instruction text for the step.",
                                        "example": "Turn right onto Berliner Straße",
                                        "type": "string"
                                      },
                                      "maneuver": {
                                        "description": "Maneuver object of the step",
                                        "properties": {
                                          "bearing_after": {
                                            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                                            "example": 96,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "bearing_before": {
                                            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                                            "example": 24,
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "location": {
                                            "description": "The coordinate of the point where a maneuver takes place.",
                                            "example": [
                                              8.678962,
                                              49.407819
                                            ],
                                            "items": {
                                              "description": "The coordinate of the point where a maneuver takes place.",
                                              "format": "double",
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "x-validWhen": {
                                          "ref": "maneuvers",
                                          "value": true
                                        }
                                      },
                                      "name": {
                                        "description": "The name of the next street.",
                                        "example": "Berliner Straße",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                                        "example": 1,
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "way_points": {
                                        "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                        "example": [
                                          45,
                                          48
                                        ],
                                        "items": {
                                          "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "summary": {
                            "description": "Contains total sums of duration, route distance and actual distance of the route.",
                            "properties": {
                              "ascent": {
                                "description": "Total ascent in meters.",
                                "example": 166.3,
                                "format": "double",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "elevation",
                                  "value": true
                                }
                              },
                              "descent": {
                                "description": "Total descent in meters.",
                                "example": 201.3,
                                "format": "double",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "elevation",
                                  "value": true
                                }
                              },
                              "distance": {
                                "description": "Total route distance in specified units.",
                                "example": 12.6,
                                "format": "double",
                                "type": "number"
                              },
                              "duration": {
                                "description": "Total duration in seconds.",
                                "example": 604,
                                "format": "double",
                                "type": "number"
                              },
                              "fare": {
                                "format": "int32",
                                "type": "integer"
                              },
                              "transfers": {
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "warnings": {
                            "description": "List of warnings that have been generated for the route",
                            "items": {
                              "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
                              "properties": {
                                "code": {
                                  "description": "Identification code for the warning",
                                  "example": 1,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "message": {
                                  "description": "The message associated with the warning",
                                  "example": "This route may go over restricted roads",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "way_points": {
                            "description": "List containing the indices of way points corresponding to the *geometry*.",
                            "example": [
                              0,
                              23
                            ],
                            "items": {
                              "description": "List containing the indices of way points corresponding to the *geometry*.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "JSON Response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Directions Service JSON",
        "tags": [
          "Directions Service"
        ]
      }
    },
    "/v2/export/{profile}": {
      "post": {
        "description": "Returns a list of points, edges and weights within a given bounding box for a selected profile as JSON. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.",
        "operationId": "getDefault_2",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request payload",
                "properties": {
                  "bbox": {
                    "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "export_request",
                    "type": "string"
                  }
                },
                "required": [
                  "bbox"
                ],
                "title": "Graph export Service",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "description": "The Export Response contains nodes and edge weights from the requested BBox",
                  "properties": {
                    "edges": {
                      "items": {
                        "properties": {
                          "fromId": {
                            "description": "Id of the start point of the edge",
                            "example": 1,
                            "format": "int32",
                            "type": "integer"
                          },
                          "toId": {
                            "description": "Id of the end point of the edge",
                            "example": 2,
                            "format": "int32",
                            "type": "integer"
                          },
                          "weight": {
                            "description": "Weight of the corresponding edge in the given bounding box",
                            "example": 123.45,
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "edges_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "edges_extra": {
                      "items": {
                        "properties": {
                          "edgeId": {
                            "description": "Id of the corresponding edge in the graph",
                            "example": "1",
                            "type": "string"
                          },
                          "extra": {
                            "description": "Extra info stored on the edge",
                            "example": {
                              "surface_quality_known": "true"
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nodes": {
                      "items": {
                        "properties": {
                          "location": {
                            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                            "example": [
                              8.678962,
                              49.40783
                            ],
                            "items": {
                              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "nodeId": {
                            "description": "Id of the corresponding node in the graph",
                            "example": 1,
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nodes_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "warning": {
                      "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
                      "properties": {
                        "code": {
                          "description": "Identification code for the warning",
                          "example": 1,
                          "format": "int32",
                          "type": "integer"
                        },
                        "message": {
                          "description": "The message associated with the warning",
                          "example": "This route may go over restricted roads",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns JSON."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Export Service",
        "tags": [
          "Export Service"
        ]
      }
    },
    "/v2/export/{profile}/json": {
      "post": {
        "description": "Returns a list of points, edges and weights within a given bounding box for a selected profile JSON.",
        "operationId": "getJsonExport",
        "parameters": [
          {
            "description": "Specifies the profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request payload",
                "properties": {
                  "bbox": {
                    "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "export_request",
                    "type": "string"
                  }
                },
                "required": [
                  "bbox"
                ],
                "title": "Graph export Service",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "description": "The Export Response contains nodes and edge weights from the requested BBox",
                  "properties": {
                    "edges": {
                      "items": {
                        "properties": {
                          "fromId": {
                            "description": "Id of the start point of the edge",
                            "example": 1,
                            "format": "int32",
                            "type": "integer"
                          },
                          "toId": {
                            "description": "Id of the end point of the edge",
                            "example": 2,
                            "format": "int32",
                            "type": "integer"
                          },
                          "weight": {
                            "description": "Weight of the corresponding edge in the given bounding box",
                            "example": 123.45,
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "edges_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "edges_extra": {
                      "items": {
                        "properties": {
                          "edgeId": {
                            "description": "Id of the corresponding edge in the graph",
                            "example": "1",
                            "type": "string"
                          },
                          "extra": {
                            "description": "Extra info stored on the edge",
                            "example": {
                              "surface_quality_known": "true"
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nodes": {
                      "items": {
                        "properties": {
                          "location": {
                            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                            "example": [
                              8.678962,
                              49.40783
                            ],
                            "items": {
                              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "nodeId": {
                            "description": "Id of the corresponding node in the graph",
                            "example": 1,
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nodes_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "warning": {
                      "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
                      "properties": {
                        "code": {
                          "description": "Identification code for the warning",
                          "example": 1,
                          "format": "int32",
                          "type": "integer"
                        },
                        "message": {
                          "description": "The message associated with the warning",
                          "example": "This route may go over restricted roads",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "JSON Response."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Export Service JSON",
        "tags": [
          "Export Service"
        ]
      }
    },
    "/v2/health": {
      "get": {
        "operationId": "fetchHealth_1",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Health service"
        ]
      }
    },
    "/v2/isochrones/{profile}": {
      "post": {
        "description": "The Isochrone Service supports time and distance analyses for one single or multiple locations.\nYou may also specify the isochrone interval or provide multiple exact isochrone range values.\nThis service allows the same range of profile options as the /directions endpoint,\nwhich help you to further customize your request to obtain a more detailed reachability area response.",
        "operationId": "getDefaultIsochrones",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate.",
                "properties": {
                  "area_units": {
                    "default": "m",
                    "description": "Specifies the area unit.\nDefault: m. ",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "attributes",
                      "value": "area"
                    }
                  },
                  "attributes": {
                    "description": "List of isochrones attributes",
                    "example": [
                      "area"
                    ],
                    "items": {
                      "description": "List of isochrones attributes",
                      "enum": [
                        "area",
                        "reachfactor",
                        "total_pop"
                      ],
                      "example": "[\"area\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "intersections": {
                    "default": false,
                    "description": "Specifies whether to return intersecting polygons. ",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.",
                    "example": 30,
                    "format": "double",
                    "type": "number"
                  },
                  "location_type": {
                    "default": "start",
                    "description": "`start` treats the location(s) as starting point, `destination` as goal.",
                    "enum": [
                      "start",
                      "destination"
                    ],
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "range": {
                    "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                    "example": [
                      300,
                      200
                    ],
                    "items": {
                      "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "range_type": {
                    "default": "time",
                    "description": "Specifies the isochrones reachability type.",
                    "enum": [
                      "time",
                      "distance"
                    ],
                    "type": "string"
                  },
                  "smoothing": {
                    "description": "Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`.\nGeneralisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon.\nIf the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used.\nNote that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used.\nThe threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`.\nTherefore, a value closer to 100 will result in a more generalised shape.\nThe polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`",
                    "example": 25,
                    "format": "double",
                    "type": "number"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance units only if `range_type` is set to distance.\nDefault: m. ",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "range_type",
                      "value": "distance"
                    }
                  }
                },
                "required": [
                  "locations",
                  "range"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "properties": {
                    "bbox": {
                      "description": "Bounding box that covers all returned isochrones",
                      "example": [
                        49.414057,
                        8.680894,
                        49.420514,
                        8.690123
                      ],
                      "items": {
                        "description": "Bounding box that covers all returned isochrones",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "items": {
                        "properties": {
                          "geometry": {
                            "additionalProperties": {
                              "additionalProperties": {
                                "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                "type": "object"
                              },
                              "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                              "properties": {
                                "empty": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "properties": {
                              "empty": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the request (as passed in by the query)",
                          "example": "request123",
                          "type": "string"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate.",
                          "properties": {
                            "area_units": {
                              "default": "m",
                              "description": "Specifies the area unit.\nDefault: m. ",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string",
                              "x-validWhen": {
                                "ref": "attributes",
                                "value": "area"
                              }
                            },
                            "attributes": {
                              "description": "List of isochrones attributes",
                              "example": [
                                "area"
                              ],
                              "items": {
                                "description": "List of isochrones attributes",
                                "enum": [
                                  "area",
                                  "reachfactor",
                                  "total_pop"
                                ],
                                "example": "[\"area\"]",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "intersections": {
                              "default": false,
                              "description": "Specifies whether to return intersecting polygons. ",
                              "type": "boolean"
                            },
                            "interval": {
                              "description": "Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.",
                              "example": 30,
                              "format": "double",
                              "type": "number"
                            },
                            "location_type": {
                              "default": "start",
                              "description": "`start` treats the location(s) as starting point, `destination` as goal.",
                              "enum": [
                                "start",
                                "destination"
                              ],
                              "type": "string"
                            },
                            "locations": {
                              "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ]
                              ],
                              "items": {
                                "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ]
                                ],
                                "items": {
                                  "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "options": {
                              "description": "Advanced options for routing",
                              "example": {
                                "avoid_borders": "controlled"
                              },
                              "properties": {
                                "avoid_borders": {
                                  "description": "Specify which type of border crossing to avoid",
                                  "enum": [
                                    "all",
                                    "controlled",
                                    "none"
                                  ],
                                  "example": "controlled",
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_countries": {
                                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                  "example": [
                                    11,
                                    193
                                  ],
                                  "items": {
                                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                                    "example": "[11,193]",
                                    "type": "string",
                                    "x-validWhen": {
                                      "ref": "profile",
                                      "value": "driving-*"
                                    }
                                  },
                                  "type": "array",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-*"
                                  }
                                },
                                "avoid_features": {
                                  "description": "List of features to avoid. ",
                                  "example": [
                                    "highways"
                                  ],
                                  "items": {
                                    "description": "Definition of the features to be avoided.",
                                    "enum": [
                                      "highways",
                                      "tollways",
                                      "ferries",
                                      "fords",
                                      "steps"
                                    ],
                                    "example": "[\"highways\"]",
                                    "type": "string",
                                    "x-itemRestrictions": {
                                      "itemsWhen": {
                                        "cycling-*": [
                                          "ferries",
                                          "steps",
                                          "fords"
                                        ],
                                        "driving-*": [
                                          "highways",
                                          "tollways",
                                          "ferries"
                                        ],
                                        "foot-*": [
                                          "ferries",
                                          "fords",
                                          "steps"
                                        ],
                                        "wheelchair": [
                                          "ferries",
                                          "steps"
                                        ]
                                      },
                                      "ref": "profile"
                                    }
                                  },
                                  "type": "array",
                                  "x-itemRestrictions": {
                                    "itemsWhen": {
                                      "cycling-*": [
                                        "ferries",
                                        "steps",
                                        "fords"
                                      ],
                                      "driving-*": [
                                        "highways",
                                        "tollways",
                                        "ferries"
                                      ],
                                      "foot-*": [
                                        "ferries",
                                        "fords",
                                        "steps"
                                      ],
                                      "wheelchair": [
                                        "ferries",
                                        "steps"
                                      ]
                                    },
                                    "ref": "profile"
                                  }
                                },
                                "avoid_polygons": {
                                  "additionalProperties": {
                                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                    "type": "object"
                                  },
                                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                                  "properties": {
                                    "empty": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "profile_params": {
                                  "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                                  "properties": {
                                    "allow_unsuitable": {
                                      "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "restrictions": {
                                      "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                                      "properties": {
                                        "axleload": {
                                          "description": "Axleload restriction in tons.",
                                          "example": 50,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "hazmat": {
                                          "default": false,
                                          "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                          "type": "boolean",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "height": {
                                          "description": "Height restriction in metres. ",
                                          "example": 4.2,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "length": {
                                          "description": "Length restriction in metres.",
                                          "example": 8.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "maximum_incline": {
                                          "default": 6,
                                          "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "maximum_sloped_kerb": {
                                          "default": 0.6,
                                          "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "minimum_width": {
                                          "description": "Specifies the minimum width of the footway in metres.",
                                          "example": 2.5,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "smoothness_type": {
                                          "default": "good",
                                          "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                          "enum": [
                                            "excellent",
                                            "good",
                                            "intermediate",
                                            "bad",
                                            "very_bad",
                                            "horrible",
                                            "very_horrible",
                                            "impassable"
                                          ],
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "surface_type": {
                                          "default": "sett",
                                          "description": "Specifies the minimum surface type. Default is `sett`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "track_type": {
                                          "default": "grade1",
                                          "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                          "type": "string",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "wheelchair"
                                          }
                                        },
                                        "weight": {
                                          "description": "Weight restriction in tons. ",
                                          "example": 40,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        },
                                        "width": {
                                          "description": "Width restriction in metres.",
                                          "example": 5.6,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "driving-hgv"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "surface_quality_known": {
                                      "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                                      "example": true,
                                      "type": "boolean",
                                      "x-validWhen": {
                                        "ref": "profile",
                                        "value": "wheelchair"
                                      }
                                    },
                                    "weightings": {
                                      "description": "Describe additional weightings to be applied to edges on the routing.",
                                      "properties": {
                                        "green": {
                                          "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "quiet": {
                                          "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                          "example": 0.8,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "shadow": {
                                          "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                          "example": 0.4,
                                          "format": "float",
                                          "type": "number",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "foot-*"
                                          }
                                        },
                                        "steepness_difficulty": {
                                          "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                          "example": 2,
                                          "format": "int32",
                                          "type": "integer",
                                          "x-validWhen": {
                                            "ref": "profile",
                                            "value": "cycling-*"
                                          }
                                        }
                                      },
                                      "title": "Profile Weightings",
                                      "type": "object"
                                    }
                                  },
                                  "title": "Profile Parameters",
                                  "type": "object",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "valueNot": "driving-car"
                                  }
                                },
                                "round_trip": {
                                  "description": "Specifies the parameters for generating round trip routes.",
                                  "example": {
                                    "length": 10000,
                                    "points": 5
                                  },
                                  "properties": {
                                    "length": {
                                      "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                                      "example": 10000,
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "points": {
                                      "description": "The number of points to use on the route. Larger values create more circular routes.",
                                      "example": 5,
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "seed": {
                                      "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                                      "example": 1,
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "title": "Round Trip Route Options",
                                  "type": "object"
                                },
                                "vehicle_type": {
                                  "default": "hgv",
                                  "description": "Definition of the vehicle type.",
                                  "enum": [
                                    "hgv",
                                    "bus",
                                    "agricultural",
                                    "delivery",
                                    "forestry",
                                    "goods",
                                    "unknown"
                                  ],
                                  "type": "string",
                                  "x-validWhen": {
                                    "ref": "profile",
                                    "value": "driving-hgv"
                                  }
                                }
                              },
                              "title": "Route Options",
                              "type": "object"
                            },
                            "range": {
                              "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                              "example": [
                                300,
                                200
                              ],
                              "items": {
                                "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                                "format": "double",
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "range_type": {
                              "default": "time",
                              "description": "Specifies the isochrones reachability type.",
                              "enum": [
                                "time",
                                "distance"
                              ],
                              "type": "string"
                            },
                            "smoothing": {
                              "description": "Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`.\nGeneralisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon.\nIf the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used.\nNote that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used.\nThe threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`.\nTherefore, a value closer to 100 will result in a more generalised shape.\nThe polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`",
                              "example": 25,
                              "format": "double",
                              "type": "number"
                            },
                            "units": {
                              "default": "m",
                              "description": "Specifies the distance units only if `range_type` is set to distance.\nDefault: m. ",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string",
                              "x-validWhen": {
                                "ref": "range_type",
                                "value": "distance"
                              }
                            }
                          },
                          "required": [
                            "locations",
                            "range"
                          ],
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "isochrones",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns GeoJSON."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Isochrones Service",
        "tags": [
          "Isochrones Service"
        ]
      }
    },
    "/v2/matrix/{profile}": {
      "post": {
        "description": "Returns duration or distance matrix for multiple source and destination points.\nBy default a square duration matrix is returned where every point in locations is paired with each other. The result is null if a value can’t be determined.",
        "operationId": "getDefault_1",
        "parameters": [
          {
            "description": "Specifies the matrix profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The JSON body request sent to the matrix service which defines options and parameters regarding the matrix to generate.",
                "properties": {
                  "destinations": {
                    "default": [
                      "all"
                    ],
                    "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                    "items": {
                      "default": "[\"all\"]",
                      "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        9.70093,
                        48.477473
                      ],
                      [
                        9.207916,
                        49.153868
                      ],
                      [
                        37.573242,
                        55.801281
                      ],
                      [
                        115.663757,
                        38.106467
                      ]
                    ],
                    "items": {
                      "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          9.70093,
                          48.477473
                        ],
                        [
                          9.207916,
                          49.153868
                        ],
                        [
                          37.573242,
                          55.801281
                        ],
                        [
                          115.663757,
                          38.106467
                        ]
                      ],
                      "items": {
                        "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "metrics": {
                    "default": [
                      "duration"
                    ],
                    "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                    "items": {
                      "default": "[\"duration\"]",
                      "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                      "enum": [
                        "distance",
                        "duration"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "resolve_locations": {
                    "default": false,
                    "description": "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in `destinations` and `sources` will contain a `name` element that identifies the name of the closest street. Default is `false`. ",
                    "type": "boolean"
                  },
                  "sources": {
                    "default": [
                      "all"
                    ],
                    "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                    "items": {
                      "default": "[\"all\"]",
                      "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.\nDefault: m.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "metrics",
                      "value": "distance"
                    }
                  }
                },
                "required": [
                  "locations"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "description": "The Matrix Response contains one matrix for each specified `metrics` value.",
                  "properties": {
                    "destinations": {
                      "description": "The individual destinations of the matrix calculations.",
                      "items": {
                        "description": "The individual destinations of the matrix calculations.",
                        "properties": {
                          "location": {
                            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                            "example": [
                              8.678962,
                              49.40783
                            ],
                            "items": {
                              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                            "example": "Bergheimer Straße",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "resolve_locations",
                              "value": true
                            }
                          },
                          "snapped_distance": {
                            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                            "example": 1.2,
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distances": {
                      "description": "The distances of the matrix calculations.",
                      "example": [
                        [
                          0,
                          0.25
                        ],
                        [
                          0.25,
                          0
                        ]
                      ],
                      "items": {
                        "description": "The distances of the matrix calculations.",
                        "example": [
                          [
                            0,
                            0.25
                          ],
                          [
                            0.25,
                            0
                          ]
                        ],
                        "items": {
                          "description": "The distances of the matrix calculations.",
                          "format": "double",
                          "type": "number"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "durations": {
                      "description": "The durations of the matrix calculations.",
                      "example": [
                        [
                          0,
                          25
                        ],
                        [
                          25,
                          0
                        ]
                      ],
                      "items": {
                        "description": "The durations of the matrix calculations.",
                        "example": [
                          [
                            0,
                            25
                          ],
                          [
                            25,
                            0
                          ]
                        ],
                        "items": {
                          "description": "The durations of the matrix calculations.",
                          "format": "double",
                          "type": "number"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org, OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the request (as passed in by the query)",
                          "example": "request123",
                          "type": "string"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "The JSON body request sent to the matrix service which defines options and parameters regarding the matrix to generate.",
                          "properties": {
                            "destinations": {
                              "default": [
                                "all"
                              ],
                              "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                              "items": {
                                "default": "[\"all\"]",
                                "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "locations": {
                              "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                              "example": [
                                [
                                  9.70093,
                                  48.477473
                                ],
                                [
                                  9.207916,
                                  49.153868
                                ],
                                [
                                  37.573242,
                                  55.801281
                                ],
                                [
                                  115.663757,
                                  38.106467
                                ]
                              ],
                              "items": {
                                "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                                "example": [
                                  [
                                    9.70093,
                                    48.477473
                                  ],
                                  [
                                    9.207916,
                                    49.153868
                                  ],
                                  [
                                    37.573242,
                                    55.801281
                                  ],
                                  [
                                    115.663757,
                                    38.106467
                                  ]
                                ],
                                "items": {
                                  "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "metrics": {
                              "default": [
                                "duration"
                              ],
                              "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                              "items": {
                                "default": "[\"duration\"]",
                                "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                                "enum": [
                                  "distance",
                                  "duration"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "resolve_locations": {
                              "default": false,
                              "description": "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in `destinations` and `sources` will contain a `name` element that identifies the name of the closest street. Default is `false`. ",
                              "type": "boolean"
                            },
                            "sources": {
                              "default": [
                                "all"
                              ],
                              "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                              "items": {
                                "default": "[\"all\"]",
                                "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "units": {
                              "default": "m",
                              "description": "Specifies the distance unit.\nDefault: m.",
                              "enum": [
                                "m",
                                "km",
                                "mi"
                              ],
                              "type": "string",
                              "x-validWhen": {
                                "ref": "metrics",
                                "value": "distance"
                              }
                            }
                          },
                          "required": [
                            "locations"
                          ],
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "matrix",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "sources": {
                      "description": "The individual sources of the matrix calculations.",
                      "items": {
                        "description": "The individual sources of the matrix calculations.",
                        "properties": {
                          "location": {
                            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                            "example": [
                              8.678962,
                              49.40783
                            ],
                            "items": {
                              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                            "example": "Bergheimer Straße",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "resolve_locations",
                              "value": true
                            }
                          },
                          "snapped_distance": {
                            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                            "example": 1.2,
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns JSON."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Matrix Service",
        "tags": [
          "Matrix Service"
        ]
      }
    },
    "/v2/snap/{profile}": {
      "post": {
        "description": "Returns a list of points snapped to the nearest edge in the graph. In case an appropriate\nsnapping point cannot be found within the specified search radius, \"null\" is returned.\n",
        "operationId": "getDefault",
        "parameters": [
          {
            "description": "Specifies the route profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Snapping service endpoint.",
                "properties": {
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "radius": {
                    "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                    "example": 300,
                    "format": "double",
                    "type": "number"
                  }
                },
                "required": [
                  "locations",
                  "radius"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The Snapping Response contains the snapped coordinates.",
                  "properties": {
                    "locations": {
                      "description": "The snapped locations as coordinates and snapping distance.",
                      "items": {
                        "description": "The snapped locations as coordinates and snapping distance.",
                        "properties": {
                          "location": {
                            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                            "example": [
                              8.678962,
                              49.40783
                            ],
                            "items": {
                              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                            "example": "Bergheimer Straße",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "resolve_locations",
                              "value": true
                            }
                          },
                          "snapped_distance": {
                            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                            "example": 1.2,
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "Snapping service endpoint.",
                          "properties": {
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "locations": {
                              "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ]
                              ],
                              "items": {
                                "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ]
                                ],
                                "items": {
                                  "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "radius": {
                              "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                              "example": 300,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "required": [
                            "locations",
                            "radius"
                          ],
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "snap",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Standard response for successfully processed requests. Returns JSON."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Snapping Service",
        "tags": [
          "Snapping Service"
        ]
      }
    },
    "/v2/snap/{profile}/geojson": {
      "post": {
        "description": "Returns a GeoJSON FeatureCollection of points snapped to the nearest edge in the graph.\nIn case an appropriate snapping point cannot be found within the specified search radius,\nit is omitted from the features array. The features provide the 'source_id' property, to match\nthe results with the input location array (IDs start at 0).\n",
        "operationId": "getGeoJSONSnapping",
        "parameters": [
          {
            "description": "Specifies the profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Snapping service endpoint.",
                "properties": {
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "radius": {
                    "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                    "example": 300,
                    "format": "double",
                    "type": "number"
                  }
                },
                "required": [
                  "locations",
                  "radius"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The GeoJSON Snapping Response contains the snapped coordinates in GeoJSON format.",
                  "properties": {
                    "bbox": {
                      "description": "Bounding box that covers all returned snapping points",
                      "example": [
                        49.414057,
                        8.680894,
                        49.420514,
                        8.690123
                      ],
                      "items": {
                        "description": "Bounding box that covers all returned snapping points",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "features": {
                      "description": "Information about the service and request",
                      "items": {
                        "description": "Information about the service and request",
                        "properties": {
                          "geometry": {
                            "description": "Feature geometry",
                            "properties": {
                              "coordinates": {
                                "description": "Lon/Lat coordinates of the snapped location",
                                "example": [
                                  8.681495,
                                  49.41461
                                ],
                                "items": {
                                  "description": "Lon/Lat coordinates of the snapped location",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "Point",
                                "description": "GeoJSON type",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "properties": {
                            "description": "Feature properties",
                            "properties": {
                              "name": {
                                "description": "\"Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                                "example": "Gerhart-Hauptmann-Straße",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "resolve_locations",
                                  "value": true
                                }
                              },
                              "snapped_distance": {
                                "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                                "example": 0.02,
                                "format": "double",
                                "type": "number"
                              },
                              "source_id": {
                                "description": "Index of the requested location",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "Feature",
                            "description": "GeoJSON type",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "Snapping service endpoint.",
                          "properties": {
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "locations": {
                              "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ]
                              ],
                              "items": {
                                "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ]
                                ],
                                "items": {
                                  "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "radius": {
                              "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                              "example": 300,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "required": [
                            "locations",
                            "radius"
                          ],
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "snap",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "FeatureCollection",
                      "description": "GeoJSON type",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "GeoJSON Response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Snapping Service GeoJSON",
        "tags": [
          "Snapping Service"
        ]
      }
    },
    "/v2/snap/{profile}/json": {
      "post": {
        "description": "Returns a list of points snapped to the nearest edge in the graph. In case an appropriate\nsnapping point cannot be found within the specified search radius, \"null\" is returned.\n",
        "operationId": "getJsonSnapping",
        "parameters": [
          {
            "description": "Specifies the profile.",
            "example": "driving-car",
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "enum": [
                "driving-car",
                "driving-hgv",
                "cycling-regular",
                "cycling-road",
                "cycling-mountain",
                "cycling-electric",
                "foot-walking",
                "foot-hiking",
                "wheelchair",
                "public-transport"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Snapping service endpoint.",
                "properties": {
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "radius": {
                    "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                    "example": 300,
                    "format": "double",
                    "type": "number"
                  }
                },
                "required": [
                  "locations",
                  "radius"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The Snapping Response contains the snapped coordinates.",
                  "properties": {
                    "locations": {
                      "description": "The snapped locations as coordinates and snapping distance.",
                      "items": {
                        "description": "The snapped locations as coordinates and snapping distance.",
                        "properties": {
                          "location": {
                            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                            "example": [
                              8.678962,
                              49.40783
                            ],
                            "items": {
                              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                            "example": "Bergheimer Straße",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "resolve_locations",
                              "value": true
                            }
                          },
                          "snapped_distance": {
                            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                            "example": 1.2,
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Information about the request",
                      "properties": {
                        "attribution": {
                          "description": "Copyright and attribution information",
                          "example": "openrouteservice.org | OpenStreetMap contributors",
                          "type": "string"
                        },
                        "engine": {
                          "description": "Information about the openrouteservice engine used",
                          "properties": {
                            "build_date": {
                              "description": "The date that the service was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "graph_date": {
                              "description": "The date that the graph data was last updated",
                              "example": "2019-02-07T14:28:11Z",
                              "type": "string"
                            },
                            "version": {
                              "description": "The backend version of the openrouteservice that was queried",
                              "example": "8.0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "osm_file_md5_hash": {
                          "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                          "example": "c0327ba6",
                          "type": "string"
                        },
                        "query": {
                          "description": "Snapping service endpoint.",
                          "properties": {
                            "id": {
                              "description": "Arbitrary identification string of the request reflected in the meta information.",
                              "example": "my_request",
                              "type": "string"
                            },
                            "locations": {
                              "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                              "example": [
                                [
                                  8.681495,
                                  49.41461
                                ],
                                [
                                  8.686507,
                                  49.41943
                                ]
                              ],
                              "items": {
                                "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                                "example": [
                                  [
                                    8.681495,
                                    49.41461
                                  ],
                                  [
                                    8.686507,
                                    49.41943
                                  ]
                                ],
                                "items": {
                                  "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                                  "format": "double",
                                  "type": "number"
                                },
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "radius": {
                              "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                              "example": 300,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "required": [
                            "locations",
                            "radius"
                          ],
                          "type": "object"
                        },
                        "service": {
                          "description": "The service that was requested",
                          "example": "snap",
                          "type": "string"
                        },
                        "system_message": {
                          "description": "System message",
                          "example": "A message string configured in the service",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Time that the request was made (UNIX Epoch time)",
                          "example": 1549549847974,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "JSON Response."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is incorrect and therefore can not be processed."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An element could not be found. If possible, a more detailed error code is provided."
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "An unexpected error was encountered and a more detailed error code is provided."
          },
          "501": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "The server is currently unavailable due to overload or maintenance."
          }
        },
        "summary": "Snapping Service JSON",
        "tags": [
          "Snapping Service"
        ]
      }
    },
    "/v2/status": {
      "get": {
        "operationId": "fetchHealth",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Status service"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "EngineInfo": {
        "description": "Information about the openrouteservice engine used",
        "properties": {
          "build_date": {
            "description": "The date that the service was last updated",
            "example": "2019-02-07T14:28:11Z",
            "type": "string"
          },
          "graph_date": {
            "description": "The date that the graph data was last updated",
            "example": "2019-02-07T14:28:11Z",
            "type": "string"
          },
          "version": {
            "description": "The backend version of the openrouteservice that was queried",
            "example": "8.0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoJSONFeature": {
        "description": "Information about the service and request",
        "properties": {
          "geometry": {
            "description": "Feature geometry",
            "properties": {
              "coordinates": {
                "description": "Lon/Lat coordinates of the snapped location",
                "example": [
                  8.681495,
                  49.41461
                ],
                "items": {
                  "description": "Lon/Lat coordinates of the snapped location",
                  "format": "double",
                  "type": "number"
                },
                "type": "array"
              },
              "type": {
                "default": "Point",
                "description": "GeoJSON type",
                "type": "string"
              }
            },
            "type": "object"
          },
          "properties": {
            "description": "Feature properties",
            "properties": {
              "name": {
                "description": "\"Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                "example": "Gerhart-Hauptmann-Straße",
                "type": "string",
                "x-validWhen": {
                  "ref": "resolve_locations",
                  "value": true
                }
              },
              "snapped_distance": {
                "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                "example": 0.02,
                "format": "double",
                "type": "number"
              },
              "source_id": {
                "description": "Index of the requested location",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "Feature",
            "description": "GeoJSON type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoJSONFeatureProperties": {
        "description": "Feature properties",
        "properties": {
          "name": {
            "description": "\"Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
            "example": "Gerhart-Hauptmann-Straße",
            "type": "string",
            "x-validWhen": {
              "ref": "resolve_locations",
              "value": true
            }
          },
          "snapped_distance": {
            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
            "example": 0.02,
            "format": "double",
            "type": "number"
          },
          "source_id": {
            "description": "Index of the requested location",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GeoJSONIsochroneBase": {
        "properties": {
          "geometry": {
            "additionalProperties": {
              "additionalProperties": {
                "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                "type": "object"
              },
              "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
              "properties": {
                "empty": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoJSONIsochronesResponse": {
        "properties": {
          "bbox": {
            "description": "Bounding box that covers all returned isochrones",
            "example": [
              49.414057,
              8.680894,
              49.420514,
              8.690123
            ],
            "items": {
              "description": "Bounding box that covers all returned isochrones",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "features": {
            "items": {
              "properties": {
                "geometry": {
                  "additionalProperties": {
                    "additionalProperties": {
                      "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                      "type": "object"
                    },
                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                    "properties": {
                      "empty": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Information about the request",
            "properties": {
              "attribution": {
                "description": "Copyright and attribution information",
                "example": "openrouteservice.org | OpenStreetMap contributors",
                "type": "string"
              },
              "engine": {
                "description": "Information about the openrouteservice engine used",
                "properties": {
                  "build_date": {
                    "description": "The date that the service was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "graph_date": {
                    "description": "The date that the graph data was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "version": {
                    "description": "The backend version of the openrouteservice that was queried",
                    "example": "8.0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the request (as passed in by the query)",
                "example": "request123",
                "type": "string"
              },
              "osm_file_md5_hash": {
                "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                "example": "c0327ba6",
                "type": "string"
              },
              "query": {
                "description": "The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate.",
                "properties": {
                  "area_units": {
                    "default": "m",
                    "description": "Specifies the area unit.\nDefault: m. ",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "attributes",
                      "value": "area"
                    }
                  },
                  "attributes": {
                    "description": "List of isochrones attributes",
                    "example": [
                      "area"
                    ],
                    "items": {
                      "description": "List of isochrones attributes",
                      "enum": [
                        "area",
                        "reachfactor",
                        "total_pop"
                      ],
                      "example": "[\"area\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "intersections": {
                    "default": false,
                    "description": "Specifies whether to return intersecting polygons. ",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.",
                    "example": 30,
                    "format": "double",
                    "type": "number"
                  },
                  "location_type": {
                    "default": "start",
                    "description": "`start` treats the location(s) as starting point, `destination` as goal.",
                    "enum": [
                      "start",
                      "destination"
                    ],
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "range": {
                    "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                    "example": [
                      300,
                      200
                    ],
                    "items": {
                      "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "range_type": {
                    "default": "time",
                    "description": "Specifies the isochrones reachability type.",
                    "enum": [
                      "time",
                      "distance"
                    ],
                    "type": "string"
                  },
                  "smoothing": {
                    "description": "Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`.\nGeneralisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon.\nIf the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used.\nNote that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used.\nThe threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`.\nTherefore, a value closer to 100 will result in a more generalised shape.\nThe polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`",
                    "example": 25,
                    "format": "double",
                    "type": "number"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance units only if `range_type` is set to distance.\nDefault: m. ",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "range_type",
                      "value": "distance"
                    }
                  }
                },
                "required": [
                  "locations",
                  "range"
                ],
                "type": "object"
              },
              "service": {
                "description": "The service that was requested",
                "example": "isochrones",
                "type": "string"
              },
              "system_message": {
                "description": "System message",
                "example": "A message string configured in the service",
                "type": "string"
              },
              "timestamp": {
                "description": "Time that the request was made (UNIX Epoch time)",
                "example": 1549549847974,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoJSONPointGeometry": {
        "description": "Feature geometry",
        "properties": {
          "coordinates": {
            "description": "Lon/Lat coordinates of the snapped location",
            "example": [
              8.681495,
              49.41461
            ],
            "items": {
              "description": "Lon/Lat coordinates of the snapped location",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "type": {
            "default": "Point",
            "description": "GeoJSON type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoJSONRouteResponse": {
        "properties": {
          "bbox": {
            "description": "Bounding box that covers all returned routes",
            "example": [
              49.414057,
              8.680894,
              49.420514,
              8.690123
            ],
            "items": {
              "description": "Bounding box that covers all returned routes",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "features": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Information about the request",
            "properties": {
              "attribution": {
                "description": "Copyright and attribution information",
                "example": "openrouteservice.org | OpenStreetMap contributors",
                "type": "string"
              },
              "engine": {
                "description": "Information about the openrouteservice engine used",
                "properties": {
                  "build_date": {
                    "description": "The date that the service was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "graph_date": {
                    "description": "The date that the graph data was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "version": {
                    "description": "The backend version of the openrouteservice that was queried",
                    "example": "8.0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the request (as passed in by the query)",
                "example": "request123",
                "type": "string"
              },
              "osm_file_md5_hash": {
                "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                "example": "c0327ba6",
                "type": "string"
              },
              "query": {
                "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                "properties": {
                  "alternative_routes": {
                    "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                    "example": {
                      "target_count": 2,
                      "weight_factor": 1.6
                    },
                    "properties": {
                      "share_factor": {
                        "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                        "example": 0.6,
                        "format": "double",
                        "type": "number"
                      },
                      "target_count": {
                        "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "weight_factor": {
                        "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                        "example": 1.4,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "title": "Alternative Routes",
                    "type": "object"
                  },
                  "attributes": {
                    "description": "List of route attributes",
                    "example": [
                      "avgspeed",
                      "percentage"
                    ],
                    "items": {
                      "description": "List of route attributes",
                      "enum": [
                        "avgspeed",
                        "detourfactor",
                        "percentage"
                      ],
                      "example": "[\"avgspeed\",\"percentage\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "bearings": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "example": [
                      [
                        30,
                        20
                      ],
                      [],
                      [
                        40,
                        20
                      ]
                    ],
                    "items": {
                      "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                      "example": [
                        [
                          30,
                          20
                        ],
                        [],
                        [
                          40,
                          20
                        ]
                      ],
                      "items": {
                        "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      },
                      "type": "array",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "cycling-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "continue_straight": {
                    "default": false,
                    "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                    "type": "boolean"
                  },
                  "coordinates": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ],
                      [
                        8.687872,
                        49.420318
                      ]
                    ],
                    "items": {
                      "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ],
                        [
                          8.687872,
                          49.420318
                        ]
                      ],
                      "items": {
                        "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "elevation": {
                    "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                    "example": false,
                    "type": "boolean"
                  },
                  "extra_info": {
                    "description": "The extra info items to include in the response",
                    "example": [
                      "waytype",
                      "surface"
                    ],
                    "items": {
                      "description": "Specify which extra info items to include in the response",
                      "enum": [
                        "steepness",
                        "suitability",
                        "surface",
                        "waycategory",
                        "waytype",
                        "tollways",
                        "traildifficulty",
                        "osmid",
                        "roadaccessrestrictions",
                        "countryinfo",
                        "green",
                        "noise",
                        "csv",
                        "shadow"
                      ],
                      "example": "[\"waytype\",\"surface\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "geometry": {
                    "default": true,
                    "description": "Specifies whether to return geometry. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "format",
                      "value": [
                        "json"
                      ]
                    }
                  },
                  "geometry_simplify": {
                    "default": false,
                    "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "ignore_transfers": {
                    "default": false,
                    "description": "Specifies if transfers as criterion should be ignored.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "instructions": {
                    "default": true,
                    "description": "Specifies whether to return instructions.",
                    "type": "boolean"
                  },
                  "instructions_format": {
                    "default": "text",
                    "description": "Select html for more verbose instructions.",
                    "enum": [
                      "html",
                      "text"
                    ],
                    "type": "string"
                  },
                  "language": {
                    "default": "en",
                    "description": "Language for the route instructions.",
                    "enum": [
                      "cs",
                      "cs-cz",
                      "de",
                      "de-de",
                      "en",
                      "en-us",
                      "eo",
                      "eo-eo",
                      "es",
                      "es-es",
                      "fr",
                      "fr-fr",
                      "gr",
                      "gr-gr",
                      "he",
                      "he-il",
                      "hu",
                      "hu-hu",
                      "id",
                      "id-id",
                      "it",
                      "it-it",
                      "ja",
                      "ja-jp",
                      "ne",
                      "ne-np",
                      "nl",
                      "nl-nl",
                      "nb",
                      "nb-no",
                      "pl",
                      "pl-pl",
                      "pt",
                      "pt-pt",
                      "ro",
                      "ro-ro",
                      "ru",
                      "ru-ru",
                      "tr",
                      "tr-tr",
                      "zh",
                      "zh-cn"
                    ],
                    "type": "string"
                  },
                  "maneuvers": {
                    "default": false,
                    "description": "Specifies whether the maneuver object is included into the step object or not. ",
                    "type": "boolean"
                  },
                  "maximum_speed": {
                    "description": "The maximum speed specified by user.",
                    "example": 90,
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "preference": {
                    "default": "recommended",
                    "description": "Specifies the route preference",
                    "enum": [
                      "fastest",
                      "shortest",
                      "recommended"
                    ],
                    "type": "string"
                  },
                  "radiuses": {
                    "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                    "example": [
                      200,
                      -1,
                      30
                    ],
                    "items": {
                      "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "roundabout_exits": {
                    "default": false,
                    "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                    "type": "boolean"
                  },
                  "schedule": {
                    "default": false,
                    "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "schedule_duration": {
                    "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "schedule_rows": {
                    "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                    "example": 3,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "skip_segments": {
                    "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                    "example": [
                      2,
                      4
                    ],
                    "items": {
                      "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "suppress_warnings": {
                    "description": "Suppress warning messages in the response",
                    "example": false,
                    "type": "boolean"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string"
                  },
                  "walking_time": {
                    "default": "PT15M",
                    "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  }
                },
                "required": [
                  "coordinates"
                ],
                "title": "Directions Service",
                "type": "object"
              },
              "service": {
                "description": "The service that was requested",
                "example": "routing",
                "type": "string"
              },
              "system_message": {
                "description": "System message",
                "example": "A message string configured in the service",
                "type": "string"
              },
              "timestamp": {
                "description": "Time that the request was made (UNIX Epoch time)",
                "example": 1549549847974,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoJSONSnappingResponse": {
        "description": "The GeoJSON Snapping Response contains the snapped coordinates in GeoJSON format.",
        "properties": {
          "bbox": {
            "description": "Bounding box that covers all returned snapping points",
            "example": [
              49.414057,
              8.680894,
              49.420514,
              8.690123
            ],
            "items": {
              "description": "Bounding box that covers all returned snapping points",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "features": {
            "description": "Information about the service and request",
            "items": {
              "description": "Information about the service and request",
              "properties": {
                "geometry": {
                  "description": "Feature geometry",
                  "properties": {
                    "coordinates": {
                      "description": "Lon/Lat coordinates of the snapped location",
                      "example": [
                        8.681495,
                        49.41461
                      ],
                      "items": {
                        "description": "Lon/Lat coordinates of the snapped location",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": {
                      "default": "Point",
                      "description": "GeoJSON type",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "properties": {
                  "description": "Feature properties",
                  "properties": {
                    "name": {
                      "description": "\"Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                      "example": "Gerhart-Hauptmann-Straße",
                      "type": "string",
                      "x-validWhen": {
                        "ref": "resolve_locations",
                        "value": true
                      }
                    },
                    "snapped_distance": {
                      "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                      "example": 0.02,
                      "format": "double",
                      "type": "number"
                    },
                    "source_id": {
                      "description": "Index of the requested location",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "GeoJSON type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Information about the request",
            "properties": {
              "attribution": {
                "description": "Copyright and attribution information",
                "example": "openrouteservice.org | OpenStreetMap contributors",
                "type": "string"
              },
              "engine": {
                "description": "Information about the openrouteservice engine used",
                "properties": {
                  "build_date": {
                    "description": "The date that the service was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "graph_date": {
                    "description": "The date that the graph data was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "version": {
                    "description": "The backend version of the openrouteservice that was queried",
                    "example": "8.0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "osm_file_md5_hash": {
                "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                "example": "c0327ba6",
                "type": "string"
              },
              "query": {
                "description": "Snapping service endpoint.",
                "properties": {
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "radius": {
                    "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                    "example": 300,
                    "format": "double",
                    "type": "number"
                  }
                },
                "required": [
                  "locations",
                  "radius"
                ],
                "type": "object"
              },
              "service": {
                "description": "The service that was requested",
                "example": "snap",
                "type": "string"
              },
              "system_message": {
                "description": "System message",
                "example": "A message string configured in the service",
                "type": "string"
              },
              "timestamp": {
                "description": "Time that the request was made (UNIX Epoch time)",
                "example": 1549549847974,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "FeatureCollection",
            "description": "GeoJSON type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IsochronesRequest": {
        "description": "The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate.",
        "properties": {
          "area_units": {
            "default": "m",
            "description": "Specifies the area unit.\nDefault: m. ",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "type": "string",
            "x-validWhen": {
              "ref": "attributes",
              "value": "area"
            }
          },
          "attributes": {
            "description": "List of isochrones attributes",
            "example": [
              "area"
            ],
            "items": {
              "description": "List of isochrones attributes",
              "enum": [
                "area",
                "reachfactor",
                "total_pop"
              ],
              "example": "[\"area\"]",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request",
            "type": "string"
          },
          "intersections": {
            "default": false,
            "description": "Specifies whether to return intersecting polygons. ",
            "type": "boolean"
          },
          "interval": {
            "description": "Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.",
            "example": 30,
            "format": "double",
            "type": "number"
          },
          "location_type": {
            "default": "start",
            "description": "`start` treats the location(s) as starting point, `destination` as goal.",
            "enum": [
              "start",
              "destination"
            ],
            "type": "string"
          },
          "locations": {
            "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
            "example": [
              [
                8.681495,
                49.41461
              ],
              [
                8.686507,
                49.41943
              ]
            ],
            "items": {
              "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
              "example": [
                [
                  8.681495,
                  49.41461
                ],
                [
                  8.686507,
                  49.41943
                ]
              ],
              "items": {
                "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "options": {
            "description": "Advanced options for routing",
            "example": {
              "avoid_borders": "controlled"
            },
            "properties": {
              "avoid_borders": {
                "description": "Specify which type of border crossing to avoid",
                "enum": [
                  "all",
                  "controlled",
                  "none"
                ],
                "example": "controlled",
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-*"
                }
              },
              "avoid_countries": {
                "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                "example": [
                  11,
                  193
                ],
                "items": {
                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                  "example": "[11,193]",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "profile",
                    "value": "driving-*"
                  }
                },
                "type": "array",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-*"
                }
              },
              "avoid_features": {
                "description": "List of features to avoid. ",
                "example": [
                  "highways"
                ],
                "items": {
                  "description": "Definition of the features to be avoided.",
                  "enum": [
                    "highways",
                    "tollways",
                    "ferries",
                    "fords",
                    "steps"
                  ],
                  "example": "[\"highways\"]",
                  "type": "string",
                  "x-itemRestrictions": {
                    "itemsWhen": {
                      "cycling-*": [
                        "ferries",
                        "steps",
                        "fords"
                      ],
                      "driving-*": [
                        "highways",
                        "tollways",
                        "ferries"
                      ],
                      "foot-*": [
                        "ferries",
                        "fords",
                        "steps"
                      ],
                      "wheelchair": [
                        "ferries",
                        "steps"
                      ]
                    },
                    "ref": "profile"
                  }
                },
                "type": "array",
                "x-itemRestrictions": {
                  "itemsWhen": {
                    "cycling-*": [
                      "ferries",
                      "steps",
                      "fords"
                    ],
                    "driving-*": [
                      "highways",
                      "tollways",
                      "ferries"
                    ],
                    "foot-*": [
                      "ferries",
                      "fords",
                      "steps"
                    ],
                    "wheelchair": [
                      "ferries",
                      "steps"
                    ]
                  },
                  "ref": "profile"
                }
              },
              "avoid_polygons": {
                "additionalProperties": {
                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                  "type": "object"
                },
                "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                "properties": {
                  "empty": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "profile_params": {
                "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                "properties": {
                  "allow_unsuitable": {
                    "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "restrictions": {
                    "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                    "properties": {
                      "axleload": {
                        "description": "Axleload restriction in tons.",
                        "example": 50,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "hazmat": {
                        "default": false,
                        "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                        "type": "boolean",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "height": {
                        "description": "Height restriction in metres. ",
                        "example": 4.2,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "length": {
                        "description": "Length restriction in metres.",
                        "example": 8.4,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "maximum_incline": {
                        "default": 6,
                        "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                        "format": "int32",
                        "type": "integer",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "maximum_sloped_kerb": {
                        "default": 0.6,
                        "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "minimum_width": {
                        "description": "Specifies the minimum width of the footway in metres.",
                        "example": 2.5,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "smoothness_type": {
                        "default": "good",
                        "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                        "enum": [
                          "excellent",
                          "good",
                          "intermediate",
                          "bad",
                          "very_bad",
                          "horrible",
                          "very_horrible",
                          "impassable"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "surface_type": {
                        "default": "sett",
                        "description": "Specifies the minimum surface type. Default is `sett`. ",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "track_type": {
                        "default": "grade1",
                        "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "weight": {
                        "description": "Weight restriction in tons. ",
                        "example": 40,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "width": {
                        "description": "Width restriction in metres.",
                        "example": 5.6,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "surface_quality_known": {
                    "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "weightings": {
                    "description": "Describe additional weightings to be applied to edges on the routing.",
                    "properties": {
                      "green": {
                        "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                        "example": 0.4,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "foot-*"
                        }
                      },
                      "quiet": {
                        "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                        "example": 0.8,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "foot-*"
                        }
                      },
                      "shadow": {
                        "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                        "example": 0.4,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "foot-*"
                        }
                      },
                      "steepness_difficulty": {
                        "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      }
                    },
                    "title": "Profile Weightings",
                    "type": "object"
                  }
                },
                "title": "Profile Parameters",
                "type": "object",
                "x-validWhen": {
                  "ref": "profile",
                  "valueNot": "driving-car"
                }
              },
              "round_trip": {
                "description": "Specifies the parameters for generating round trip routes.",
                "example": {
                  "length": 10000,
                  "points": 5
                },
                "properties": {
                  "length": {
                    "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                    "example": 10000,
                    "format": "float",
                    "type": "number"
                  },
                  "points": {
                    "description": "The number of points to use on the route. Larger values create more circular routes.",
                    "example": 5,
                    "format": "int32",
                    "type": "integer"
                  },
                  "seed": {
                    "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                    "example": 1,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "title": "Round Trip Route Options",
                "type": "object"
              },
              "vehicle_type": {
                "default": "hgv",
                "description": "Definition of the vehicle type.",
                "enum": [
                  "hgv",
                  "bus",
                  "agricultural",
                  "delivery",
                  "forestry",
                  "goods",
                  "unknown"
                ],
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              }
            },
            "title": "Route Options",
            "type": "object"
          },
          "range": {
            "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
            "example": [
              300,
              200
            ],
            "items": {
              "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "range_type": {
            "default": "time",
            "description": "Specifies the isochrones reachability type.",
            "enum": [
              "time",
              "distance"
            ],
            "type": "string"
          },
          "smoothing": {
            "description": "Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`.\nGeneralisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon.\nIf the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used.\nNote that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used.\nThe threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`.\nTherefore, a value closer to 100 will result in a more generalised shape.\nThe polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`",
            "example": 25,
            "format": "double",
            "type": "number"
          },
          "units": {
            "default": "m",
            "description": "Specifies the distance units only if `range_type` is set to distance.\nDefault: m. ",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "type": "string",
            "x-validWhen": {
              "ref": "range_type",
              "value": "distance"
            }
          }
        },
        "required": [
          "locations",
          "range"
        ],
        "type": "object"
      },
      "IsochronesResponseInfo": {
        "description": "Information about the request",
        "properties": {
          "attribution": {
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org | OpenStreetMap contributors",
            "type": "string"
          },
          "engine": {
            "description": "Information about the openrouteservice engine used",
            "properties": {
              "build_date": {
                "description": "The date that the service was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "graph_date": {
                "description": "The date that the graph data was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "version": {
                "description": "The backend version of the openrouteservice that was queried",
                "example": "8.0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the request (as passed in by the query)",
            "example": "request123",
            "type": "string"
          },
          "osm_file_md5_hash": {
            "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
            "example": "c0327ba6",
            "type": "string"
          },
          "query": {
            "description": "The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate.",
            "properties": {
              "area_units": {
                "default": "m",
                "description": "Specifies the area unit.\nDefault: m. ",
                "enum": [
                  "m",
                  "km",
                  "mi"
                ],
                "type": "string",
                "x-validWhen": {
                  "ref": "attributes",
                  "value": "area"
                }
              },
              "attributes": {
                "description": "List of isochrones attributes",
                "example": [
                  "area"
                ],
                "items": {
                  "description": "List of isochrones attributes",
                  "enum": [
                    "area",
                    "reachfactor",
                    "total_pop"
                  ],
                  "example": "[\"area\"]",
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Arbitrary identification string of the request reflected in the meta information.",
                "example": "my_request",
                "type": "string"
              },
              "intersections": {
                "default": false,
                "description": "Specifies whether to return intersecting polygons. ",
                "type": "boolean"
              },
              "interval": {
                "description": "Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.",
                "example": 30,
                "format": "double",
                "type": "number"
              },
              "location_type": {
                "default": "start",
                "description": "`start` treats the location(s) as starting point, `destination` as goal.",
                "enum": [
                  "start",
                  "destination"
                ],
                "type": "string"
              },
              "locations": {
                "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                "example": [
                  [
                    8.681495,
                    49.41461
                  ],
                  [
                    8.686507,
                    49.41943
                  ]
                ],
                "items": {
                  "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                  "example": [
                    [
                      8.681495,
                      49.41461
                    ],
                    [
                      8.686507,
                      49.41943
                    ]
                  ],
                  "items": {
                    "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              "options": {
                "description": "Advanced options for routing",
                "example": {
                  "avoid_borders": "controlled"
                },
                "properties": {
                  "avoid_borders": {
                    "description": "Specify which type of border crossing to avoid",
                    "enum": [
                      "all",
                      "controlled",
                      "none"
                    ],
                    "example": "controlled",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "avoid_countries": {
                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                    "example": [
                      11,
                      193
                    ],
                    "items": {
                      "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                      "example": "[11,193]",
                      "type": "string",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "driving-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "avoid_features": {
                    "description": "List of features to avoid. ",
                    "example": [
                      "highways"
                    ],
                    "items": {
                      "description": "Definition of the features to be avoided.",
                      "enum": [
                        "highways",
                        "tollways",
                        "ferries",
                        "fords",
                        "steps"
                      ],
                      "example": "[\"highways\"]",
                      "type": "string",
                      "x-itemRestrictions": {
                        "itemsWhen": {
                          "cycling-*": [
                            "ferries",
                            "steps",
                            "fords"
                          ],
                          "driving-*": [
                            "highways",
                            "tollways",
                            "ferries"
                          ],
                          "foot-*": [
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "wheelchair": [
                            "ferries",
                            "steps"
                          ]
                        },
                        "ref": "profile"
                      }
                    },
                    "type": "array",
                    "x-itemRestrictions": {
                      "itemsWhen": {
                        "cycling-*": [
                          "ferries",
                          "steps",
                          "fords"
                        ],
                        "driving-*": [
                          "highways",
                          "tollways",
                          "ferries"
                        ],
                        "foot-*": [
                          "ferries",
                          "fords",
                          "steps"
                        ],
                        "wheelchair": [
                          "ferries",
                          "steps"
                        ]
                      },
                      "ref": "profile"
                    }
                  },
                  "avoid_polygons": {
                    "additionalProperties": {
                      "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                      "type": "object"
                    },
                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                    "properties": {
                      "empty": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "profile_params": {
                    "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                    "properties": {
                      "allow_unsuitable": {
                        "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                        "example": true,
                        "type": "boolean",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "restrictions": {
                        "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                        "properties": {
                          "axleload": {
                            "description": "Axleload restriction in tons.",
                            "example": 50,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "hazmat": {
                            "default": false,
                            "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "height": {
                            "description": "Height restriction in metres. ",
                            "example": 4.2,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "length": {
                            "description": "Length restriction in metres.",
                            "example": 8.4,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "maximum_incline": {
                            "default": 6,
                            "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                            "format": "int32",
                            "type": "integer",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "maximum_sloped_kerb": {
                            "default": 0.6,
                            "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "minimum_width": {
                            "description": "Specifies the minimum width of the footway in metres.",
                            "example": 2.5,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "smoothness_type": {
                            "default": "good",
                            "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                            "enum": [
                              "excellent",
                              "good",
                              "intermediate",
                              "bad",
                              "very_bad",
                              "horrible",
                              "very_horrible",
                              "impassable"
                            ],
                            "type": "string",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "surface_type": {
                            "default": "sett",
                            "description": "Specifies the minimum surface type. Default is `sett`. ",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "track_type": {
                            "default": "grade1",
                            "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weight": {
                            "description": "Weight restriction in tons. ",
                            "example": 40,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "width": {
                            "description": "Width restriction in metres.",
                            "example": 5.6,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "surface_quality_known": {
                        "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                        "example": true,
                        "type": "boolean",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "weightings": {
                        "description": "Describe additional weightings to be applied to edges on the routing.",
                        "properties": {
                          "green": {
                            "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                            "example": 0.4,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "foot-*"
                            }
                          },
                          "quiet": {
                            "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                            "example": 0.8,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "foot-*"
                            }
                          },
                          "shadow": {
                            "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                            "example": 0.4,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "foot-*"
                            }
                          },
                          "steepness_difficulty": {
                            "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                            "example": 2,
                            "format": "int32",
                            "type": "integer",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "cycling-*"
                            }
                          }
                        },
                        "title": "Profile Weightings",
                        "type": "object"
                      }
                    },
                    "title": "Profile Parameters",
                    "type": "object",
                    "x-validWhen": {
                      "ref": "profile",
                      "valueNot": "driving-car"
                    }
                  },
                  "round_trip": {
                    "description": "Specifies the parameters for generating round trip routes.",
                    "example": {
                      "length": 10000,
                      "points": 5
                    },
                    "properties": {
                      "length": {
                        "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                        "example": 10000,
                        "format": "float",
                        "type": "number"
                      },
                      "points": {
                        "description": "The number of points to use on the route. Larger values create more circular routes.",
                        "example": 5,
                        "format": "int32",
                        "type": "integer"
                      },
                      "seed": {
                        "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "title": "Round Trip Route Options",
                    "type": "object"
                  },
                  "vehicle_type": {
                    "default": "hgv",
                    "description": "Definition of the vehicle type.",
                    "enum": [
                      "hgv",
                      "bus",
                      "agricultural",
                      "delivery",
                      "forestry",
                      "goods",
                      "unknown"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  }
                },
                "title": "Route Options",
                "type": "object"
              },
              "range": {
                "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                "example": [
                  300,
                  200
                ],
                "items": {
                  "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
                  "format": "double",
                  "type": "number"
                },
                "type": "array"
              },
              "range_type": {
                "default": "time",
                "description": "Specifies the isochrones reachability type.",
                "enum": [
                  "time",
                  "distance"
                ],
                "type": "string"
              },
              "smoothing": {
                "description": "Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`.\nGeneralisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon.\nIf the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used.\nNote that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used.\nThe threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`.\nTherefore, a value closer to 100 will result in a more generalised shape.\nThe polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`",
                "example": 25,
                "format": "double",
                "type": "number"
              },
              "units": {
                "default": "m",
                "description": "Specifies the distance units only if `range_type` is set to distance.\nDefault: m. ",
                "enum": [
                  "m",
                  "km",
                  "mi"
                ],
                "type": "string",
                "x-validWhen": {
                  "ref": "range_type",
                  "value": "distance"
                }
              }
            },
            "required": [
              "locations",
              "range"
            ],
            "type": "object"
          },
          "service": {
            "description": "The service that was requested",
            "example": "isochrones",
            "type": "string"
          },
          "system_message": {
            "description": "System message",
            "example": "A message string configured in the service",
            "type": "string"
          },
          "timestamp": {
            "description": "Time that the request was made (UNIX Epoch time)",
            "example": 1549549847974,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JSON2DDestinations": {
        "description": "The individual destinations of the matrix calculations.",
        "properties": {
          "location": {
            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
            "example": [
              8.678962,
              49.40783
            ],
            "items": {
              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
            "example": "Bergheimer Straße",
            "type": "string",
            "x-validWhen": {
              "ref": "resolve_locations",
              "value": true
            }
          },
          "snapped_distance": {
            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
            "example": 1.2,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "JSON2DSources": {
        "description": "The individual sources of the matrix calculations.",
        "properties": {
          "location": {
            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
            "example": [
              8.678962,
              49.40783
            ],
            "items": {
              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
            "example": "Bergheimer Straße",
            "type": "string",
            "x-validWhen": {
              "ref": "resolve_locations",
              "value": true
            }
          },
          "snapped_distance": {
            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
            "example": 1.2,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "JSONExtra": {
        "description": "An object representing one of the extra info items requested",
        "properties": {
          "summary": {
            "description": "List representing the summary of the extra info items.",
            "items": {
              "description": "List representing the summary of the extra info items.",
              "properties": {
                "amount": {
                  "description": "Category percentage of the entire route.",
                  "example": 23.8,
                  "format": "double",
                  "type": "number"
                },
                "distance": {
                  "description": "Cumulative distance of this value.",
                  "example": 123.1,
                  "format": "double",
                  "type": "number"
                },
                "value": {
                  "description": "[Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.",
                  "example": 5,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "values": {
            "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
            "example": [
              [
                0,
                3,
                26
              ],
              [
                3,
                10,
                12
              ]
            ],
            "items": {
              "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
              "example": [
                [
                  0,
                  3,
                  26
                ],
                [
                  3,
                  10,
                  12
                ]
              ],
              "items": {
                "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JSONExtraSummary": {
        "description": "List representing the summary of the extra info items.",
        "properties": {
          "amount": {
            "description": "Category percentage of the entire route.",
            "example": 23.8,
            "format": "double",
            "type": "number"
          },
          "distance": {
            "description": "Cumulative distance of this value.",
            "example": 123.1,
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "[Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.",
            "example": 5,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "JSONIndividualRouteResponse": {
        "description": "An individual JSON based route created by the service",
        "properties": {
          "arrival": {
            "description": "Arrival date and time",
            "example": "2020-01-31T13:15:00+01:00",
            "format": "date-time",
            "type": "string",
            "x-validWhen": {
              "ref": "arrival",
              "value": true
            }
          },
          "bbox": {
            "description": "A bounding box which contains the entire route",
            "example": [
              49.414057,
              8.680894,
              49.420514,
              8.690123
            ],
            "items": {
              "description": "A bounding box which contains the entire route",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "departure": {
            "description": "Departure date and time",
            "example": "2020-01-31T12:45:00+01:00",
            "format": "date-time",
            "type": "string",
            "x-validWhen": {
              "ref": "departure",
              "value": true
            }
          },
          "extras": {
            "additionalProperties": {
              "description": "An object representing one of the extra info items requested",
              "properties": {
                "summary": {
                  "description": "List representing the summary of the extra info items.",
                  "items": {
                    "description": "List representing the summary of the extra info items.",
                    "properties": {
                      "amount": {
                        "description": "Category percentage of the entire route.",
                        "example": 23.8,
                        "format": "double",
                        "type": "number"
                      },
                      "distance": {
                        "description": "Cumulative distance of this value.",
                        "example": 123.1,
                        "format": "double",
                        "type": "number"
                      },
                      "value": {
                        "description": "[Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.",
                        "example": 5,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "values": {
                  "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                  "example": [
                    [
                      0,
                      3,
                      26
                    ],
                    [
                      3,
                      10,
                      12
                    ]
                  ],
                  "items": {
                    "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                    "example": [
                      [
                        0,
                        3,
                        26
                      ],
                      [
                        3,
                        10,
                        12
                      ]
                    ],
                    "items": {
                      "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "description": "List of extra info objects representing the extra info items that were requested for the route.",
            "type": "object"
          },
          "geometry": {
            "description": "The geometry of the route. For JSON route responses this is an encoded polyline.",
            "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
            "type": "string"
          },
          "legs": {
            "description": "List containing the legs the route consists of.",
            "items": {
              "description": "Leg of a route",
              "properties": {
                "arrival": {
                  "description": "Arrival date and time",
                  "example": "2020-01-31T13:15:00+01:00",
                  "format": "date-time",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "arrival",
                    "value": true
                  }
                },
                "departure": {
                  "description": "Departure date and time",
                  "example": "2020-01-31T12:45:00+01:00",
                  "format": "date-time",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "departure",
                    "value": true
                  }
                },
                "departure_location": {
                  "description": "The departure location of the leg.",
                  "example": "Dossenheim, Süd Bstg G1",
                  "type": "string"
                },
                "distance": {
                  "description": "The distance for the leg in metres.",
                  "example": 245,
                  "format": "double",
                  "type": "number"
                },
                "duration": {
                  "description": "The duration for the leg in seconds.",
                  "example": 96.2,
                  "format": "double",
                  "type": "number"
                },
                "feed_id": {
                  "description": "The feed ID this public transport leg based its information from.",
                  "example": "gtfs_0",
                  "type": "string"
                },
                "geometry": {
                  "description": "The geometry of the leg. This is an encoded polyline.",
                  "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                  "type": "string"
                },
                "instructions": {
                  "description": "List containing the specific steps the segment consists of.",
                  "items": {
                    "description": "Step of a route segment",
                    "properties": {
                      "distance": {
                        "description": "The distance for the step in metres.",
                        "example": 245,
                        "format": "double",
                        "type": "number"
                      },
                      "duration": {
                        "description": "The duration for the step in seconds.",
                        "example": 96.2,
                        "format": "double",
                        "type": "number"
                      },
                      "exit_bearings": {
                        "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                        "example": [
                          10,
                          45,
                          60
                        ],
                        "items": {
                          "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                          "format": "int32",
                          "type": "integer",
                          "x-validWhen": {
                            "ref": "roundabout_exits",
                            "value": true
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "roundabout_exits",
                          "value": true
                        }
                      },
                      "exit_number": {
                        "description": "Only for roundabouts. Contains the number of the exit to take.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "instruction": {
                        "description": "The routing instruction text for the step.",
                        "example": "Turn right onto Berliner Straße",
                        "type": "string"
                      },
                      "maneuver": {
                        "description": "Maneuver object of the step",
                        "properties": {
                          "bearing_after": {
                            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                            "example": 96,
                            "format": "int32",
                            "type": "integer"
                          },
                          "bearing_before": {
                            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                            "example": 24,
                            "format": "int32",
                            "type": "integer"
                          },
                          "location": {
                            "description": "The coordinate of the point where a maneuver takes place.",
                            "example": [
                              8.678962,
                              49.407819
                            ],
                            "items": {
                              "description": "The coordinate of the point where a maneuver takes place.",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object",
                        "x-validWhen": {
                          "ref": "maneuvers",
                          "value": true
                        }
                      },
                      "name": {
                        "description": "The name of the next street.",
                        "example": "Berliner Straße",
                        "type": "string"
                      },
                      "type": {
                        "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                        "example": 1,
                        "format": "int32",
                        "type": "integer"
                      },
                      "way_points": {
                        "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                        "example": [
                          45,
                          48
                        ],
                        "items": {
                          "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "is_in_same_vehicle_as_previous": {
                  "description": "Whether the legs continues in the same vehicle as the previous one.",
                  "example": false,
                  "type": "boolean"
                },
                "route_desc": {
                  "description": "The route description of the leg (if provided in the GTFS data set).",
                  "example": "Bus",
                  "type": "string"
                },
                "route_id": {
                  "description": "The route ID of this public transport leg.",
                  "example": "vrn-19-39A-1",
                  "type": "string"
                },
                "route_long_name": {
                  "description": "The public transport route name of the leg.",
                  "example": "RNV Bus 39A",
                  "type": "string"
                },
                "route_short_name": {
                  "description": "The public transport route name (short version) of the leg.",
                  "example": "39A",
                  "type": "string"
                },
                "route_type": {
                  "description": "The route type of the leg (if provided in the GTFS data set).",
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "stops": {
                  "description": "List containing the stops the along the leg.",
                  "items": {
                    "description": "Stop of a public transport leg",
                    "properties": {
                      "arrival_cancelled": {
                        "description": "Whether arrival at the stop was cancelled.",
                        "example": false,
                        "type": "boolean"
                      },
                      "arrival_time": {
                        "description": "Arrival time of the stop.",
                        "example": "2022-07-04T13:22:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "departure_cancelled": {
                        "description": "Whether departure at the stop was cancelled.",
                        "example": false,
                        "type": "boolean"
                      },
                      "departure_time": {
                        "description": "Departure time of the stop.",
                        "example": "2022-07-04T13:22:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the stop.",
                        "example": [
                          8.6912542,
                          49.399979
                        ],
                        "items": {
                          "description": "The location of the stop.",
                          "format": "double",
                          "type": "number"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "The name of the stop.",
                        "example": "Heidelberg, Alois-Link-Platz",
                        "type": "string"
                      },
                      "planned_arrival_time": {
                        "description": "Planned arrival time of the stop.",
                        "example": "2022-07-04T13:22:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "planned_departure_time": {
                        "description": "Planned departure time of the stop.",
                        "example": "2022-07-04T13:22:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "predicted_arrival_time": {
                        "description": "Predicted arrival time of the stop.",
                        "example": "2022-07-04T13:22:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "predicted_departure_time": {
                        "description": "Predicted departure time of the stop.",
                        "example": "2022-07-04T13:22:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "stop_id": {
                        "description": "The ID of the stop.",
                        "example": "de:08221:1138:0:O",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "trip_headsign": {
                  "description": "The headsign of the public transport vehicle of the leg.",
                  "example": "Bismarckplatz - Speyererhof - EMBL - Boxberg - Mombertplatz",
                  "type": "string"
                },
                "trip_id": {
                  "description": "The trip ID of this public transport leg.",
                  "example": "trip_id: vrn-19-39A-1-2-21-H-8-Special-50-42",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the leg, possible values are currently 'walk' and 'pt'.",
                  "example": "pt",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "segments": {
            "description": "List containing the segments and its corresponding steps which make up the route.",
            "items": {
              "description": "List containing the segments and its correspoding steps which make up the route.",
              "properties": {
                "ascent": {
                  "description": " Contains ascent of this segment in metres.",
                  "example": 56.3,
                  "format": "double",
                  "type": "number",
                  "x-validWhen": {
                    "ref": "elevation",
                    "value": true
                  }
                },
                "avgspeed": {
                  "description": "Contains the average speed of this segment in km/h.",
                  "example": 56.3,
                  "format": "double",
                  "type": "number",
                  "x-validWhen": {
                    "ref": "attributes",
                    "valueContains": "avgspeed"
                  }
                },
                "descent": {
                  "description": "Contains descent of this segment in metres.",
                  "example": 45.2,
                  "format": "double",
                  "type": "number"
                },
                "detourfactor": {
                  "description": "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.",
                  "example": 0.5,
                  "format": "double",
                  "type": "number",
                  "x-validWhen": {
                    "ref": "attributes",
                    "valueContains": "detourfactor"
                  }
                },
                "distance": {
                  "description": "Contains the distance of the segment in specified units.",
                  "example": 253,
                  "format": "double",
                  "type": "number"
                },
                "duration": {
                  "description": "Contains the duration of the segment in seconds.",
                  "example": 37.7,
                  "format": "double",
                  "type": "number"
                },
                "percentage": {
                  "description": "Contains the proportion of the route in percent.",
                  "example": 43.2,
                  "format": "double",
                  "type": "number",
                  "x-validWhen": {
                    "ref": "attributes",
                    "valueContains": "percentage"
                  }
                },
                "steps": {
                  "description": "List containing the specific steps the segment consists of.",
                  "items": {
                    "description": "Step of a route segment",
                    "properties": {
                      "distance": {
                        "description": "The distance for the step in metres.",
                        "example": 245,
                        "format": "double",
                        "type": "number"
                      },
                      "duration": {
                        "description": "The duration for the step in seconds.",
                        "example": 96.2,
                        "format": "double",
                        "type": "number"
                      },
                      "exit_bearings": {
                        "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                        "example": [
                          10,
                          45,
                          60
                        ],
                        "items": {
                          "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                          "format": "int32",
                          "type": "integer",
                          "x-validWhen": {
                            "ref": "roundabout_exits",
                            "value": true
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "roundabout_exits",
                          "value": true
                        }
                      },
                      "exit_number": {
                        "description": "Only for roundabouts. Contains the number of the exit to take.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "instruction": {
                        "description": "The routing instruction text for the step.",
                        "example": "Turn right onto Berliner Straße",
                        "type": "string"
                      },
                      "maneuver": {
                        "description": "Maneuver object of the step",
                        "properties": {
                          "bearing_after": {
                            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                            "example": 96,
                            "format": "int32",
                            "type": "integer"
                          },
                          "bearing_before": {
                            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                            "example": 24,
                            "format": "int32",
                            "type": "integer"
                          },
                          "location": {
                            "description": "The coordinate of the point where a maneuver takes place.",
                            "example": [
                              8.678962,
                              49.407819
                            ],
                            "items": {
                              "description": "The coordinate of the point where a maneuver takes place.",
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object",
                        "x-validWhen": {
                          "ref": "maneuvers",
                          "value": true
                        }
                      },
                      "name": {
                        "description": "The name of the next street.",
                        "example": "Berliner Straße",
                        "type": "string"
                      },
                      "type": {
                        "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                        "example": 1,
                        "format": "int32",
                        "type": "integer"
                      },
                      "way_points": {
                        "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                        "example": [
                          45,
                          48
                        ],
                        "items": {
                          "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "summary": {
            "description": "Contains total sums of duration, route distance and actual distance of the route.",
            "properties": {
              "ascent": {
                "description": "Total ascent in meters.",
                "example": 166.3,
                "format": "double",
                "type": "number",
                "x-validWhen": {
                  "ref": "elevation",
                  "value": true
                }
              },
              "descent": {
                "description": "Total descent in meters.",
                "example": 201.3,
                "format": "double",
                "type": "number",
                "x-validWhen": {
                  "ref": "elevation",
                  "value": true
                }
              },
              "distance": {
                "description": "Total route distance in specified units.",
                "example": 12.6,
                "format": "double",
                "type": "number"
              },
              "duration": {
                "description": "Total duration in seconds.",
                "example": 604,
                "format": "double",
                "type": "number"
              },
              "fare": {
                "format": "int32",
                "type": "integer"
              },
              "transfers": {
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "warnings": {
            "description": "List of warnings that have been generated for the route",
            "items": {
              "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
              "properties": {
                "code": {
                  "description": "Identification code for the warning",
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "The message associated with the warning",
                  "example": "This route may go over restricted roads",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "way_points": {
            "description": "List containing the indices of way points corresponding to the *geometry*.",
            "example": [
              0,
              23
            ],
            "items": {
              "description": "List containing the indices of way points corresponding to the *geometry*.",
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JSONLeg": {
        "description": "Leg of a route",
        "properties": {
          "arrival": {
            "description": "Arrival date and time",
            "example": "2020-01-31T13:15:00+01:00",
            "format": "date-time",
            "type": "string",
            "x-validWhen": {
              "ref": "arrival",
              "value": true
            }
          },
          "departure": {
            "description": "Departure date and time",
            "example": "2020-01-31T12:45:00+01:00",
            "format": "date-time",
            "type": "string",
            "x-validWhen": {
              "ref": "departure",
              "value": true
            }
          },
          "departure_location": {
            "description": "The departure location of the leg.",
            "example": "Dossenheim, Süd Bstg G1",
            "type": "string"
          },
          "distance": {
            "description": "The distance for the leg in metres.",
            "example": 245,
            "format": "double",
            "type": "number"
          },
          "duration": {
            "description": "The duration for the leg in seconds.",
            "example": 96.2,
            "format": "double",
            "type": "number"
          },
          "feed_id": {
            "description": "The feed ID this public transport leg based its information from.",
            "example": "gtfs_0",
            "type": "string"
          },
          "geometry": {
            "description": "The geometry of the leg. This is an encoded polyline.",
            "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
            "type": "string"
          },
          "instructions": {
            "description": "List containing the specific steps the segment consists of.",
            "items": {
              "description": "Step of a route segment",
              "properties": {
                "distance": {
                  "description": "The distance for the step in metres.",
                  "example": 245,
                  "format": "double",
                  "type": "number"
                },
                "duration": {
                  "description": "The duration for the step in seconds.",
                  "example": 96.2,
                  "format": "double",
                  "type": "number"
                },
                "exit_bearings": {
                  "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                  "example": [
                    10,
                    45,
                    60
                  ],
                  "items": {
                    "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "roundabout_exits",
                      "value": true
                    }
                  },
                  "type": "array",
                  "x-validWhen": {
                    "ref": "roundabout_exits",
                    "value": true
                  }
                },
                "exit_number": {
                  "description": "Only for roundabouts. Contains the number of the exit to take.",
                  "example": 2,
                  "format": "int32",
                  "type": "integer"
                },
                "instruction": {
                  "description": "The routing instruction text for the step.",
                  "example": "Turn right onto Berliner Straße",
                  "type": "string"
                },
                "maneuver": {
                  "description": "Maneuver object of the step",
                  "properties": {
                    "bearing_after": {
                      "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                      "example": 96,
                      "format": "int32",
                      "type": "integer"
                    },
                    "bearing_before": {
                      "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                      "example": 24,
                      "format": "int32",
                      "type": "integer"
                    },
                    "location": {
                      "description": "The coordinate of the point where a maneuver takes place.",
                      "example": [
                        8.678962,
                        49.407819
                      ],
                      "items": {
                        "description": "The coordinate of the point where a maneuver takes place.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-validWhen": {
                    "ref": "maneuvers",
                    "value": true
                  }
                },
                "name": {
                  "description": "The name of the next street.",
                  "example": "Berliner Straße",
                  "type": "string"
                },
                "type": {
                  "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "way_points": {
                  "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                  "example": [
                    45,
                    48
                  ],
                  "items": {
                    "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "is_in_same_vehicle_as_previous": {
            "description": "Whether the legs continues in the same vehicle as the previous one.",
            "example": false,
            "type": "boolean"
          },
          "route_desc": {
            "description": "The route description of the leg (if provided in the GTFS data set).",
            "example": "Bus",
            "type": "string"
          },
          "route_id": {
            "description": "The route ID of this public transport leg.",
            "example": "vrn-19-39A-1",
            "type": "string"
          },
          "route_long_name": {
            "description": "The public transport route name of the leg.",
            "example": "RNV Bus 39A",
            "type": "string"
          },
          "route_short_name": {
            "description": "The public transport route name (short version) of the leg.",
            "example": "39A",
            "type": "string"
          },
          "route_type": {
            "description": "The route type of the leg (if provided in the GTFS data set).",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "stops": {
            "description": "List containing the stops the along the leg.",
            "items": {
              "description": "Stop of a public transport leg",
              "properties": {
                "arrival_cancelled": {
                  "description": "Whether arrival at the stop was cancelled.",
                  "example": false,
                  "type": "boolean"
                },
                "arrival_time": {
                  "description": "Arrival time of the stop.",
                  "example": "2022-07-04T13:22:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "departure_cancelled": {
                  "description": "Whether departure at the stop was cancelled.",
                  "example": false,
                  "type": "boolean"
                },
                "departure_time": {
                  "description": "Departure time of the stop.",
                  "example": "2022-07-04T13:22:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "location": {
                  "description": "The location of the stop.",
                  "example": [
                    8.6912542,
                    49.399979
                  ],
                  "items": {
                    "description": "The location of the stop.",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The name of the stop.",
                  "example": "Heidelberg, Alois-Link-Platz",
                  "type": "string"
                },
                "planned_arrival_time": {
                  "description": "Planned arrival time of the stop.",
                  "example": "2022-07-04T13:22:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "planned_departure_time": {
                  "description": "Planned departure time of the stop.",
                  "example": "2022-07-04T13:22:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "predicted_arrival_time": {
                  "description": "Predicted arrival time of the stop.",
                  "example": "2022-07-04T13:22:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "predicted_departure_time": {
                  "description": "Predicted departure time of the stop.",
                  "example": "2022-07-04T13:22:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "stop_id": {
                  "description": "The ID of the stop.",
                  "example": "de:08221:1138:0:O",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "trip_headsign": {
            "description": "The headsign of the public transport vehicle of the leg.",
            "example": "Bismarckplatz - Speyererhof - EMBL - Boxberg - Mombertplatz",
            "type": "string"
          },
          "trip_id": {
            "description": "The trip ID of this public transport leg.",
            "example": "trip_id: vrn-19-39A-1-2-21-H-8-Special-50-42",
            "type": "string"
          },
          "type": {
            "description": "The type of the leg, possible values are currently 'walk' and 'pt'.",
            "example": "pt",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JSONLocation": {
        "description": "The snapped locations as coordinates and snapping distance.",
        "properties": {
          "location": {
            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
            "example": [
              8.678962,
              49.40783
            ],
            "items": {
              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
            "example": "Bergheimer Straße",
            "type": "string",
            "x-validWhen": {
              "ref": "resolve_locations",
              "value": true
            }
          },
          "snapped_distance": {
            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
            "example": 1.2,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "JSONObject": {
        "additionalProperties": {
          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
          "type": "object"
        },
        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "JSONPtStop": {
        "description": "Stop of a public transport leg",
        "properties": {
          "arrival_cancelled": {
            "description": "Whether arrival at the stop was cancelled.",
            "example": false,
            "type": "boolean"
          },
          "arrival_time": {
            "description": "Arrival time of the stop.",
            "example": "2022-07-04T13:22:00Z",
            "format": "date-time",
            "type": "string"
          },
          "departure_cancelled": {
            "description": "Whether departure at the stop was cancelled.",
            "example": false,
            "type": "boolean"
          },
          "departure_time": {
            "description": "Departure time of the stop.",
            "example": "2022-07-04T13:22:00Z",
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "description": "The location of the stop.",
            "example": [
              8.6912542,
              49.399979
            ],
            "items": {
              "description": "The location of the stop.",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the stop.",
            "example": "Heidelberg, Alois-Link-Platz",
            "type": "string"
          },
          "planned_arrival_time": {
            "description": "Planned arrival time of the stop.",
            "example": "2022-07-04T13:22:00Z",
            "format": "date-time",
            "type": "string"
          },
          "planned_departure_time": {
            "description": "Planned departure time of the stop.",
            "example": "2022-07-04T13:22:00Z",
            "format": "date-time",
            "type": "string"
          },
          "predicted_arrival_time": {
            "description": "Predicted arrival time of the stop.",
            "example": "2022-07-04T13:22:00Z",
            "format": "date-time",
            "type": "string"
          },
          "predicted_departure_time": {
            "description": "Predicted departure time of the stop.",
            "example": "2022-07-04T13:22:00Z",
            "format": "date-time",
            "type": "string"
          },
          "stop_id": {
            "description": "The ID of the stop.",
            "example": "de:08221:1138:0:O",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JSONRouteResponse": {
        "properties": {
          "bbox": {
            "description": "Bounding box that covers all returned routes",
            "example": [
              49.414057,
              8.680894,
              49.420514,
              8.690123
            ],
            "items": {
              "description": "Bounding box that covers all returned routes",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Information about the request",
            "properties": {
              "attribution": {
                "description": "Copyright and attribution information",
                "example": "openrouteservice.org | OpenStreetMap contributors",
                "type": "string"
              },
              "engine": {
                "description": "Information about the openrouteservice engine used",
                "properties": {
                  "build_date": {
                    "description": "The date that the service was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "graph_date": {
                    "description": "The date that the graph data was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "version": {
                    "description": "The backend version of the openrouteservice that was queried",
                    "example": "8.0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the request (as passed in by the query)",
                "example": "request123",
                "type": "string"
              },
              "osm_file_md5_hash": {
                "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                "example": "c0327ba6",
                "type": "string"
              },
              "query": {
                "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
                "properties": {
                  "alternative_routes": {
                    "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                    "example": {
                      "target_count": 2,
                      "weight_factor": 1.6
                    },
                    "properties": {
                      "share_factor": {
                        "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                        "example": 0.6,
                        "format": "double",
                        "type": "number"
                      },
                      "target_count": {
                        "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer"
                      },
                      "weight_factor": {
                        "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                        "example": 1.4,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "title": "Alternative Routes",
                    "type": "object"
                  },
                  "attributes": {
                    "description": "List of route attributes",
                    "example": [
                      "avgspeed",
                      "percentage"
                    ],
                    "items": {
                      "description": "List of route attributes",
                      "enum": [
                        "avgspeed",
                        "detourfactor",
                        "percentage"
                      ],
                      "example": "[\"avgspeed\",\"percentage\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "bearings": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "example": [
                      [
                        30,
                        20
                      ],
                      [],
                      [
                        40,
                        20
                      ]
                    ],
                    "items": {
                      "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                      "example": [
                        [
                          30,
                          20
                        ],
                        [],
                        [
                          40,
                          20
                        ]
                      ],
                      "items": {
                        "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      },
                      "type": "array",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "cycling-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "continue_straight": {
                    "default": false,
                    "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                    "type": "boolean"
                  },
                  "coordinates": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ],
                      [
                        8.687872,
                        49.420318
                      ]
                    ],
                    "items": {
                      "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ],
                        [
                          8.687872,
                          49.420318
                        ]
                      ],
                      "items": {
                        "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "elevation": {
                    "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                    "example": false,
                    "type": "boolean"
                  },
                  "extra_info": {
                    "description": "The extra info items to include in the response",
                    "example": [
                      "waytype",
                      "surface"
                    ],
                    "items": {
                      "description": "Specify which extra info items to include in the response",
                      "enum": [
                        "steepness",
                        "suitability",
                        "surface",
                        "waycategory",
                        "waytype",
                        "tollways",
                        "traildifficulty",
                        "osmid",
                        "roadaccessrestrictions",
                        "countryinfo",
                        "green",
                        "noise",
                        "csv",
                        "shadow"
                      ],
                      "example": "[\"waytype\",\"surface\"]",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "geometry": {
                    "default": true,
                    "description": "Specifies whether to return geometry. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "format",
                      "value": [
                        "json"
                      ]
                    }
                  },
                  "geometry_simplify": {
                    "default": false,
                    "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "ignore_transfers": {
                    "default": false,
                    "description": "Specifies if transfers as criterion should be ignored.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "instructions": {
                    "default": true,
                    "description": "Specifies whether to return instructions.",
                    "type": "boolean"
                  },
                  "instructions_format": {
                    "default": "text",
                    "description": "Select html for more verbose instructions.",
                    "enum": [
                      "html",
                      "text"
                    ],
                    "type": "string"
                  },
                  "language": {
                    "default": "en",
                    "description": "Language for the route instructions.",
                    "enum": [
                      "cs",
                      "cs-cz",
                      "de",
                      "de-de",
                      "en",
                      "en-us",
                      "eo",
                      "eo-eo",
                      "es",
                      "es-es",
                      "fr",
                      "fr-fr",
                      "gr",
                      "gr-gr",
                      "he",
                      "he-il",
                      "hu",
                      "hu-hu",
                      "id",
                      "id-id",
                      "it",
                      "it-it",
                      "ja",
                      "ja-jp",
                      "ne",
                      "ne-np",
                      "nl",
                      "nl-nl",
                      "nb",
                      "nb-no",
                      "pl",
                      "pl-pl",
                      "pt",
                      "pt-pt",
                      "ro",
                      "ro-ro",
                      "ru",
                      "ru-ru",
                      "tr",
                      "tr-tr",
                      "zh",
                      "zh-cn"
                    ],
                    "type": "string"
                  },
                  "maneuvers": {
                    "default": false,
                    "description": "Specifies whether the maneuver object is included into the step object or not. ",
                    "type": "boolean"
                  },
                  "maximum_speed": {
                    "description": "The maximum speed specified by user.",
                    "example": 90,
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "options": {
                    "description": "Advanced options for routing",
                    "example": {
                      "avoid_borders": "controlled"
                    },
                    "properties": {
                      "avoid_borders": {
                        "description": "Specify which type of border crossing to avoid",
                        "enum": [
                          "all",
                          "controlled",
                          "none"
                        ],
                        "example": "controlled",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_countries": {
                        "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                        "example": [
                          11,
                          193
                        ],
                        "items": {
                          "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                          "example": "[11,193]",
                          "type": "string",
                          "x-validWhen": {
                            "ref": "profile",
                            "value": "driving-*"
                          }
                        },
                        "type": "array",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-*"
                        }
                      },
                      "avoid_features": {
                        "description": "List of features to avoid. ",
                        "example": [
                          "highways"
                        ],
                        "items": {
                          "description": "Definition of the features to be avoided.",
                          "enum": [
                            "highways",
                            "tollways",
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "example": "[\"highways\"]",
                          "type": "string",
                          "x-itemRestrictions": {
                            "itemsWhen": {
                              "cycling-*": [
                                "ferries",
                                "steps",
                                "fords"
                              ],
                              "driving-*": [
                                "highways",
                                "tollways",
                                "ferries"
                              ],
                              "foot-*": [
                                "ferries",
                                "fords",
                                "steps"
                              ],
                              "wheelchair": [
                                "ferries",
                                "steps"
                              ]
                            },
                            "ref": "profile"
                          }
                        },
                        "type": "array",
                        "x-itemRestrictions": {
                          "itemsWhen": {
                            "cycling-*": [
                              "ferries",
                              "steps",
                              "fords"
                            ],
                            "driving-*": [
                              "highways",
                              "tollways",
                              "ferries"
                            ],
                            "foot-*": [
                              "ferries",
                              "fords",
                              "steps"
                            ],
                            "wheelchair": [
                              "ferries",
                              "steps"
                            ]
                          },
                          "ref": "profile"
                        }
                      },
                      "avoid_polygons": {
                        "additionalProperties": {
                          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                          "type": "object"
                        },
                        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                        "properties": {
                          "empty": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "profile_params": {
                        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                        "properties": {
                          "allow_unsuitable": {
                            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "restrictions": {
                            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                            "properties": {
                              "axleload": {
                                "description": "Axleload restriction in tons.",
                                "example": 50,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "hazmat": {
                                "default": false,
                                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                                "type": "boolean",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "height": {
                                "description": "Height restriction in metres. ",
                                "example": 4.2,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "length": {
                                "description": "Length restriction in metres.",
                                "example": 8.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "maximum_incline": {
                                "default": 6,
                                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "maximum_sloped_kerb": {
                                "default": 0.6,
                                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "minimum_width": {
                                "description": "Specifies the minimum width of the footway in metres.",
                                "example": 2.5,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "smoothness_type": {
                                "default": "good",
                                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                                "enum": [
                                  "excellent",
                                  "good",
                                  "intermediate",
                                  "bad",
                                  "very_bad",
                                  "horrible",
                                  "very_horrible",
                                  "impassable"
                                ],
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "surface_type": {
                                "default": "sett",
                                "description": "Specifies the minimum surface type. Default is `sett`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "track_type": {
                                "default": "grade1",
                                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                                "type": "string",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "wheelchair"
                                }
                              },
                              "weight": {
                                "description": "Weight restriction in tons. ",
                                "example": 40,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              },
                              "width": {
                                "description": "Width restriction in metres.",
                                "example": 5.6,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "driving-hgv"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "surface_quality_known": {
                            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                            "example": true,
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weightings": {
                            "description": "Describe additional weightings to be applied to edges on the routing.",
                            "properties": {
                              "green": {
                                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "quiet": {
                                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                                "example": 0.8,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "shadow": {
                                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                                "example": 0.4,
                                "format": "float",
                                "type": "number",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "foot-*"
                                }
                              },
                              "steepness_difficulty": {
                                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                                "example": 2,
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "profile",
                                  "value": "cycling-*"
                                }
                              }
                            },
                            "title": "Profile Weightings",
                            "type": "object"
                          }
                        },
                        "title": "Profile Parameters",
                        "type": "object",
                        "x-validWhen": {
                          "ref": "profile",
                          "valueNot": "driving-car"
                        }
                      },
                      "round_trip": {
                        "description": "Specifies the parameters for generating round trip routes.",
                        "example": {
                          "length": 10000,
                          "points": 5
                        },
                        "properties": {
                          "length": {
                            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                            "example": 10000,
                            "format": "float",
                            "type": "number"
                          },
                          "points": {
                            "description": "The number of points to use on the route. Larger values create more circular routes.",
                            "example": 5,
                            "format": "int32",
                            "type": "integer"
                          },
                          "seed": {
                            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                            "example": 1,
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "title": "Round Trip Route Options",
                        "type": "object"
                      },
                      "vehicle_type": {
                        "default": "hgv",
                        "description": "Definition of the vehicle type.",
                        "enum": [
                          "hgv",
                          "bus",
                          "agricultural",
                          "delivery",
                          "forestry",
                          "goods",
                          "unknown"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "title": "Route Options",
                    "type": "object"
                  },
                  "preference": {
                    "default": "recommended",
                    "description": "Specifies the route preference",
                    "enum": [
                      "fastest",
                      "shortest",
                      "recommended"
                    ],
                    "type": "string"
                  },
                  "radiuses": {
                    "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                    "example": [
                      200,
                      -1,
                      30
                    ],
                    "items": {
                      "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                      "format": "double",
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "roundabout_exits": {
                    "default": false,
                    "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                    "type": "boolean"
                  },
                  "schedule": {
                    "default": false,
                    "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  },
                  "schedule_duration": {
                    "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "schedule_rows": {
                    "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                    "example": 3,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "schedule",
                      "value": true
                    }
                  },
                  "skip_segments": {
                    "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                    "example": [
                      2,
                      4
                    ],
                    "items": {
                      "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "suppress_warnings": {
                    "description": "Suppress warning messages in the response",
                    "example": false,
                    "type": "boolean"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string"
                  },
                  "walking_time": {
                    "default": "PT15M",
                    "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                    "example": "PT30M",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "public-transport"
                    }
                  }
                },
                "required": [
                  "coordinates"
                ],
                "title": "Directions Service",
                "type": "object"
              },
              "service": {
                "description": "The service that was requested",
                "example": "routing",
                "type": "string"
              },
              "system_message": {
                "description": "System message",
                "example": "A message string configured in the service",
                "type": "string"
              },
              "timestamp": {
                "description": "Time that the request was made (UNIX Epoch time)",
                "example": 1549549847974,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "routes": {
            "description": "A list of routes returned from the request",
            "items": {
              "description": "An individual JSON based route created by the service",
              "properties": {
                "arrival": {
                  "description": "Arrival date and time",
                  "example": "2020-01-31T13:15:00+01:00",
                  "format": "date-time",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "arrival",
                    "value": true
                  }
                },
                "bbox": {
                  "description": "A bounding box which contains the entire route",
                  "example": [
                    49.414057,
                    8.680894,
                    49.420514,
                    8.690123
                  ],
                  "items": {
                    "description": "A bounding box which contains the entire route",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "departure": {
                  "description": "Departure date and time",
                  "example": "2020-01-31T12:45:00+01:00",
                  "format": "date-time",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "departure",
                    "value": true
                  }
                },
                "extras": {
                  "additionalProperties": {
                    "description": "An object representing one of the extra info items requested",
                    "properties": {
                      "summary": {
                        "description": "List representing the summary of the extra info items.",
                        "items": {
                          "description": "List representing the summary of the extra info items.",
                          "properties": {
                            "amount": {
                              "description": "Category percentage of the entire route.",
                              "example": 23.8,
                              "format": "double",
                              "type": "number"
                            },
                            "distance": {
                              "description": "Cumulative distance of this value.",
                              "example": 123.1,
                              "format": "double",
                              "type": "number"
                            },
                            "value": {
                              "description": "[Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) of a info category.",
                              "example": 5,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "values": {
                        "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                        "example": [
                          [
                            0,
                            3,
                            26
                          ],
                          [
                            3,
                            10,
                            12
                          ]
                        ],
                        "items": {
                          "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                          "example": [
                            [
                              0,
                              3,
                              26
                            ],
                            [
                              3,
                              10,
                              12
                            ]
                          ],
                          "items": {
                            "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/documentation/extra-info/Extra-Info.html) assigned to this section.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "description": "List of extra info objects representing the extra info items that were requested for the route.",
                  "type": "object"
                },
                "geometry": {
                  "description": "The geometry of the route. For JSON route responses this is an encoded polyline.",
                  "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                  "type": "string"
                },
                "legs": {
                  "description": "List containing the legs the route consists of.",
                  "items": {
                    "description": "Leg of a route",
                    "properties": {
                      "arrival": {
                        "description": "Arrival date and time",
                        "example": "2020-01-31T13:15:00+01:00",
                        "format": "date-time",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "arrival",
                          "value": true
                        }
                      },
                      "departure": {
                        "description": "Departure date and time",
                        "example": "2020-01-31T12:45:00+01:00",
                        "format": "date-time",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "departure",
                          "value": true
                        }
                      },
                      "departure_location": {
                        "description": "The departure location of the leg.",
                        "example": "Dossenheim, Süd Bstg G1",
                        "type": "string"
                      },
                      "distance": {
                        "description": "The distance for the leg in metres.",
                        "example": 245,
                        "format": "double",
                        "type": "number"
                      },
                      "duration": {
                        "description": "The duration for the leg in seconds.",
                        "example": 96.2,
                        "format": "double",
                        "type": "number"
                      },
                      "feed_id": {
                        "description": "The feed ID this public transport leg based its information from.",
                        "example": "gtfs_0",
                        "type": "string"
                      },
                      "geometry": {
                        "description": "The geometry of the leg. This is an encoded polyline.",
                        "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C",
                        "type": "string"
                      },
                      "instructions": {
                        "description": "List containing the specific steps the segment consists of.",
                        "items": {
                          "description": "Step of a route segment",
                          "properties": {
                            "distance": {
                              "description": "The distance for the step in metres.",
                              "example": 245,
                              "format": "double",
                              "type": "number"
                            },
                            "duration": {
                              "description": "The duration for the step in seconds.",
                              "example": 96.2,
                              "format": "double",
                              "type": "number"
                            },
                            "exit_bearings": {
                              "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                              "example": [
                                10,
                                45,
                                60
                              ],
                              "items": {
                                "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "roundabout_exits",
                                  "value": true
                                }
                              },
                              "type": "array",
                              "x-validWhen": {
                                "ref": "roundabout_exits",
                                "value": true
                              }
                            },
                            "exit_number": {
                              "description": "Only for roundabouts. Contains the number of the exit to take.",
                              "example": 2,
                              "format": "int32",
                              "type": "integer"
                            },
                            "instruction": {
                              "description": "The routing instruction text for the step.",
                              "example": "Turn right onto Berliner Straße",
                              "type": "string"
                            },
                            "maneuver": {
                              "description": "Maneuver object of the step",
                              "properties": {
                                "bearing_after": {
                                  "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                                  "example": 96,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "bearing_before": {
                                  "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                                  "example": 24,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "location": {
                                  "description": "The coordinate of the point where a maneuver takes place.",
                                  "example": [
                                    8.678962,
                                    49.407819
                                  ],
                                  "items": {
                                    "description": "The coordinate of the point where a maneuver takes place.",
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object",
                              "x-validWhen": {
                                "ref": "maneuvers",
                                "value": true
                              }
                            },
                            "name": {
                              "description": "The name of the next street.",
                              "example": "Berliner Straße",
                              "type": "string"
                            },
                            "type": {
                              "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                              "example": 1,
                              "format": "int32",
                              "type": "integer"
                            },
                            "way_points": {
                              "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                              "example": [
                                45,
                                48
                              ],
                              "items": {
                                "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "is_in_same_vehicle_as_previous": {
                        "description": "Whether the legs continues in the same vehicle as the previous one.",
                        "example": false,
                        "type": "boolean"
                      },
                      "route_desc": {
                        "description": "The route description of the leg (if provided in the GTFS data set).",
                        "example": "Bus",
                        "type": "string"
                      },
                      "route_id": {
                        "description": "The route ID of this public transport leg.",
                        "example": "vrn-19-39A-1",
                        "type": "string"
                      },
                      "route_long_name": {
                        "description": "The public transport route name of the leg.",
                        "example": "RNV Bus 39A",
                        "type": "string"
                      },
                      "route_short_name": {
                        "description": "The public transport route name (short version) of the leg.",
                        "example": "39A",
                        "type": "string"
                      },
                      "route_type": {
                        "description": "The route type of the leg (if provided in the GTFS data set).",
                        "example": 1,
                        "format": "int32",
                        "type": "integer"
                      },
                      "stops": {
                        "description": "List containing the stops the along the leg.",
                        "items": {
                          "description": "Stop of a public transport leg",
                          "properties": {
                            "arrival_cancelled": {
                              "description": "Whether arrival at the stop was cancelled.",
                              "example": false,
                              "type": "boolean"
                            },
                            "arrival_time": {
                              "description": "Arrival time of the stop.",
                              "example": "2022-07-04T13:22:00Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "departure_cancelled": {
                              "description": "Whether departure at the stop was cancelled.",
                              "example": false,
                              "type": "boolean"
                            },
                            "departure_time": {
                              "description": "Departure time of the stop.",
                              "example": "2022-07-04T13:22:00Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the stop.",
                              "example": [
                                8.6912542,
                                49.399979
                              ],
                              "items": {
                                "description": "The location of the stop.",
                                "format": "double",
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "The name of the stop.",
                              "example": "Heidelberg, Alois-Link-Platz",
                              "type": "string"
                            },
                            "planned_arrival_time": {
                              "description": "Planned arrival time of the stop.",
                              "example": "2022-07-04T13:22:00Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "planned_departure_time": {
                              "description": "Planned departure time of the stop.",
                              "example": "2022-07-04T13:22:00Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "predicted_arrival_time": {
                              "description": "Predicted arrival time of the stop.",
                              "example": "2022-07-04T13:22:00Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "predicted_departure_time": {
                              "description": "Predicted departure time of the stop.",
                              "example": "2022-07-04T13:22:00Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "stop_id": {
                              "description": "The ID of the stop.",
                              "example": "de:08221:1138:0:O",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "trip_headsign": {
                        "description": "The headsign of the public transport vehicle of the leg.",
                        "example": "Bismarckplatz - Speyererhof - EMBL - Boxberg - Mombertplatz",
                        "type": "string"
                      },
                      "trip_id": {
                        "description": "The trip ID of this public transport leg.",
                        "example": "trip_id: vrn-19-39A-1-2-21-H-8-Special-50-42",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the leg, possible values are currently 'walk' and 'pt'.",
                        "example": "pt",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "segments": {
                  "description": "List containing the segments and its corresponding steps which make up the route.",
                  "items": {
                    "description": "List containing the segments and its correspoding steps which make up the route.",
                    "properties": {
                      "ascent": {
                        "description": " Contains ascent of this segment in metres.",
                        "example": 56.3,
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "elevation",
                          "value": true
                        }
                      },
                      "avgspeed": {
                        "description": "Contains the average speed of this segment in km/h.",
                        "example": 56.3,
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "attributes",
                          "valueContains": "avgspeed"
                        }
                      },
                      "descent": {
                        "description": "Contains descent of this segment in metres.",
                        "example": 45.2,
                        "format": "double",
                        "type": "number"
                      },
                      "detourfactor": {
                        "description": "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.",
                        "example": 0.5,
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "attributes",
                          "valueContains": "detourfactor"
                        }
                      },
                      "distance": {
                        "description": "Contains the distance of the segment in specified units.",
                        "example": 253,
                        "format": "double",
                        "type": "number"
                      },
                      "duration": {
                        "description": "Contains the duration of the segment in seconds.",
                        "example": 37.7,
                        "format": "double",
                        "type": "number"
                      },
                      "percentage": {
                        "description": "Contains the proportion of the route in percent.",
                        "example": 43.2,
                        "format": "double",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "attributes",
                          "valueContains": "percentage"
                        }
                      },
                      "steps": {
                        "description": "List containing the specific steps the segment consists of.",
                        "items": {
                          "description": "Step of a route segment",
                          "properties": {
                            "distance": {
                              "description": "The distance for the step in metres.",
                              "example": 245,
                              "format": "double",
                              "type": "number"
                            },
                            "duration": {
                              "description": "The duration for the step in seconds.",
                              "example": 96.2,
                              "format": "double",
                              "type": "number"
                            },
                            "exit_bearings": {
                              "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                              "example": [
                                10,
                                45,
                                60
                              ],
                              "items": {
                                "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                                "format": "int32",
                                "type": "integer",
                                "x-validWhen": {
                                  "ref": "roundabout_exits",
                                  "value": true
                                }
                              },
                              "type": "array",
                              "x-validWhen": {
                                "ref": "roundabout_exits",
                                "value": true
                              }
                            },
                            "exit_number": {
                              "description": "Only for roundabouts. Contains the number of the exit to take.",
                              "example": 2,
                              "format": "int32",
                              "type": "integer"
                            },
                            "instruction": {
                              "description": "The routing instruction text for the step.",
                              "example": "Turn right onto Berliner Straße",
                              "type": "string"
                            },
                            "maneuver": {
                              "description": "Maneuver object of the step",
                              "properties": {
                                "bearing_after": {
                                  "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                                  "example": 96,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "bearing_before": {
                                  "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                                  "example": 24,
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "location": {
                                  "description": "The coordinate of the point where a maneuver takes place.",
                                  "example": [
                                    8.678962,
                                    49.407819
                                  ],
                                  "items": {
                                    "description": "The coordinate of the point where a maneuver takes place.",
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object",
                              "x-validWhen": {
                                "ref": "maneuvers",
                                "value": true
                              }
                            },
                            "name": {
                              "description": "The name of the next street.",
                              "example": "Berliner Straße",
                              "type": "string"
                            },
                            "type": {
                              "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                              "example": 1,
                              "format": "int32",
                              "type": "integer"
                            },
                            "way_points": {
                              "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                              "example": [
                                45,
                                48
                              ],
                              "items": {
                                "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "summary": {
                  "description": "Contains total sums of duration, route distance and actual distance of the route.",
                  "properties": {
                    "ascent": {
                      "description": "Total ascent in meters.",
                      "example": 166.3,
                      "format": "double",
                      "type": "number",
                      "x-validWhen": {
                        "ref": "elevation",
                        "value": true
                      }
                    },
                    "descent": {
                      "description": "Total descent in meters.",
                      "example": 201.3,
                      "format": "double",
                      "type": "number",
                      "x-validWhen": {
                        "ref": "elevation",
                        "value": true
                      }
                    },
                    "distance": {
                      "description": "Total route distance in specified units.",
                      "example": 12.6,
                      "format": "double",
                      "type": "number"
                    },
                    "duration": {
                      "description": "Total duration in seconds.",
                      "example": 604,
                      "format": "double",
                      "type": "number"
                    },
                    "fare": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "transfers": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "warnings": {
                  "description": "List of warnings that have been generated for the route",
                  "items": {
                    "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
                    "properties": {
                      "code": {
                        "description": "Identification code for the warning",
                        "example": 1,
                        "format": "int32",
                        "type": "integer"
                      },
                      "message": {
                        "description": "The message associated with the warning",
                        "example": "This route may go over restricted roads",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "way_points": {
                  "description": "List containing the indices of way points corresponding to the *geometry*.",
                  "example": [
                    0,
                    23
                  ],
                  "items": {
                    "description": "List containing the indices of way points corresponding to the *geometry*.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JSONSegment": {
        "description": "List containing the segments and its correspoding steps which make up the route.",
        "properties": {
          "ascent": {
            "description": " Contains ascent of this segment in metres.",
            "example": 56.3,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "elevation",
              "value": true
            }
          },
          "avgspeed": {
            "description": "Contains the average speed of this segment in km/h.",
            "example": 56.3,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "attributes",
              "valueContains": "avgspeed"
            }
          },
          "descent": {
            "description": "Contains descent of this segment in metres.",
            "example": 45.2,
            "format": "double",
            "type": "number"
          },
          "detourfactor": {
            "description": "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.",
            "example": 0.5,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "attributes",
              "valueContains": "detourfactor"
            }
          },
          "distance": {
            "description": "Contains the distance of the segment in specified units.",
            "example": 253,
            "format": "double",
            "type": "number"
          },
          "duration": {
            "description": "Contains the duration of the segment in seconds.",
            "example": 37.7,
            "format": "double",
            "type": "number"
          },
          "percentage": {
            "description": "Contains the proportion of the route in percent.",
            "example": 43.2,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "attributes",
              "valueContains": "percentage"
            }
          },
          "steps": {
            "description": "List containing the specific steps the segment consists of.",
            "items": {
              "description": "Step of a route segment",
              "properties": {
                "distance": {
                  "description": "The distance for the step in metres.",
                  "example": 245,
                  "format": "double",
                  "type": "number"
                },
                "duration": {
                  "description": "The duration for the step in seconds.",
                  "example": 96.2,
                  "format": "double",
                  "type": "number"
                },
                "exit_bearings": {
                  "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                  "example": [
                    10,
                    45,
                    60
                  ],
                  "items": {
                    "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "roundabout_exits",
                      "value": true
                    }
                  },
                  "type": "array",
                  "x-validWhen": {
                    "ref": "roundabout_exits",
                    "value": true
                  }
                },
                "exit_number": {
                  "description": "Only for roundabouts. Contains the number of the exit to take.",
                  "example": 2,
                  "format": "int32",
                  "type": "integer"
                },
                "instruction": {
                  "description": "The routing instruction text for the step.",
                  "example": "Turn right onto Berliner Straße",
                  "type": "string"
                },
                "maneuver": {
                  "description": "Maneuver object of the step",
                  "properties": {
                    "bearing_after": {
                      "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                      "example": 96,
                      "format": "int32",
                      "type": "integer"
                    },
                    "bearing_before": {
                      "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                      "example": 24,
                      "format": "int32",
                      "type": "integer"
                    },
                    "location": {
                      "description": "The coordinate of the point where a maneuver takes place.",
                      "example": [
                        8.678962,
                        49.407819
                      ],
                      "items": {
                        "description": "The coordinate of the point where a maneuver takes place.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-validWhen": {
                    "ref": "maneuvers",
                    "value": true
                  }
                },
                "name": {
                  "description": "The name of the next street.",
                  "example": "Berliner Straße",
                  "type": "string"
                },
                "type": {
                  "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "way_points": {
                  "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                  "example": [
                    45,
                    48
                  ],
                  "items": {
                    "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JSONStep": {
        "description": "Step of a route segment",
        "properties": {
          "distance": {
            "description": "The distance for the step in metres.",
            "example": 245,
            "format": "double",
            "type": "number"
          },
          "duration": {
            "description": "The duration for the step in seconds.",
            "example": 96.2,
            "format": "double",
            "type": "number"
          },
          "exit_bearings": {
            "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
            "example": [
              10,
              45,
              60
            ],
            "items": {
              "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
              "format": "int32",
              "type": "integer",
              "x-validWhen": {
                "ref": "roundabout_exits",
                "value": true
              }
            },
            "type": "array",
            "x-validWhen": {
              "ref": "roundabout_exits",
              "value": true
            }
          },
          "exit_number": {
            "description": "Only for roundabouts. Contains the number of the exit to take.",
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "instruction": {
            "description": "The routing instruction text for the step.",
            "example": "Turn right onto Berliner Straße",
            "type": "string"
          },
          "maneuver": {
            "description": "Maneuver object of the step",
            "properties": {
              "bearing_after": {
                "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
                "example": 96,
                "format": "int32",
                "type": "integer"
              },
              "bearing_before": {
                "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
                "example": 24,
                "format": "int32",
                "type": "integer"
              },
              "location": {
                "description": "The coordinate of the point where a maneuver takes place.",
                "example": [
                  8.678962,
                  49.407819
                ],
                "items": {
                  "description": "The coordinate of the point where a maneuver takes place.",
                  "format": "double",
                  "type": "number"
                },
                "type": "array"
              }
            },
            "type": "object",
            "x-validWhen": {
              "ref": "maneuvers",
              "value": true
            }
          },
          "name": {
            "description": "The name of the next street.",
            "example": "Berliner Straße",
            "type": "string"
          },
          "type": {
            "description": "The [instruction](https://GIScience.github.io/openrouteservice/documentation/Instruction-Types.html) action for symbolisation purposes.",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "way_points": {
            "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
            "example": [
              45,
              48
            ],
            "items": {
              "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JSONStepManeuver": {
        "description": "Maneuver object of the step",
        "properties": {
          "bearing_after": {
            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
            "example": 96,
            "format": "int32",
            "type": "integer"
          },
          "bearing_before": {
            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
            "example": 24,
            "format": "int32",
            "type": "integer"
          },
          "location": {
            "description": "The coordinate of the point where a maneuver takes place.",
            "example": [
              8.678962,
              49.407819
            ],
            "items": {
              "description": "The coordinate of the point where a maneuver takes place.",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-validWhen": {
          "ref": "maneuvers",
          "value": true
        }
      },
      "JSONSummary": {
        "description": "Contains total sums of duration, route distance and actual distance of the route.",
        "properties": {
          "ascent": {
            "description": "Total ascent in meters.",
            "example": 166.3,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "elevation",
              "value": true
            }
          },
          "descent": {
            "description": "Total descent in meters.",
            "example": 201.3,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "elevation",
              "value": true
            }
          },
          "distance": {
            "description": "Total route distance in specified units.",
            "example": 12.6,
            "format": "double",
            "type": "number"
          },
          "duration": {
            "description": "Total duration in seconds.",
            "example": 604,
            "format": "double",
            "type": "number"
          },
          "fare": {
            "format": "int32",
            "type": "integer"
          },
          "transfers": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JSONWarning": {
        "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
        "properties": {
          "code": {
            "description": "Identification code for the warning",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "description": "The message associated with the warning",
            "example": "This route may go over restricted roads",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JsonEdge": {
        "properties": {
          "fromId": {
            "description": "Id of the start point of the edge",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "toId": {
            "description": "Id of the end point of the edge",
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "weight": {
            "description": "Weight of the corresponding edge in the given bounding box",
            "example": 123.45,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "JsonEdgeExtra": {
        "properties": {
          "edgeId": {
            "description": "Id of the corresponding edge in the graph",
            "example": "1",
            "type": "string"
          },
          "extra": {
            "description": "Extra info stored on the edge",
            "example": {
              "surface_quality_known": "true"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "JsonExportResponse": {
        "description": "The Export Response contains nodes and edge weights from the requested BBox",
        "properties": {
          "edges": {
            "items": {
              "properties": {
                "fromId": {
                  "description": "Id of the start point of the edge",
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "toId": {
                  "description": "Id of the end point of the edge",
                  "example": 2,
                  "format": "int32",
                  "type": "integer"
                },
                "weight": {
                  "description": "Weight of the corresponding edge in the given bounding box",
                  "example": 123.45,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "edges_count": {
            "format": "int64",
            "type": "integer"
          },
          "edges_extra": {
            "items": {
              "properties": {
                "edgeId": {
                  "description": "Id of the corresponding edge in the graph",
                  "example": "1",
                  "type": "string"
                },
                "extra": {
                  "description": "Extra info stored on the edge",
                  "example": {
                    "surface_quality_known": "true"
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nodes": {
            "items": {
              "properties": {
                "location": {
                  "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                  "example": [
                    8.678962,
                    49.40783
                  ],
                  "items": {
                    "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "nodeId": {
                  "description": "Id of the corresponding node in the graph",
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nodes_count": {
            "format": "int64",
            "type": "integer"
          },
          "warning": {
            "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.",
            "properties": {
              "code": {
                "description": "Identification code for the warning",
                "example": 1,
                "format": "int32",
                "type": "integer"
              },
              "message": {
                "description": "The message associated with the warning",
                "example": "This route may go over restricted roads",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "JsonNode": {
        "properties": {
          "location": {
            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
            "example": [
              8.678962,
              49.40783
            ],
            "items": {
              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "nodeId": {
            "description": "Id of the corresponding node in the graph",
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MatrixRequest": {
        "description": "The JSON body request sent to the matrix service which defines options and parameters regarding the matrix to generate.",
        "properties": {
          "destinations": {
            "default": [
              "all"
            ],
            "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
            "items": {
              "default": "[\"all\"]",
              "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request",
            "type": "string"
          },
          "locations": {
            "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
            "example": [
              [
                9.70093,
                48.477473
              ],
              [
                9.207916,
                49.153868
              ],
              [
                37.573242,
                55.801281
              ],
              [
                115.663757,
                38.106467
              ]
            ],
            "items": {
              "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
              "example": [
                [
                  9.70093,
                  48.477473
                ],
                [
                  9.207916,
                  49.153868
                ],
                [
                  37.573242,
                  55.801281
                ],
                [
                  115.663757,
                  38.106467
                ]
              ],
              "items": {
                "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "metrics": {
            "default": [
              "duration"
            ],
            "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
            "items": {
              "default": "[\"duration\"]",
              "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
              "enum": [
                "distance",
                "duration"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "resolve_locations": {
            "default": false,
            "description": "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in `destinations` and `sources` will contain a `name` element that identifies the name of the closest street. Default is `false`. ",
            "type": "boolean"
          },
          "sources": {
            "default": [
              "all"
            ],
            "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
            "items": {
              "default": "[\"all\"]",
              "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
              "type": "string"
            },
            "type": "array"
          },
          "units": {
            "default": "m",
            "description": "Specifies the distance unit.\nDefault: m.",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "type": "string",
            "x-validWhen": {
              "ref": "metrics",
              "value": "distance"
            }
          }
        },
        "required": [
          "locations"
        ],
        "type": "object"
      },
      "MatrixResponse": {
        "description": "The Matrix Response contains one matrix for each specified `metrics` value.",
        "properties": {
          "destinations": {
            "description": "The individual destinations of the matrix calculations.",
            "items": {
              "description": "The individual destinations of the matrix calculations.",
              "properties": {
                "location": {
                  "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                  "example": [
                    8.678962,
                    49.40783
                  ],
                  "items": {
                    "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                  "example": "Bergheimer Straße",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "resolve_locations",
                    "value": true
                  }
                },
                "snapped_distance": {
                  "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                  "example": 1.2,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "distances": {
            "description": "The distances of the matrix calculations.",
            "example": [
              [
                0,
                0.25
              ],
              [
                0.25,
                0
              ]
            ],
            "items": {
              "description": "The distances of the matrix calculations.",
              "example": [
                [
                  0,
                  0.25
                ],
                [
                  0.25,
                  0
                ]
              ],
              "items": {
                "description": "The distances of the matrix calculations.",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "durations": {
            "description": "The durations of the matrix calculations.",
            "example": [
              [
                0,
                25
              ],
              [
                25,
                0
              ]
            ],
            "items": {
              "description": "The durations of the matrix calculations.",
              "example": [
                [
                  0,
                  25
                ],
                [
                  25,
                  0
                ]
              ],
              "items": {
                "description": "The durations of the matrix calculations.",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Information about the request",
            "properties": {
              "attribution": {
                "description": "Copyright and attribution information",
                "example": "openrouteservice.org, OpenStreetMap contributors",
                "type": "string"
              },
              "engine": {
                "description": "Information about the openrouteservice engine used",
                "properties": {
                  "build_date": {
                    "description": "The date that the service was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "graph_date": {
                    "description": "The date that the graph data was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "version": {
                    "description": "The backend version of the openrouteservice that was queried",
                    "example": "8.0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the request (as passed in by the query)",
                "example": "request123",
                "type": "string"
              },
              "osm_file_md5_hash": {
                "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                "example": "c0327ba6",
                "type": "string"
              },
              "query": {
                "description": "The JSON body request sent to the matrix service which defines options and parameters regarding the matrix to generate.",
                "properties": {
                  "destinations": {
                    "default": [
                      "all"
                    ],
                    "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                    "items": {
                      "default": "[\"all\"]",
                      "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                    "example": [
                      [
                        9.70093,
                        48.477473
                      ],
                      [
                        9.207916,
                        49.153868
                      ],
                      [
                        37.573242,
                        55.801281
                      ],
                      [
                        115.663757,
                        38.106467
                      ]
                    ],
                    "items": {
                      "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                      "example": [
                        [
                          9.70093,
                          48.477473
                        ],
                        [
                          9.207916,
                          49.153868
                        ],
                        [
                          37.573242,
                          55.801281
                        ],
                        [
                          115.663757,
                          38.106467
                        ]
                      ],
                      "items": {
                        "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "metrics": {
                    "default": [
                      "duration"
                    ],
                    "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                    "items": {
                      "default": "[\"duration\"]",
                      "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                      "enum": [
                        "distance",
                        "duration"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "resolve_locations": {
                    "default": false,
                    "description": "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in `destinations` and `sources` will contain a `name` element that identifies the name of the closest street. Default is `false`. ",
                    "type": "boolean"
                  },
                  "sources": {
                    "default": [
                      "all"
                    ],
                    "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                    "items": {
                      "default": "[\"all\"]",
                      "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "units": {
                    "default": "m",
                    "description": "Specifies the distance unit.\nDefault: m.",
                    "enum": [
                      "m",
                      "km",
                      "mi"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "metrics",
                      "value": "distance"
                    }
                  }
                },
                "required": [
                  "locations"
                ],
                "type": "object"
              },
              "service": {
                "description": "The service that was requested",
                "example": "matrix",
                "type": "string"
              },
              "system_message": {
                "description": "System message",
                "example": "A message string configured in the service",
                "type": "string"
              },
              "timestamp": {
                "description": "Time that the request was made (UNIX Epoch time)",
                "example": 1549549847974,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sources": {
            "description": "The individual sources of the matrix calculations.",
            "items": {
              "description": "The individual sources of the matrix calculations.",
              "properties": {
                "location": {
                  "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                  "example": [
                    8.678962,
                    49.40783
                  ],
                  "items": {
                    "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                  "example": "Bergheimer Straße",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "resolve_locations",
                    "value": true
                  }
                },
                "snapped_distance": {
                  "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                  "example": 1.2,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MatrixResponseInfo": {
        "description": "Information about the request",
        "properties": {
          "attribution": {
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org, OpenStreetMap contributors",
            "type": "string"
          },
          "engine": {
            "description": "Information about the openrouteservice engine used",
            "properties": {
              "build_date": {
                "description": "The date that the service was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "graph_date": {
                "description": "The date that the graph data was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "version": {
                "description": "The backend version of the openrouteservice that was queried",
                "example": "8.0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the request (as passed in by the query)",
            "example": "request123",
            "type": "string"
          },
          "osm_file_md5_hash": {
            "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
            "example": "c0327ba6",
            "type": "string"
          },
          "query": {
            "description": "The JSON body request sent to the matrix service which defines options and parameters regarding the matrix to generate.",
            "properties": {
              "destinations": {
                "default": [
                  "all"
                ],
                "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                "items": {
                  "default": "[\"all\"]",
                  "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Arbitrary identification string of the request reflected in the meta information.",
                "example": "my_request",
                "type": "string"
              },
              "locations": {
                "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                "example": [
                  [
                    9.70093,
                    48.477473
                  ],
                  [
                    9.207916,
                    49.153868
                  ],
                  [
                    37.573242,
                    55.801281
                  ],
                  [
                    115.663757,
                    38.106467
                  ]
                ],
                "items": {
                  "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                  "example": [
                    [
                      9.70093,
                      48.477473
                    ],
                    [
                      9.207916,
                      49.153868
                    ],
                    [
                      37.573242,
                      55.801281
                    ],
                    [
                      115.663757,
                      38.106467
                    ]
                  ],
                  "items": {
                    "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              "metrics": {
                "default": [
                  "duration"
                ],
                "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                "items": {
                  "default": "[\"duration\"]",
                  "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
                  "enum": [
                    "distance",
                    "duration"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "resolve_locations": {
                "default": false,
                "description": "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in `destinations` and `sources` will contain a `name` element that identifies the name of the closest street. Default is `false`. ",
                "type": "boolean"
              },
              "sources": {
                "default": [
                  "all"
                ],
                "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                "items": {
                  "default": "[\"all\"]",
                  "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
                  "type": "string"
                },
                "type": "array"
              },
              "units": {
                "default": "m",
                "description": "Specifies the distance unit.\nDefault: m.",
                "enum": [
                  "m",
                  "km",
                  "mi"
                ],
                "type": "string",
                "x-validWhen": {
                  "ref": "metrics",
                  "value": "distance"
                }
              }
            },
            "required": [
              "locations"
            ],
            "type": "object"
          },
          "service": {
            "description": "The service that was requested",
            "example": "matrix",
            "type": "string"
          },
          "system_message": {
            "description": "System message",
            "example": "A message string configured in the service",
            "type": "string"
          },
          "timestamp": {
            "description": "Time that the request was made (UNIX Epoch time)",
            "example": 1549549847974,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Restrictions": {
        "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
        "properties": {
          "axleload": {
            "description": "Axleload restriction in tons.",
            "example": 50,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "hazmat": {
            "default": false,
            "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
            "type": "boolean",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "height": {
            "description": "Height restriction in metres. ",
            "example": 4.2,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "length": {
            "description": "Length restriction in metres.",
            "example": 8.4,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "maximum_incline": {
            "default": 6,
            "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
            "format": "int32",
            "type": "integer",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "maximum_sloped_kerb": {
            "default": 0.6,
            "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "minimum_width": {
            "description": "Specifies the minimum width of the footway in metres.",
            "example": 2.5,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "smoothness_type": {
            "default": "good",
            "description": "Specifies the minimum smoothness of the route. Default is `good`.",
            "enum": [
              "excellent",
              "good",
              "intermediate",
              "bad",
              "very_bad",
              "horrible",
              "very_horrible",
              "impassable"
            ],
            "type": "string",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "surface_type": {
            "default": "sett",
            "description": "Specifies the minimum surface type. Default is `sett`. ",
            "type": "string",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "track_type": {
            "default": "grade1",
            "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
            "type": "string",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "weight": {
            "description": "Weight restriction in tons. ",
            "example": 40,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "width": {
            "description": "Width restriction in metres.",
            "example": 5.6,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          }
        },
        "type": "object"
      },
      "RouteResponseInfo": {
        "description": "Information about the request",
        "properties": {
          "attribution": {
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org | OpenStreetMap contributors",
            "type": "string"
          },
          "engine": {
            "description": "Information about the openrouteservice engine used",
            "properties": {
              "build_date": {
                "description": "The date that the service was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "graph_date": {
                "description": "The date that the graph data was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "version": {
                "description": "The backend version of the openrouteservice that was queried",
                "example": "8.0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the request (as passed in by the query)",
            "example": "request123",
            "type": "string"
          },
          "osm_file_md5_hash": {
            "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
            "example": "c0327ba6",
            "type": "string"
          },
          "query": {
            "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
            "properties": {
              "alternative_routes": {
                "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
                "example": {
                  "target_count": 2,
                  "weight_factor": 1.6
                },
                "properties": {
                  "share_factor": {
                    "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                    "example": 0.6,
                    "format": "double",
                    "type": "number"
                  },
                  "target_count": {
                    "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                    "example": 2,
                    "format": "int32",
                    "type": "integer"
                  },
                  "weight_factor": {
                    "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                    "example": 1.4,
                    "format": "double",
                    "type": "number"
                  }
                },
                "title": "Alternative Routes",
                "type": "object"
              },
              "attributes": {
                "description": "List of route attributes",
                "example": [
                  "avgspeed",
                  "percentage"
                ],
                "items": {
                  "description": "List of route attributes",
                  "enum": [
                    "avgspeed",
                    "detourfactor",
                    "percentage"
                  ],
                  "example": "[\"avgspeed\",\"percentage\"]",
                  "type": "string"
                },
                "type": "array"
              },
              "bearings": {
                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                "example": [
                  [
                    30,
                    20
                  ],
                  [],
                  [
                    40,
                    20
                  ]
                ],
                "items": {
                  "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                  "example": [
                    [
                      30,
                      20
                    ],
                    [],
                    [
                      40,
                      20
                    ]
                  ],
                  "items": {
                    "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                    "format": "double",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  },
                  "type": "array",
                  "x-validWhen": {
                    "ref": "profile",
                    "value": "cycling-*"
                  }
                },
                "type": "array",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "cycling-*"
                }
              },
              "continue_straight": {
                "default": false,
                "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
                "type": "boolean"
              },
              "coordinates": {
                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                "example": [
                  [
                    8.681495,
                    49.41461
                  ],
                  [
                    8.686507,
                    49.41943
                  ],
                  [
                    8.687872,
                    49.420318
                  ]
                ],
                "items": {
                  "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                  "example": [
                    [
                      8.681495,
                      49.41461
                    ],
                    [
                      8.686507,
                      49.41943
                    ],
                    [
                      8.687872,
                      49.420318
                    ]
                  ],
                  "items": {
                    "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              "elevation": {
                "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
                "example": false,
                "type": "boolean"
              },
              "extra_info": {
                "description": "The extra info items to include in the response",
                "example": [
                  "waytype",
                  "surface"
                ],
                "items": {
                  "description": "Specify which extra info items to include in the response",
                  "enum": [
                    "steepness",
                    "suitability",
                    "surface",
                    "waycategory",
                    "waytype",
                    "tollways",
                    "traildifficulty",
                    "osmid",
                    "roadaccessrestrictions",
                    "countryinfo",
                    "green",
                    "noise",
                    "csv",
                    "shadow"
                  ],
                  "example": "[\"waytype\",\"surface\"]",
                  "type": "string"
                },
                "type": "array"
              },
              "geometry": {
                "default": true,
                "description": "Specifies whether to return geometry. ",
                "type": "boolean",
                "x-validWhen": {
                  "ref": "format",
                  "value": [
                    "json"
                  ]
                }
              },
              "geometry_simplify": {
                "default": false,
                "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
                "type": "boolean"
              },
              "id": {
                "description": "Arbitrary identification string of the request reflected in the meta information.",
                "example": "my_request",
                "type": "string"
              },
              "ignore_transfers": {
                "default": false,
                "description": "Specifies if transfers as criterion should be ignored.",
                "example": true,
                "type": "boolean",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "public-transport"
                }
              },
              "instructions": {
                "default": true,
                "description": "Specifies whether to return instructions.",
                "type": "boolean"
              },
              "instructions_format": {
                "default": "text",
                "description": "Select html for more verbose instructions.",
                "enum": [
                  "html",
                  "text"
                ],
                "type": "string"
              },
              "language": {
                "default": "en",
                "description": "Language for the route instructions.",
                "enum": [
                  "cs",
                  "cs-cz",
                  "de",
                  "de-de",
                  "en",
                  "en-us",
                  "eo",
                  "eo-eo",
                  "es",
                  "es-es",
                  "fr",
                  "fr-fr",
                  "gr",
                  "gr-gr",
                  "he",
                  "he-il",
                  "hu",
                  "hu-hu",
                  "id",
                  "id-id",
                  "it",
                  "it-it",
                  "ja",
                  "ja-jp",
                  "ne",
                  "ne-np",
                  "nl",
                  "nl-nl",
                  "nb",
                  "nb-no",
                  "pl",
                  "pl-pl",
                  "pt",
                  "pt-pt",
                  "ro",
                  "ro-ro",
                  "ru",
                  "ru-ru",
                  "tr",
                  "tr-tr",
                  "zh",
                  "zh-cn"
                ],
                "type": "string"
              },
              "maneuvers": {
                "default": false,
                "description": "Specifies whether the maneuver object is included into the step object or not. ",
                "type": "boolean"
              },
              "maximum_speed": {
                "description": "The maximum speed specified by user.",
                "example": 90,
                "format": "double",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-*"
                }
              },
              "options": {
                "description": "Advanced options for routing",
                "example": {
                  "avoid_borders": "controlled"
                },
                "properties": {
                  "avoid_borders": {
                    "description": "Specify which type of border crossing to avoid",
                    "enum": [
                      "all",
                      "controlled",
                      "none"
                    ],
                    "example": "controlled",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "avoid_countries": {
                    "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                    "example": [
                      11,
                      193
                    ],
                    "items": {
                      "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                      "example": "[11,193]",
                      "type": "string",
                      "x-validWhen": {
                        "ref": "profile",
                        "value": "driving-*"
                      }
                    },
                    "type": "array",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-*"
                    }
                  },
                  "avoid_features": {
                    "description": "List of features to avoid. ",
                    "example": [
                      "highways"
                    ],
                    "items": {
                      "description": "Definition of the features to be avoided.",
                      "enum": [
                        "highways",
                        "tollways",
                        "ferries",
                        "fords",
                        "steps"
                      ],
                      "example": "[\"highways\"]",
                      "type": "string",
                      "x-itemRestrictions": {
                        "itemsWhen": {
                          "cycling-*": [
                            "ferries",
                            "steps",
                            "fords"
                          ],
                          "driving-*": [
                            "highways",
                            "tollways",
                            "ferries"
                          ],
                          "foot-*": [
                            "ferries",
                            "fords",
                            "steps"
                          ],
                          "wheelchair": [
                            "ferries",
                            "steps"
                          ]
                        },
                        "ref": "profile"
                      }
                    },
                    "type": "array",
                    "x-itemRestrictions": {
                      "itemsWhen": {
                        "cycling-*": [
                          "ferries",
                          "steps",
                          "fords"
                        ],
                        "driving-*": [
                          "highways",
                          "tollways",
                          "ferries"
                        ],
                        "foot-*": [
                          "ferries",
                          "fords",
                          "steps"
                        ],
                        "wheelchair": [
                          "ferries",
                          "steps"
                        ]
                      },
                      "ref": "profile"
                    }
                  },
                  "avoid_polygons": {
                    "additionalProperties": {
                      "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                      "type": "object"
                    },
                    "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                    "properties": {
                      "empty": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "profile_params": {
                    "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                    "properties": {
                      "allow_unsuitable": {
                        "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                        "example": true,
                        "type": "boolean",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "restrictions": {
                        "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                        "properties": {
                          "axleload": {
                            "description": "Axleload restriction in tons.",
                            "example": 50,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "hazmat": {
                            "default": false,
                            "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                            "type": "boolean",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "height": {
                            "description": "Height restriction in metres. ",
                            "example": 4.2,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "length": {
                            "description": "Length restriction in metres.",
                            "example": 8.4,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "maximum_incline": {
                            "default": 6,
                            "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                            "format": "int32",
                            "type": "integer",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "maximum_sloped_kerb": {
                            "default": 0.6,
                            "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "minimum_width": {
                            "description": "Specifies the minimum width of the footway in metres.",
                            "example": 2.5,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "smoothness_type": {
                            "default": "good",
                            "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                            "enum": [
                              "excellent",
                              "good",
                              "intermediate",
                              "bad",
                              "very_bad",
                              "horrible",
                              "very_horrible",
                              "impassable"
                            ],
                            "type": "string",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "surface_type": {
                            "default": "sett",
                            "description": "Specifies the minimum surface type. Default is `sett`. ",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "track_type": {
                            "default": "grade1",
                            "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                            "type": "string",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "wheelchair"
                            }
                          },
                          "weight": {
                            "description": "Weight restriction in tons. ",
                            "example": 40,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          },
                          "width": {
                            "description": "Width restriction in metres.",
                            "example": 5.6,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "driving-hgv"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "surface_quality_known": {
                        "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                        "example": true,
                        "type": "boolean",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "weightings": {
                        "description": "Describe additional weightings to be applied to edges on the routing.",
                        "properties": {
                          "green": {
                            "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                            "example": 0.4,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "foot-*"
                            }
                          },
                          "quiet": {
                            "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                            "example": 0.8,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "foot-*"
                            }
                          },
                          "shadow": {
                            "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                            "example": 0.4,
                            "format": "float",
                            "type": "number",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "foot-*"
                            }
                          },
                          "steepness_difficulty": {
                            "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                            "example": 2,
                            "format": "int32",
                            "type": "integer",
                            "x-validWhen": {
                              "ref": "profile",
                              "value": "cycling-*"
                            }
                          }
                        },
                        "title": "Profile Weightings",
                        "type": "object"
                      }
                    },
                    "title": "Profile Parameters",
                    "type": "object",
                    "x-validWhen": {
                      "ref": "profile",
                      "valueNot": "driving-car"
                    }
                  },
                  "round_trip": {
                    "description": "Specifies the parameters for generating round trip routes.",
                    "example": {
                      "length": 10000,
                      "points": 5
                    },
                    "properties": {
                      "length": {
                        "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                        "example": 10000,
                        "format": "float",
                        "type": "number"
                      },
                      "points": {
                        "description": "The number of points to use on the route. Larger values create more circular routes.",
                        "example": 5,
                        "format": "int32",
                        "type": "integer"
                      },
                      "seed": {
                        "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "title": "Round Trip Route Options",
                    "type": "object"
                  },
                  "vehicle_type": {
                    "default": "hgv",
                    "description": "Definition of the vehicle type.",
                    "enum": [
                      "hgv",
                      "bus",
                      "agricultural",
                      "delivery",
                      "forestry",
                      "goods",
                      "unknown"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  }
                },
                "title": "Route Options",
                "type": "object"
              },
              "preference": {
                "default": "recommended",
                "description": "Specifies the route preference",
                "enum": [
                  "fastest",
                  "shortest",
                  "recommended"
                ],
                "type": "string"
              },
              "radiuses": {
                "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                "example": [
                  200,
                  -1,
                  30
                ],
                "items": {
                  "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
                  "format": "double",
                  "type": "number"
                },
                "type": "array"
              },
              "roundabout_exits": {
                "default": false,
                "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
                "type": "boolean"
              },
              "schedule": {
                "default": false,
                "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
                "example": true,
                "type": "boolean",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "public-transport"
                }
              },
              "schedule_duration": {
                "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                "example": "PT30M",
                "type": "string",
                "x-validWhen": {
                  "ref": "schedule",
                  "value": true
                }
              },
              "schedule_rows": {
                "description": "The maximum amount of entries that should be returned when requesting a schedule.",
                "example": 3,
                "format": "int32",
                "type": "integer",
                "x-validWhen": {
                  "ref": "schedule",
                  "value": true
                }
              },
              "skip_segments": {
                "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                "example": [
                  2,
                  4
                ],
                "items": {
                  "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "suppress_warnings": {
                "description": "Suppress warning messages in the response",
                "example": false,
                "type": "boolean"
              },
              "units": {
                "default": "m",
                "description": "Specifies the distance unit.",
                "enum": [
                  "m",
                  "km",
                  "mi"
                ],
                "type": "string"
              },
              "walking_time": {
                "default": "PT15M",
                "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
                "example": "PT30M",
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "public-transport"
                }
              }
            },
            "required": [
              "coordinates"
            ],
            "title": "Directions Service",
            "type": "object"
          },
          "service": {
            "description": "The service that was requested",
            "example": "routing",
            "type": "string"
          },
          "system_message": {
            "description": "System message",
            "example": "A message string configured in the service",
            "type": "string"
          },
          "timestamp": {
            "description": "Time that the request was made (UNIX Epoch time)",
            "example": 1549549847974,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SnappingRequest": {
        "description": "Snapping service endpoint.",
        "properties": {
          "id": {
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request",
            "type": "string"
          },
          "locations": {
            "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
            "example": [
              [
                8.681495,
                49.41461
              ],
              [
                8.686507,
                49.41943
              ]
            ],
            "items": {
              "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
              "example": [
                [
                  8.681495,
                  49.41461
                ],
                [
                  8.686507,
                  49.41943
                ]
              ],
              "items": {
                "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "radius": {
            "description": "Maximum radius in meters around given coordinates to search for graph edges.",
            "example": 300,
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "locations",
          "radius"
        ],
        "type": "object"
      },
      "SnappingResponse": {
        "description": "The Snapping Response contains the snapped coordinates.",
        "properties": {
          "locations": {
            "description": "The snapped locations as coordinates and snapping distance.",
            "items": {
              "description": "The snapped locations as coordinates and snapping distance.",
              "properties": {
                "location": {
                  "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                  "example": [
                    8.678962,
                    49.40783
                  ],
                  "items": {
                    "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
                  "example": "Bergheimer Straße",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "resolve_locations",
                    "value": true
                  }
                },
                "snapped_distance": {
                  "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
                  "example": 1.2,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Information about the request",
            "properties": {
              "attribution": {
                "description": "Copyright and attribution information",
                "example": "openrouteservice.org | OpenStreetMap contributors",
                "type": "string"
              },
              "engine": {
                "description": "Information about the openrouteservice engine used",
                "properties": {
                  "build_date": {
                    "description": "The date that the service was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "graph_date": {
                    "description": "The date that the graph data was last updated",
                    "example": "2019-02-07T14:28:11Z",
                    "type": "string"
                  },
                  "version": {
                    "description": "The backend version of the openrouteservice that was queried",
                    "example": "8.0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "osm_file_md5_hash": {
                "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
                "example": "c0327ba6",
                "type": "string"
              },
              "query": {
                "description": "Snapping service endpoint.",
                "properties": {
                  "id": {
                    "description": "Arbitrary identification string of the request reflected in the meta information.",
                    "example": "my_request",
                    "type": "string"
                  },
                  "locations": {
                    "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                    "example": [
                      [
                        8.681495,
                        49.41461
                      ],
                      [
                        8.686507,
                        49.41943
                      ]
                    ],
                    "items": {
                      "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                      "example": [
                        [
                          8.681495,
                          49.41461
                        ],
                        [
                          8.686507,
                          49.41943
                        ]
                      ],
                      "items": {
                        "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                        "format": "double",
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "radius": {
                    "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                    "example": 300,
                    "format": "double",
                    "type": "number"
                  }
                },
                "required": [
                  "locations",
                  "radius"
                ],
                "type": "object"
              },
              "service": {
                "description": "The service that was requested",
                "example": "snap",
                "type": "string"
              },
              "system_message": {
                "description": "System message",
                "example": "A message string configured in the service",
                "type": "string"
              },
              "timestamp": {
                "description": "Time that the request was made (UNIX Epoch time)",
                "example": 1549549847974,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SnappingResponseInfo": {
        "description": "Information about the request",
        "properties": {
          "attribution": {
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org | OpenStreetMap contributors",
            "type": "string"
          },
          "engine": {
            "description": "Information about the openrouteservice engine used",
            "properties": {
              "build_date": {
                "description": "The date that the service was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "graph_date": {
                "description": "The date that the graph data was last updated",
                "example": "2019-02-07T14:28:11Z",
                "type": "string"
              },
              "version": {
                "description": "The backend version of the openrouteservice that was queried",
                "example": "8.0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "osm_file_md5_hash": {
            "description": "The MD5 hash of the OSM planet file that was used for generating graphs",
            "example": "c0327ba6",
            "type": "string"
          },
          "query": {
            "description": "Snapping service endpoint.",
            "properties": {
              "id": {
                "description": "Arbitrary identification string of the request reflected in the meta information.",
                "example": "my_request",
                "type": "string"
              },
              "locations": {
                "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                "example": [
                  [
                    8.681495,
                    49.41461
                  ],
                  [
                    8.686507,
                    49.41943
                  ]
                ],
                "items": {
                  "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                  "example": [
                    [
                      8.681495,
                      49.41461
                    ],
                    [
                      8.686507,
                      49.41943
                    ]
                  ],
                  "items": {
                    "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              "radius": {
                "description": "Maximum radius in meters around given coordinates to search for graph edges.",
                "example": 300,
                "format": "double",
                "type": "number"
              }
            },
            "required": [
              "locations",
              "radius"
            ],
            "type": "object"
          },
          "service": {
            "description": "The service that was requested",
            "example": "snap",
            "type": "string"
          },
          "system_message": {
            "description": "System message",
            "example": "A message string configured in the service",
            "type": "string"
          },
          "timestamp": {
            "description": "Time that the request was made (UNIX Epoch time)",
            "example": 1549549847974,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "alternativeRoutes": {
        "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
        "example": {
          "target_count": 2,
          "weight_factor": 1.6
        },
        "properties": {
          "share_factor": {
            "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
            "example": 0.6,
            "format": "double",
            "type": "number"
          },
          "target_count": {
            "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "weight_factor": {
            "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
            "example": 1.4,
            "format": "double",
            "type": "number"
          }
        },
        "title": "Alternative Routes",
        "type": "object"
      },
      "directionsService": {
        "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.",
        "properties": {
          "alternative_routes": {
            "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
            "example": {
              "target_count": 2,
              "weight_factor": 1.6
            },
            "properties": {
              "share_factor": {
                "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
                "example": 0.6,
                "format": "double",
                "type": "number"
              },
              "target_count": {
                "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
                "example": 2,
                "format": "int32",
                "type": "integer"
              },
              "weight_factor": {
                "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
                "example": 1.4,
                "format": "double",
                "type": "number"
              }
            },
            "title": "Alternative Routes",
            "type": "object"
          },
          "attributes": {
            "description": "List of route attributes",
            "example": [
              "avgspeed",
              "percentage"
            ],
            "items": {
              "description": "List of route attributes",
              "enum": [
                "avgspeed",
                "detourfactor",
                "percentage"
              ],
              "example": "[\"avgspeed\",\"percentage\"]",
              "type": "string"
            },
            "type": "array"
          },
          "bearings": {
            "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
            "example": [
              [
                30,
                20
              ],
              [],
              [
                40,
                20
              ]
            ],
            "items": {
              "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
              "example": [
                [
                  30,
                  20
                ],
                [],
                [
                  40,
                  20
                ]
              ],
              "items": {
                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                "format": "double",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "cycling-*"
                }
              },
              "type": "array",
              "x-validWhen": {
                "ref": "profile",
                "value": "cycling-*"
              }
            },
            "type": "array",
            "x-validWhen": {
              "ref": "profile",
              "value": "cycling-*"
            }
          },
          "continue_straight": {
            "default": false,
            "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
            "type": "boolean"
          },
          "coordinates": {
            "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
            "example": [
              [
                8.681495,
                49.41461
              ],
              [
                8.686507,
                49.41943
              ],
              [
                8.687872,
                49.420318
              ]
            ],
            "items": {
              "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
              "example": [
                [
                  8.681495,
                  49.41461
                ],
                [
                  8.686507,
                  49.41943
                ],
                [
                  8.687872,
                  49.420318
                ]
              ],
              "items": {
                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "elevation": {
            "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
            "example": false,
            "type": "boolean"
          },
          "extra_info": {
            "description": "The extra info items to include in the response",
            "example": [
              "waytype",
              "surface"
            ],
            "items": {
              "description": "Specify which extra info items to include in the response",
              "enum": [
                "steepness",
                "suitability",
                "surface",
                "waycategory",
                "waytype",
                "tollways",
                "traildifficulty",
                "osmid",
                "roadaccessrestrictions",
                "countryinfo",
                "green",
                "noise",
                "csv",
                "shadow"
              ],
              "example": "[\"waytype\",\"surface\"]",
              "type": "string"
            },
            "type": "array"
          },
          "geometry": {
            "default": true,
            "description": "Specifies whether to return geometry. ",
            "type": "boolean",
            "x-validWhen": {
              "ref": "format",
              "value": [
                "json"
              ]
            }
          },
          "geometry_simplify": {
            "default": false,
            "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
            "type": "boolean"
          },
          "id": {
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request",
            "type": "string"
          },
          "ignore_transfers": {
            "default": false,
            "description": "Specifies if transfers as criterion should be ignored.",
            "example": true,
            "type": "boolean",
            "x-validWhen": {
              "ref": "profile",
              "value": "public-transport"
            }
          },
          "instructions": {
            "default": true,
            "description": "Specifies whether to return instructions.",
            "type": "boolean"
          },
          "instructions_format": {
            "default": "text",
            "description": "Select html for more verbose instructions.",
            "enum": [
              "html",
              "text"
            ],
            "type": "string"
          },
          "language": {
            "default": "en",
            "description": "Language for the route instructions.",
            "enum": [
              "cs",
              "cs-cz",
              "de",
              "de-de",
              "en",
              "en-us",
              "eo",
              "eo-eo",
              "es",
              "es-es",
              "fr",
              "fr-fr",
              "gr",
              "gr-gr",
              "he",
              "he-il",
              "hu",
              "hu-hu",
              "id",
              "id-id",
              "it",
              "it-it",
              "ja",
              "ja-jp",
              "ne",
              "ne-np",
              "nl",
              "nl-nl",
              "nb",
              "nb-no",
              "pl",
              "pl-pl",
              "pt",
              "pt-pt",
              "ro",
              "ro-ro",
              "ru",
              "ru-ru",
              "tr",
              "tr-tr",
              "zh",
              "zh-cn"
            ],
            "type": "string"
          },
          "maneuvers": {
            "default": false,
            "description": "Specifies whether the maneuver object is included into the step object or not. ",
            "type": "boolean"
          },
          "maximum_speed": {
            "description": "The maximum speed specified by user.",
            "example": 90,
            "format": "double",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-*"
            }
          },
          "options": {
            "description": "Advanced options for routing",
            "example": {
              "avoid_borders": "controlled"
            },
            "properties": {
              "avoid_borders": {
                "description": "Specify which type of border crossing to avoid",
                "enum": [
                  "all",
                  "controlled",
                  "none"
                ],
                "example": "controlled",
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-*"
                }
              },
              "avoid_countries": {
                "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                "example": [
                  11,
                  193
                ],
                "items": {
                  "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
                  "example": "[11,193]",
                  "type": "string",
                  "x-validWhen": {
                    "ref": "profile",
                    "value": "driving-*"
                  }
                },
                "type": "array",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-*"
                }
              },
              "avoid_features": {
                "description": "List of features to avoid. ",
                "example": [
                  "highways"
                ],
                "items": {
                  "description": "Definition of the features to be avoided.",
                  "enum": [
                    "highways",
                    "tollways",
                    "ferries",
                    "fords",
                    "steps"
                  ],
                  "example": "[\"highways\"]",
                  "type": "string",
                  "x-itemRestrictions": {
                    "itemsWhen": {
                      "cycling-*": [
                        "ferries",
                        "steps",
                        "fords"
                      ],
                      "driving-*": [
                        "highways",
                        "tollways",
                        "ferries"
                      ],
                      "foot-*": [
                        "ferries",
                        "fords",
                        "steps"
                      ],
                      "wheelchair": [
                        "ferries",
                        "steps"
                      ]
                    },
                    "ref": "profile"
                  }
                },
                "type": "array",
                "x-itemRestrictions": {
                  "itemsWhen": {
                    "cycling-*": [
                      "ferries",
                      "steps",
                      "fords"
                    ],
                    "driving-*": [
                      "highways",
                      "tollways",
                      "ferries"
                    ],
                    "foot-*": [
                      "ferries",
                      "fords",
                      "steps"
                    ],
                    "wheelchair": [
                      "ferries",
                      "steps"
                    ]
                  },
                  "ref": "profile"
                }
              },
              "avoid_polygons": {
                "additionalProperties": {
                  "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                  "type": "object"
                },
                "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
                "properties": {
                  "empty": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "profile_params": {
                "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
                "properties": {
                  "allow_unsuitable": {
                    "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "restrictions": {
                    "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                    "properties": {
                      "axleload": {
                        "description": "Axleload restriction in tons.",
                        "example": 50,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "hazmat": {
                        "default": false,
                        "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                        "type": "boolean",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "height": {
                        "description": "Height restriction in metres. ",
                        "example": 4.2,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "length": {
                        "description": "Length restriction in metres.",
                        "example": 8.4,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "maximum_incline": {
                        "default": 6,
                        "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                        "format": "int32",
                        "type": "integer",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "maximum_sloped_kerb": {
                        "default": 0.6,
                        "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "minimum_width": {
                        "description": "Specifies the minimum width of the footway in metres.",
                        "example": 2.5,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "smoothness_type": {
                        "default": "good",
                        "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                        "enum": [
                          "excellent",
                          "good",
                          "intermediate",
                          "bad",
                          "very_bad",
                          "horrible",
                          "very_horrible",
                          "impassable"
                        ],
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "surface_type": {
                        "default": "sett",
                        "description": "Specifies the minimum surface type. Default is `sett`. ",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "track_type": {
                        "default": "grade1",
                        "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                        "type": "string",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "wheelchair"
                        }
                      },
                      "weight": {
                        "description": "Weight restriction in tons. ",
                        "example": 40,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      },
                      "width": {
                        "description": "Width restriction in metres.",
                        "example": 5.6,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "driving-hgv"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "surface_quality_known": {
                    "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                    "example": true,
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "weightings": {
                    "description": "Describe additional weightings to be applied to edges on the routing.",
                    "properties": {
                      "green": {
                        "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                        "example": 0.4,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "foot-*"
                        }
                      },
                      "quiet": {
                        "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                        "example": 0.8,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "foot-*"
                        }
                      },
                      "shadow": {
                        "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                        "example": 0.4,
                        "format": "float",
                        "type": "number",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "foot-*"
                        }
                      },
                      "steepness_difficulty": {
                        "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                        "example": 2,
                        "format": "int32",
                        "type": "integer",
                        "x-validWhen": {
                          "ref": "profile",
                          "value": "cycling-*"
                        }
                      }
                    },
                    "title": "Profile Weightings",
                    "type": "object"
                  }
                },
                "title": "Profile Parameters",
                "type": "object",
                "x-validWhen": {
                  "ref": "profile",
                  "valueNot": "driving-car"
                }
              },
              "round_trip": {
                "description": "Specifies the parameters for generating round trip routes.",
                "example": {
                  "length": 10000,
                  "points": 5
                },
                "properties": {
                  "length": {
                    "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                    "example": 10000,
                    "format": "float",
                    "type": "number"
                  },
                  "points": {
                    "description": "The number of points to use on the route. Larger values create more circular routes.",
                    "example": 5,
                    "format": "int32",
                    "type": "integer"
                  },
                  "seed": {
                    "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                    "example": 1,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "title": "Round Trip Route Options",
                "type": "object"
              },
              "vehicle_type": {
                "default": "hgv",
                "description": "Definition of the vehicle type.",
                "enum": [
                  "hgv",
                  "bus",
                  "agricultural",
                  "delivery",
                  "forestry",
                  "goods",
                  "unknown"
                ],
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              }
            },
            "title": "Route Options",
            "type": "object"
          },
          "preference": {
            "default": "recommended",
            "description": "Specifies the route preference",
            "enum": [
              "fastest",
              "shortest",
              "recommended"
            ],
            "type": "string"
          },
          "radiuses": {
            "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
            "example": [
              200,
              -1,
              30
            ],
            "items": {
              "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "roundabout_exits": {
            "default": false,
            "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
            "type": "boolean"
          },
          "schedule": {
            "default": false,
            "description": "If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.",
            "example": true,
            "type": "boolean",
            "x-validWhen": {
              "ref": "profile",
              "value": "public-transport"
            }
          },
          "schedule_duration": {
            "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
            "example": "PT30M",
            "type": "string",
            "x-validWhen": {
              "ref": "schedule",
              "value": true
            }
          },
          "schedule_rows": {
            "description": "The maximum amount of entries that should be returned when requesting a schedule.",
            "example": 3,
            "format": "int32",
            "type": "integer",
            "x-validWhen": {
              "ref": "schedule",
              "value": true
            }
          },
          "skip_segments": {
            "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
            "example": [
              2,
              4
            ],
            "items": {
              "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "suppress_warnings": {
            "description": "Suppress warning messages in the response",
            "example": false,
            "type": "boolean"
          },
          "units": {
            "default": "m",
            "description": "Specifies the distance unit.",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "type": "string"
          },
          "walking_time": {
            "default": "PT15M",
            "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
            "example": "PT30M",
            "type": "string",
            "x-validWhen": {
              "ref": "profile",
              "value": "public-transport"
            }
          }
        },
        "required": [
          "coordinates"
        ],
        "title": "Directions Service",
        "type": "object"
      },
      "gpx": {
        "properties": {
          "gpxRouteElements": {
            "items": {
              "type": "object",
              "xml": {
                "name": "rte"
              }
            },
            "type": "array"
          }
        },
        "type": "object",
        "xml": {
          "name": "gpx"
        }
      },
      "graphExportService": {
        "description": "The request payload",
        "properties": {
          "bbox": {
            "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
            "example": [
              [
                8.681495,
                49.41461
              ],
              [
                8.686507,
                49.41943
              ]
            ],
            "items": {
              "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
              "example": [
                [
                  8.681495,
                  49.41461
                ],
                [
                  8.686507,
                  49.41943
                ]
              ],
              "items": {
                "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "id": {
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "export_request",
            "type": "string"
          }
        },
        "required": [
          "bbox"
        ],
        "title": "Graph export Service",
        "type": "object"
      },
      "profileParameters": {
        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
        "properties": {
          "allow_unsuitable": {
            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
            "example": true,
            "type": "boolean",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "restrictions": {
            "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
            "properties": {
              "axleload": {
                "description": "Axleload restriction in tons.",
                "example": 50,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              },
              "hazmat": {
                "default": false,
                "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                "type": "boolean",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              },
              "height": {
                "description": "Height restriction in metres. ",
                "example": 4.2,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              },
              "length": {
                "description": "Length restriction in metres.",
                "example": 8.4,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              },
              "maximum_incline": {
                "default": 6,
                "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                "format": "int32",
                "type": "integer",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "maximum_sloped_kerb": {
                "default": 0.6,
                "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "minimum_width": {
                "description": "Specifies the minimum width of the footway in metres.",
                "example": 2.5,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "smoothness_type": {
                "default": "good",
                "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                "enum": [
                  "excellent",
                  "good",
                  "intermediate",
                  "bad",
                  "very_bad",
                  "horrible",
                  "very_horrible",
                  "impassable"
                ],
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "surface_type": {
                "default": "sett",
                "description": "Specifies the minimum surface type. Default is `sett`. ",
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "track_type": {
                "default": "grade1",
                "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                "type": "string",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "weight": {
                "description": "Weight restriction in tons. ",
                "example": 40,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              },
              "width": {
                "description": "Width restriction in metres.",
                "example": 5.6,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "driving-hgv"
                }
              }
            },
            "type": "object"
          },
          "surface_quality_known": {
            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
            "example": true,
            "type": "boolean",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "weightings": {
            "description": "Describe additional weightings to be applied to edges on the routing.",
            "properties": {
              "green": {
                "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                "example": 0.4,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "foot-*"
                }
              },
              "quiet": {
                "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                "example": 0.8,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "foot-*"
                }
              },
              "shadow": {
                "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                "example": 0.4,
                "format": "float",
                "type": "number",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "foot-*"
                }
              },
              "steepness_difficulty": {
                "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                "example": 2,
                "format": "int32",
                "type": "integer",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "cycling-*"
                }
              }
            },
            "title": "Profile Weightings",
            "type": "object"
          }
        },
        "title": "Profile Parameters",
        "type": "object",
        "x-validWhen": {
          "ref": "profile",
          "valueNot": "driving-car"
        }
      },
      "profileWeightings": {
        "description": "Describe additional weightings to be applied to edges on the routing.",
        "properties": {
          "green": {
            "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
            "example": 0.4,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "foot-*"
            }
          },
          "quiet": {
            "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
            "example": 0.8,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "foot-*"
            }
          },
          "shadow": {
            "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
            "example": 0.4,
            "format": "float",
            "type": "number",
            "x-validWhen": {
              "ref": "profile",
              "value": "foot-*"
            }
          },
          "steepness_difficulty": {
            "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
            "example": 2,
            "format": "int32",
            "type": "integer",
            "x-validWhen": {
              "ref": "profile",
              "value": "cycling-*"
            }
          }
        },
        "title": "Profile Weightings",
        "type": "object"
      },
      "roundTripRouteOptions": {
        "description": "Specifies the parameters for generating round trip routes.",
        "example": {
          "length": 10000,
          "points": 5
        },
        "properties": {
          "length": {
            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
            "example": 10000,
            "format": "float",
            "type": "number"
          },
          "points": {
            "description": "The number of points to use on the route. Larger values create more circular routes.",
            "example": 5,
            "format": "int32",
            "type": "integer"
          },
          "seed": {
            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
            "example": 1,
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Round Trip Route Options",
        "type": "object"
      },
      "routeOptions": {
        "description": "Advanced options for routing",
        "example": {
          "avoid_borders": "controlled"
        },
        "properties": {
          "avoid_borders": {
            "description": "Specify which type of border crossing to avoid",
            "enum": [
              "all",
              "controlled",
              "none"
            ],
            "example": "controlled",
            "type": "string",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-*"
            }
          },
          "avoid_countries": {
            "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
            "example": [
              11,
              193
            ],
            "items": {
              "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://GIScience.github.io/openrouteservice/documentation/routing-options/Country-List.html). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
              "example": "[11,193]",
              "type": "string",
              "x-validWhen": {
                "ref": "profile",
                "value": "driving-*"
              }
            },
            "type": "array",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-*"
            }
          },
          "avoid_features": {
            "description": "List of features to avoid. ",
            "example": [
              "highways"
            ],
            "items": {
              "description": "Definition of the features to be avoided.",
              "enum": [
                "highways",
                "tollways",
                "ferries",
                "fords",
                "steps"
              ],
              "example": "[\"highways\"]",
              "type": "string",
              "x-itemRestrictions": {
                "itemsWhen": {
                  "cycling-*": [
                    "ferries",
                    "steps",
                    "fords"
                  ],
                  "driving-*": [
                    "highways",
                    "tollways",
                    "ferries"
                  ],
                  "foot-*": [
                    "ferries",
                    "fords",
                    "steps"
                  ],
                  "wheelchair": [
                    "ferries",
                    "steps"
                  ]
                },
                "ref": "profile"
              }
            },
            "type": "array",
            "x-itemRestrictions": {
              "itemsWhen": {
                "cycling-*": [
                  "ferries",
                  "steps",
                  "fords"
                ],
                "driving-*": [
                  "highways",
                  "tollways",
                  "ferries"
                ],
                "foot-*": [
                  "ferries",
                  "fords",
                  "steps"
                ],
                "wheelchair": [
                  "ferries",
                  "steps"
                ]
              },
              "ref": "profile"
            }
          },
          "avoid_polygons": {
            "additionalProperties": {
              "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
              "type": "object"
            },
            "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "profile_params": {
            "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
            "properties": {
              "allow_unsuitable": {
                "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
                "example": true,
                "type": "boolean",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "restrictions": {
                "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.",
                "properties": {
                  "axleload": {
                    "description": "Axleload restriction in tons.",
                    "example": 50,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  },
                  "hazmat": {
                    "default": false,
                    "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
                    "type": "boolean",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  },
                  "height": {
                    "description": "Height restriction in metres. ",
                    "example": 4.2,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  },
                  "length": {
                    "description": "Length restriction in metres.",
                    "example": 8.4,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  },
                  "maximum_incline": {
                    "default": 6,
                    "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "maximum_sloped_kerb": {
                    "default": 0.6,
                    "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "minimum_width": {
                    "description": "Specifies the minimum width of the footway in metres.",
                    "example": 2.5,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "smoothness_type": {
                    "default": "good",
                    "description": "Specifies the minimum smoothness of the route. Default is `good`.",
                    "enum": [
                      "excellent",
                      "good",
                      "intermediate",
                      "bad",
                      "very_bad",
                      "horrible",
                      "very_horrible",
                      "impassable"
                    ],
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "surface_type": {
                    "default": "sett",
                    "description": "Specifies the minimum surface type. Default is `sett`. ",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "track_type": {
                    "default": "grade1",
                    "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
                    "type": "string",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "wheelchair"
                    }
                  },
                  "weight": {
                    "description": "Weight restriction in tons. ",
                    "example": 40,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  },
                  "width": {
                    "description": "Width restriction in metres.",
                    "example": 5.6,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "driving-hgv"
                    }
                  }
                },
                "type": "object"
              },
              "surface_quality_known": {
                "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
                "example": true,
                "type": "boolean",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "wheelchair"
                }
              },
              "weightings": {
                "description": "Describe additional weightings to be applied to edges on the routing.",
                "properties": {
                  "green": {
                    "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
                    "example": 0.4,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "foot-*"
                    }
                  },
                  "quiet": {
                    "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
                    "example": 0.8,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "foot-*"
                    }
                  },
                  "shadow": {
                    "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
                    "example": 0.4,
                    "format": "float",
                    "type": "number",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "foot-*"
                    }
                  },
                  "steepness_difficulty": {
                    "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
                    "example": 2,
                    "format": "int32",
                    "type": "integer",
                    "x-validWhen": {
                      "ref": "profile",
                      "value": "cycling-*"
                    }
                  }
                },
                "title": "Profile Weightings",
                "type": "object"
              }
            },
            "title": "Profile Parameters",
            "type": "object",
            "x-validWhen": {
              "ref": "profile",
              "valueNot": "driving-car"
            }
          },
          "round_trip": {
            "description": "Specifies the parameters for generating round trip routes.",
            "example": {
              "length": 10000,
              "points": 5
            },
            "properties": {
              "length": {
                "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
                "example": 10000,
                "format": "float",
                "type": "number"
              },
              "points": {
                "description": "The number of points to use on the route. Larger values create more circular routes.",
                "example": 5,
                "format": "int32",
                "type": "integer"
              },
              "seed": {
                "description": "A seed to use for adding randomisation to the overall direction of the generated route",
                "example": 1,
                "format": "int64",
                "type": "integer"
              }
            },
            "title": "Round Trip Route Options",
            "type": "object"
          },
          "vehicle_type": {
            "default": "hgv",
            "description": "Definition of the vehicle type.",
            "enum": [
              "hgv",
              "bus",
              "agricultural",
              "delivery",
              "forestry",
              "goods",
              "unknown"
            ],
            "type": "string",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          }
        },
        "title": "Route Options",
        "type": "object"
      },
      "rte": {
        "type": "object",
        "xml": {
          "name": "rte"
        }
      }
    }
  }
}
