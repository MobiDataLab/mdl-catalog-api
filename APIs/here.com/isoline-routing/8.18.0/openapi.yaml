openapi: 3.0.2
servers:
  - description: Isoline Routing Service
    url: 'https://isoline.router.hereapi.com/v8'
info:
  description: |
    Isoline Routing is a service that offers to answer the question,
    "What area is within the approximate reachable range of a given location?",
    where range can be defined either in time, distance or consumption.
  license:
    name: HERE Documentation License
    url: 'https://legal.here.com/en-gb/terms/documentation-license'
  termsOfService: 'http://developer.here.com/terms-conditions'
  title: Isoline Routing API v8
  version: 8.18.0
  x-apisguru-categories:
    - location
  x-document-meta-data:
    copyright: Â© 2023 HERE Europe B.V.
    date-created: '2023-02-15T16:13:39+00:00'
    document-id: b8fd1223-4cd6-46ae-9ceb-6d75aaa2d314
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://avatars.githubusercontent.com/u/2835506'
  x-origin:
    - format: openapi
      url: 'https://developer.here.com/documentation/isoline-routing-api/swagger/v8.yaml'
      version: '3.0'
  x-providerName: here.com
  x-serviceName: isoline-routing
security:
  - Bearer: []
  - ApiKey: []
tags:
  - name: Isoline
  - description: Additional API Information
    name: API Information
paths:
  /health:
    get:
      description: Returns the health of the service
      operationId: getHealth
      parameters:
        - $ref: '#/components/parameters/xRequestId'
      responses:
        '200':
          $ref: '#/components/responses/HealthResponseOkWithRequestID'
        default:
          $ref: '#/components/responses/HealthResponseFailWithRequestID'
      security: []
      summary: Health status of the service
      tags:
        - API Information
  /isolines:
    get:
      description: |
        Retrieves a list of polylines that captures the approximate reachable area
        from the specified center point constrained by the provided parameters.
      operationId: getIsolines
      parameters:
        - $ref: '#/components/parameters/origin'
        - $ref: '#/components/parameters/departureTime'
        - $ref: '#/components/parameters/destination'
        - $ref: '#/components/parameters/arrivalTime'
        - $ref: '#/components/parameters/range'
        - $ref: '#/components/parameters/routingMode'
        - $ref: '#/components/parameters/transportMode'
        - $ref: '#/components/parameters/shape'
        - $ref: '#/components/parameters/optimizeFor'
        - $ref: '#/components/parameters/avoid'
        - $ref: '#/components/parameters/truck'
        - $ref: '#/components/parameters/vehicle'
        - $ref: '#/components/parameters/ev'
        - $ref: '#/components/parameters/xRequestId'
        - $ref: '#/components/parameters/maxSpeedOnSegment'
        - $ref: '#/components/parameters/taxi'
        - $ref: '#/components/parameters/traffic'
      responses:
        '200':
          $ref: '#/components/responses/IsolineResponseOk'
        '400':
          $ref: '#/components/responses/IsolineErrorResponse'
        '401':
          $ref: '#/components/responses/401ErrorResponseWithRequestID'
        '403':
          $ref: '#/components/responses/Isoline403ErrorResponse'
        '500':
          $ref: '#/components/responses/IsolineResponseServerInternalError'
      summary: Get Isolines for specified ranges around a center point
      tags:
        - Isoline
  /version:
    get:
      description: Returns the version of the service
      operationId: getVersion
      parameters:
        - $ref: '#/components/parameters/xRequestId'
      responses:
        '200':
          $ref: '#/components/responses/VersionResponseOkWithRequestID'
        '500':
          $ref: '#/components/responses/500ErrorResponseWithRequestID'
        '502':
          $ref: '#/components/responses/502ErrorResponseWithRequestID'
        '503':
          $ref: '#/components/responses/503ErrorResponseWithRequestID'
        '504':
          $ref: '#/components/responses/504ErrorResponseWithRequestID'
      security: []
      summary: Full version of the API
      tags:
        - API Information
components:
  examples:
    400IsolineErrorResponseExample:
      value:
        action: ''
        cause: missing field `destination`
        code: E605001
        correlationId: 4199533b-6290-41db-8d79-edf4f4019a74
        status: 400
        title: Malformed request
    401errorResponseExample:
      value:
        error: Unauthorized
        error_description: No credentials found
    403ResponseNotAllowedExample:
      value:
        action: Obtain credentials that allow you to calculate isoline in Japan
        cause: Your credentials do not allow to calculate isoline in Japan
        code: E605101
        correlationId: 4d42580e-117f-4249-be35-3fcfc9f8aa01
        status: 403
        title: Not allowed
    500ServerInternalErrorExample:
      value:
        action: ''
        cause: ''
        code: E605500
        correlationId: 4199533b-6290-41db-8d79-edf4f4019a74
        status: 500
        title: Internal server error
    500errorResponseExample:
      value:
        action: ''
        cause: Internal Server Error
        code: E600103
        correlationId: ''
        status: 500
        title: 'failed with reason: internal server error'
    502errorResponseExample:
      value:
        action: ''
        cause: Bad Gateway
        code: E600002
        correlationId: ''
        status: 502
        title: 'failed with reason: bad gateway'
    503errorResponseExample:
      value:
        action: ''
        cause: Service Unavailable
        code: E600001
        correlationId: ''
        status: 503
        title: 'failed with reason: service unavailable'
    504errorResponseExample:
      value:
        action: ''
        cause: Gateway Timeout
        code: E600000
        correlationId: ''
        status: 504
        title: 'failed with reason: gateway timeout'
    VersionResponseOkExample:
      value:
        - apiVersion: 8.18.0
        - serviceVersion: 2022-12-15-b706cc8c-9057409
        - dataVersions:
            - name: traffic-feed
              version: '2023-01-31T14:41:36+00:00'
            - name: 'hrn:here:data::olp-here:rib-2'
              version: '4898'
            - name: 'hrn:here:data::olp-here:here-map-content-japan-2'
              version: '65'
            - name: optimized-map-for-routing
              version: 2022.346.5.48
    isolineResponseExample:
      value:
        departure:
          place:
            location:
              lat: 38.0202568
              lng: 24.0068924
            originalLocation:
              lat: 38.02026
              lng: 24.0068899
            type: place
        isolines:
          - connections:
              - fromPolygonIndex: 0
                polyline: BGqy2woCu2v5tBrL0uDsPgqH83Cq9qB63Cq9qBm3Co9qB83Cq9qB63Cq9qB83Co9qB63Cq9qB83Cq9qBq6B0ycwd0qO6xCkkoBgCm5Cmc08qBAWy_Eo9qBgCkQouImtqB6_FyjeusCwfosB_B
                toPolygonIndex: 1
            polygons:
              - outer: BGkln1oC09phtB2rF4gE61CuhIAs3K51CwhI1rF0rF51CwhI61CwhI0uV0uVgjQ2rFq3Kq3K81CwhIA-lgB71CwhIzrF2rF71CwhIA-lgB81CwhI-iQ2rF2rF-iQ2rFA0rFzrF2rFAq3Kq3K2rFgjQ0rF0rFA2rFzrF0rF71CwhI81CwhI0rF2rFA0rFzrF2rFA0rF0rF2rF61CwhIAq3K51CwhIzrF2rFA0rF0rF2rF61CwhIA-lgB51CwhIvhI61Cp3KAvhI81Cp3Kq3K51CwhI61CuhIgjQ2rFq6aq6a0rFA2rF1rFgjQzrFq3Kp3K0rF_iQs3Kp3KuhI71Cs3KAuhI81C2rF0rF2rFA0rFzrFwhI71CwhI81Cq3Kq3K61CwhIA0uV81CwhI-iQ0rFgjQgjQgjQ2rF61CwhIA0uV61CwhIwhI61Cs3KAuhI61C2rFgjQgjQ2rF61CwhIAq3K61CwhI2rF0rFA2rF1rF0rF51CwhI61CwhI2rF2rF61CwhI51CwhI1rF0rF51CwhI61CwhIgjQ0rF61CwhIAq3K51CwhI1rF2rFzrFgjQ1rF0rFzrFgjQ_iQ2rF1rF-iQzrF2rF1rFgjQ_iQ0rF51CwhIAq3K51CwhI_iQ2rFzrF0rF_iQ2rF1rFgjQzrF0rF71CwhIAq3K51CwhIvhI61CvhI51CzrFzrF1rFA51CuhIAgmgB51CwhIvhI61CvhI51C_iQ_iQzrFAr3Kq3KzrFgjQvhI61Cp3KAvhI51C51CvhIAp3K71CvhI9iQ1rFr3Kp3K51CvhIA9lgB51CvhI1rF1rF51CthIAr3K51CthI1rF1rF1rF_iQ9iQzrFp3Kr3K1rF9iQp3Kp3K1rFAzrF0rF_iQ2rF1rF0rF9iQ2rF_iQgjQvhI61CvhI51C1rF1rFzrFA1rF2rFvhI61CzuVAvhI61C9iQgjQ_iQ2rF_iQ-iQ_iQ2rFzrF0rFvhI81Cp3KAvhI71C1rF9iQp3Kp3KvhI71C9lgBAvhI81C1rF0rFvhI61Cp3KAvhI51CzrFzrFvhI71CvhI81C51CuhIA2uV71CwhIp3Kq3KvhI61Cp3KAvhI61CzrF2rFvhI61CvhI51C1rF_iQzrFzrF51CvhIAp3K71CvhIvhI71CthI81C71CwhI81CuhI0rF2rF61CwhI51CwhIvhI61Cp3KAvhI61CzrF2rF_iQ2rF1rF-iQvhI81CthI71C1rFzrFvhI71CzuVAvhI81C1rF0rFvhI81CthI71C1rFzrF_iQ1rFzrF_iQr3Kp3K9iQzrF1rF_iQzrF1rF1rF9iQ_iQ1rFp3Kp3K51CvhI61CvhIgjQ_iQ0rF9iQgjQ1rF61CvhIAp3K81CvhIq3Kp3K0rFA2rF2rF2rFA0rF_iQ0xlBzxlB81CvhIAp3K71CvhIp3Kp3K_iQ1rFzrF_iQ1rFzrF51CvhIAp3K61CvhIgjQ_iQ2rF_iQ0rFzrF61CvhIAp9qB81CvhIwhI51Cq3KAwhI61C0rF2rFwhI61CwhI51C61CvhI51CvhIp3Kp3K_iQ1rFzuVzuV71CvhI81CvhIq6ap6a0rF9iQwhI71CwhI81Cq3Kq3K61CwhIAq3K81CwhIwhI61Cq3KAwhI51C0rF1rFgjQzrF2rF_iQ-iQ_iQAzrFvhI71C9lgBAvhI51C1rF1rF9iQzrF71CvhIAzuV81CvhI0rF1rF2rF_iQq6ap6a0rF9iQwhI71Cq3KAwhI51CgjQ_iQ2rFA0rF2rF2rFA61CvhIAp3K61CvhIgjQ1rF0uVzuV2rF_iQ2rFzrF61CvhIA_lgB61CthIq3Kr3KwhI51Cq3KAwhI51C2rF1rFwhI51C0uVAwhI61Cq6aq6agjQ2rF0rF0rFwhI81CwhI71C0rFzrFwhI71CwhI81CgjQ-iQ2rFA0rFzrFwhI51Cq3KAwhI71CAzrF_iQ_iQ51CvhIAp3K61CvhI2rFA0rF2rFgjQ0rF2rF2rF0rFA2rF_iQq3Kp3KwhI51CwhI61C0rF2rFwhI61CwhI51CA1rFzrF1rF71CvhIAp3K81CvhIuhI51Cs3KAuhI-qB2rFwhI
              - outer: BGu8x1oCsgxnuB2rF4gE61CwhI51CwhI1rF2rF51CwhIAq3K61CwhI2rF0rF61CwhIAq3K61CwhI2rF2rF61CuhI51CwhIvhI81Cp3KAvhI61Cp3Kq3K51CwhI61CwhIwhI61Cq3KAwhI51C0rF1rFwhI51CwhI61Cq3Kq3K81CwhI71CwhIzrF2rF71CwhIAq3K51CwhI_iQ-iQA2rFwhI61Cq3KAwhI81Cq3Kq3KA0rFp3Kq3KzrFA1rFzrFzrFA1rF0rFvhI81Cp3KAvhI61C1rFgjQ9iQ0rF71CwhIAq3K51CwhIvhI81CvhI71CzrFzrFvhI71CvhI81C1rF0rF9iQ2rFp3Kq3K1rFgjQ_iQ0rFzrF2rFvhI61Cp3KAvhI51C71CvhIAzuV51CvhIzrF1rF71CvhIAp3K51CvhI1rFzrFzrF_iQvhI51Cp3KAvhI71C51CthI61CvhI2rF1rFAzrF_iQ_iQ71CvhI81CvhIq3Kp3KwhI51Cq3KAwhI71Cq3Kp3K61CvhIAp3K81CvhIq3Kp3KwhI51C0uVAwhI61C0rFgjQwhI61CwhI51C2rF1rF-iQzrFs3Kp3KA1rF1rF1rF51CvhI61CthIq3Kr3KgjQzrFq3Kp3K61CvhIAp3K81CvhI0rF1rF81CvhIAzuV61CvhIwhI51CwhI8qB0rFwhI
            range:
              type: distance
              value: 40000
  headers:
    X-Correlation-Id:
      description: Auto-generated id that univocally identifies the request.
      example: 4199533b-6290-41db-8d79-edf4f4019a74
      schema:
        type: string
    X-Request-Id:
      description: User-provided token that can be used to trace a request or a group of requests sent to the service.
      example: 8230d7ad-3f1c-4191-a8dd-f3c42026da89
      schema:
        type: string
  parameters:
    arrivalTime:
      allowReserved: true
      description: |
        Specifies the time of arrival as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at destination. When the optional timezone offset is
        not specified, time is assumed to be local.
        If neither `departureTime` or `arrivalTime` are specified, current time at arrival location will be used if `destination` is specified.
        It cannot be used in combination with `origin` parameter. All `Time` values in the response are returned in the timezone of each location.
      in: query
      name: arrivalTime
      required: false
      schema:
        $ref: '#/components/schemas/Time'
    avoid:
      description: |
        `avoid[features]`: A comma-separated list of features avoided during isoline calculation.
         Available avoid feature options:
          * `tollRoad`
          * `controlledAccessHighway`
          * `ferry`
          * `carShuttleTrain`
          * `tunnel`
          * `dirtRoad`
          * `difficultTurns`: This option avoids difficult turns, sharp turns and U-turns on highways and motorways. It is only supported for the `truck` transport mode.
          * `uTurns`: This option avoids U-turns on highways and motorways. It is not supported for pedestrian, bicycle and scooter transport modes.
      explode: true
      in: query
      name: avoid
      required: false
      schema:
        $ref: '#/components/schemas/Avoid'
      style: deepObject
    departureTime:
      allowReserved: true
      description: |
        Specifies the time of departure as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at origin. When the optional timezone offset is
        not specified, time is assumed to be local.
        If neither `departureTime` or `arrivalTime` are specified, current time at departure location will be used if `origin` is specified.
        It cannot be used in combination with `destination` parameter. All `Time` values in the response are returned in the timezone of each location.
      in: query
      name: departureTime
      required: false
      schema:
        $ref: '#/components/schemas/Time'
    destination:
      description: |
        Center of the isoline request. The Isoline(s) will cover the region within the specified range that can reach this point.
        It cannot be used in combination with `origin` or `departureTime` parameter.
        ## Format

        Format: `Place[WaypointOptions]`

        * Place: `{lat},{lng}[PlaceOptions]`
        * PlaceOptions: `;option1=value1;option2=value2...`
        * WaypointOptions: `!option1=value1!option2=value2...`

        A waypoint consists of:

        * Exactly one place
        * Optional settings for the place
        * Optional settings for the waypoint itself

        Supported place options:

        * `course`: int, degrees clock-wise from the north. Indicates the desired direction from the place.
          For example, `90` indicating `east`. Often combined with `radius` and/or `minCourseDistance`
        * `sideOfStreetHint`: `{lat},{lng}`. Indicates the side of the street that should be
          used. For example, if the location is to the left of the street, the router will prefer using
          that side in case the street has dividers. For example,
          `52.511496,13.304140;sideOfStreetHint=52.512149,13.304076` indicates that the `north`
          side of the street should be preferred. This option is required, if `matchSideOfStreet`
          is set to `always`.
        * `matchSideOfStreet`: enum `[always, onlyIfDivided]`. Specifies how the location set by
          `sideOfStreetHint` should be handled. Requires `sideOfStreetHint` to be specified as
          well.
          + `always` : Always prefer the given side of street.
          + `onlyIfDivided`: Only prefer using the side of street set by `sideOfStreetHint` in case
            the street has dividers. This is the default behavior.
        * `nameHint`: string. Causes the router to look for the place with the most similar name.
          The typical examples include: `North` being used to differentiate between
          interstates `I66 North` and `I66 South`, `Downtown Avenue` being used to correctly
          select a residental street.
        * `radius`: int, meters. Instructs the router to consider all places within the given radius as
          potential candidates for route calculation. This can be either because it is not
          important which place is used, or because it is unknown. Radiuses wider than 200 meters are
          not supported.
        * `minCourseDistance`: int, meters. Instructs the routing service to try to find a route that avoids actions for
          the indicated distance. For example, if the origin is determined by a moving vehicle, the user
          might not have time to react to early actions.
      examples:
        coordinate:
          summary: A simple WGS84 coordinate
          value: '51.611571,11.351608'
        course:
          summary: Setting course/radius/minCourseDistance an uncertain GPS coordinate of a moving vehicle
          value: '51.611571,11.351608;course=170;radius=20;minCourseDistance=500'
        name:
          summary: Setting nameHint to avoid matching to the wrong location
          value: '52.510319,13.285616;nameHint=Kaiserdamm'
        side:
          summary: Populating sideOfStreetHint in addition to location to avoid ending on the wrong side of the street
          value: '52.531052,13.384872;sideOfStreetHint=52.530941,13.384939;matchSideOfStreet=always'
      in: query
      name: destination
      required: false
      schema:
        $ref: '#/components/schemas/Waypoint'
    ev:
      allowReserved: true
      description: |

        EV parameters to be used for calculating consumption and for calculating isolines for EV.

        Attributes:
        * `freeFlowSpeedTable`
        * `trafficSpeedTable`
        * `ascent`
        * `descent`
        * `auxiliaryConsumption`
      explode: true
      in: query
      name: ev
      required: false
      schema:
        $ref: '#/components/schemas/EV'
      style: deepObject
    maxSpeedOnSegment:
      allowReserved: true
      description: |
        Specify new base speed for segment by value. Affects route selection and the ETA. Cannot increase base speed on segment.
      examples:
        speed:
          summary: Setting new base speed on segment
          value:
            speed: 'here:cm:segment:76771992#*;speed=42'
      in: query
      name: maxSpeedOnSegment
      required: false
      schema:
        $ref: '#/components/schemas/MaxSpeedOnSegment'
      style: form
    optimizeFor:
      description: |
        Specifies how isoline calculation is optimized.

        * `quality`: calculation of isoline focuses on quality,
          that is, the graph used for isoline calculation has higher granularity generating an isoline that
          is more precise.
        * `performance`: calculation of isoline is performance-centric, quality of isoline is reduced
          to provide better performance.
        * `balanced`: calculation of isoline takes a balanced approach averaging between quality
          and performance.
      in: query
      name: optimizeFor
      required: false
      schema:
        default: balanced
        enum:
          - quality
          - performance
          - balanced
        type: string
    origin:
      description: |
        Center of the isoline request. The Isoline(s) will cover the region which can be reached from this point within given range.
        It cannot be used in combination with `destination` or `arrivalTime` parameter.
        ## Format

        Format: `Place[WaypointOptions]`

        * Place: `{lat},{lng}[PlaceOptions]`
        * PlaceOptions: `;option1=value1;option2=value2...`
        * WaypointOptions: `!option1=value1!option2=value2...`

        A waypoint consists of:

        * Exactly one place
        * Optional settings for the place
        * Optional settings for the waypoint itself

        Supported place options:

        * `course`: int, degrees clock-wise from the north. Indicates the desired direction from the place.
          For example, `90` indicating `east`. Often combined with `radius` and/or `minCourseDistance`
        * `sideOfStreetHint`: `{lat},{lng}`. Indicates the side of the street that should be
          used. For example, if the location is to the left of the street, the router will prefer using
          that side in case the street has dividers. For example,
          `52.511496,13.304140;sideOfStreetHint=52.512149,13.304076` indicates that the `north`
          side of the street should be preferred. This option is required, if `matchSideOfStreet`
          is set to `always`.
        * `matchSideOfStreet`: enum `[always, onlyIfDivided]`. Specifies how the location set by
          `sideOfStreetHint` should be handled. Requires `sideOfStreetHint` to be specified as
          well.
          + `always` : Always prefer the given side of street.
          + `onlyIfDivided`: Only prefer using the side of street set by `sideOfStreetHint` in case
            the street has dividers. This is the default behavior.
        * `nameHint`: string. Causes the router to look for the place with the most similar name.
          The typical examples include: `North` being used to differentiate between
          interstates `I66 North` and `I66 South`, `Downtown Avenue` being used to correctly
          select a residental street.
        * `radius`: int, meters. Instructs the router to consider all places within the given radius as
          potential candidates for route calculation. This can be either because it is not
          important which place is used, or because it is unknown. Radiuses wider than 200 meters are
          not supported.
        * `minCourseDistance`: int, meters. Instructs the routing service to try to find a route that avoids actions for
          the indicated distance. For example, if the origin is determined by a moving vehicle, the user
          might not have time to react to early actions.
      examples:
        coordinate:
          summary: A simple WGS84 coordinate
          value: '51.611571,11.351608'
        course:
          summary: Setting course/radius/minCourseDistance an uncertain GPS coordinate of a moving vehicle
          value: '51.611571,11.351608;course=170;radius=20;minCourseDistance=500'
        name:
          summary: Setting nameHint to avoid matching to the wrong location
          value: '52.510319,13.285616;nameHint=Kaiserdamm'
        side:
          summary: Populating sideOfStreetHint in addition to location to avoid ending on the wrong side of the street
          value: '52.531052,13.384872;sideOfStreetHint=52.530941,13.384939;matchSideOfStreet=always'
      in: query
      name: origin
      required: false
      schema:
        $ref: '#/components/schemas/Waypoint'
    range:
      description: |
        Specifies the range of values to be included in the isoline.
        * `Range[type]`   : Specifies the type of range.
            Possible Values:
            - `distance` with units in meters
            - `time` with units in seconds
            - `consumption` with units in Wh
        * `Range[values]` : A comma-separated list of ranges. The unit is defined by the `type` parameter.
      explode: true
      in: query
      name: range
      required: true
      schema:
        $ref: '#/components/schemas/Range'
      style: deepObject
    routingMode:
      description: |
        Specifies which optimization is applied during isoline calculation.

        * `fast`: Route calculation from start to destination optimized by travel time. In many
          cases, the route returned by the `fast` mode may not be the route with the fastest
          possible travel time. For example, the routing service may favor a route that remains on
          a highway, even if a faster travel time can be achieved by taking a detour or shortcut
          through an inconvenient side road.
        * `short`: Route calculation from start to destination disregarding any speed information.
          In this mode, the distance of the route is minimized, while keeping the route sensible.
          This includes, for example, penalizing turns. Because of that, the resulting route will
          not necessarily be the one with minimal distance.
      in: query
      name: routingMode
      required: false
      schema:
        default: fast
        enum:
          - fast
          - short
        type: string
    shape:
      description: |
        A struct used to control the shape of the returned isolines.
        * `shape[maxPoints]`: Limits the number of points in the resulting isoline geometry.
            If the isoline consists of multiple components, the sum of points from all components is considered.
            This parameter doesn't affect performance. Look at `optimizeFor` parameter to optimize for performance.
      explode: true
      in: query
      name: shape
      required: false
      schema:
        $ref: '#/components/schemas/Shape'
      style: deepObject
    taxi:
      description: |
        Taxi specific parameters.
          * `allowDriveThroughTaxiRoads`: Specifies if a vehicle is allowed to drive through
            taxi-only roads and lanes. Even if this option is set to false, the vehicle is still
            allowed on taxi-only roads at the start of the route and at the destination.

            **Disclaimer**: This parameter is currently provided as Beta with limited functionality.
      explode: true
      in: query
      name: taxi
      required: false
      schema:
        $ref: '#/components/schemas/Taxi'
      style: deepObject
    traffic:
      description: Traffic specific parameters.
      explode: true
      in: query
      name: traffic
      required: false
      schema:
        $ref: '#/components/schemas/Traffic'
      style: deepObject
    transportMode:
      description: |
        Mode of transport to be used for the calculation of the isolines.
      in: query
      name: transportMode
      required: true
      schema:
        $ref: '#/components/schemas/RouterMode'
    truck:
      deprecated: true
      description: |
        Truck specific parameters. **Note** truck parameters are deprecated, use vehicle parameters
        instead. Truck parameters cannot be used together with the vehicle parameters.
          * `shippedHazardousGoods`:
            Comma-separated list of shipped hazardous goods in the vehicle.
            Possible values are:
            * `explosive`: Explosive material
            * `gas`: Gas
            * `flammable`: Flammable material
            * `combustible`: Combustible material
            * `organic`: Organic material
            * `poison`: Poison
            * `radioactive`: Radioactive material
            * `corrosive`: Corrosive material
            * `poisonousInhalation`: Materials that are poisonous upon inhalation
            * `harmfulToWater`: Materials that are harmful to water
            * `other`: Other types of hazardous materials
          * `grossWeight`: Vehicle weight including trailers and shipped goods, in kilograms.
          * `weightPerAxle`: Vehicle weight per axle, in kilograms.
          * `weightPerAxleGroup`: Weight of different axle groups like single and tandem axles, in kilograms.
          * `height`: Vehicle height, in centimeters.
          * `width`: Vehicle width, in centimeters.
          * `length`: Vehicle length, in centimeters.
          * `tunnelCategory`: Specifies the tunnel category used to restrict transport of specific goods.
            Possible values:
              * `B`
              * `C`
              * `D`
              * `E`
          * `axleCount`: Defines total number of axles in the vehicle.
          * `type`: Specifies the type of truck
              * `straight`: a truck on a single frame with a permanently attached cargo area
              * `tractor`: a towing vehicle that can pull one or more semi-trailers (aka semi-truck)
          * `trailerCount`: Number of trailers attached to the vehicle.
      explode: true
      in: query
      name: truck
      required: false
      schema:
        $ref: '#/components/schemas/Truck'
      style: deepObject
    vehicle:
      description: |
        Vehicle specific parameters.
          * `shippedHazardousGoods`:
            Comma-separated list of shipped hazardous goods in the vehicle.
            Possible values are:
            * `explosive`: Explosive material
            * `gas`: Gas
            * `flammable`: Flammable material
            * `combustible`: Combustible material
            * `organic`: Organic material
            * `poison`: Poison
            * `radioactive`: Radioactive material
            * `corrosive`: Corrosive material
            * `poisonousInhalation`: Materials that are poisonous upon inhalation
            * `harmfulToWater`: Materials that are harmful to water
            * `other`: Other types of hazardous materials
          * `grossWeight`: Vehicle weight including trailers and shipped goods, in kilograms.
          * `weightPerAxle`: Vehicle weight per axle, in kilograms.
          * `weightPerAxleGroup`: Weight of different axle groups like single and tandem axles, in kilograms.
          * `height`: Vehicle height, in centimeters.
          * `width`: Vehicle width, in centimeters.
          * `length`: Vehicle length, in centimeters.
          * `tunnelCategory`: Specifies the tunnel category used to restrict transport of specific goods.
            Possible values:
              * `B`
              * `C`
              * `D`
              * `E`
          * `axleCount`: Defines total number of axles in the vehicle.
          * `type`: Specifies the type of vehicle
              * `straightTruck`: a truck on a single frame with a permanently attached cargo area. Only
              applicable when the truck routing mode is used.
              * `tractor`: a towing vehicle that can pull one or more semi-trailers (aka semi-truck).
              Only applicable when the truck routing mode is used.
          * `trailerCount`: Number of trailers attached to the vehicle.
      explode: true
      in: query
      name: vehicle
      required: false
      schema:
        $ref: '#/components/schemas/Vehicle'
      style: deepObject
    xRequestId:
      description: User-provided token that can be used to trace a request or a group of requests sent to the service.
      in: header
      name: X-Request-ID
      schema:
        type: string
  responses:
    401ErrorResponseWithRequestID:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/401errorResponseExample'
          schema:
            $ref: '#/components/schemas/AuthErrorResponseSchema'
      description: API response in case of unauthorized access.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    500ErrorResponseWithRequestID:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/500errorResponseExample'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: API response in case of internal server error.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    502ErrorResponseWithRequestID:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/502errorResponseExample'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: API response in case of bad gateway.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    503ErrorResponseWithRequestID:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/503errorResponseExample'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: API response in case of service unavailable.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    504ErrorResponseWithRequestID:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/504errorResponseExample'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: API response in case of gateway timeout.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    HealthResponseFailWithRequestID:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthResponseFailSchema'
        text/plain: {}
      description: API response in case of failure.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    HealthResponseOkWithRequestID:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthResponseOKSchema'
      description: API response in case of success.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    Isoline403ErrorResponse:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/403ResponseNotAllowedExample'
          schema:
            oneOf:
              - $ref: '#/components/schemas/AuthErrorResponseSchema'
              - $ref: '#/components/schemas/NotAllowed'
      description: |
        Not allowed, such as trying to calculate isolines in Japan without having necessary
        permissions.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    IsolineErrorResponse:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/400IsolineErrorResponseExample'
          schema:
            $ref: '#/components/schemas/IsolineErrorResponse'
      description: |
        Failure to parse the request, caused by invalid field values, or invalid field combinations.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    IsolineResponseOk:
      content:
        application/json:
          examples:
            isolineResponseExample:
              $ref: '#/components/examples/isolineResponseExample'
          schema:
            $ref: '#/components/schemas/IsolineResponse'
      description: Isoline response in case of success
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    IsolineResponseServerInternalError:
      content:
        application/json:
          examples:
            errorResponseExample:
              $ref: '#/components/examples/500ServerInternalErrorExample'
          schema:
            $ref: '#/components/schemas/ServerInternal'
      description: |
        Server Internal Error
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    VersionResponseOkWithRequestID:
      content:
        application/json:
          examples:
            versionResponseOkExample:
              $ref: '#/components/examples/VersionResponseOkExample'
          schema:
            $ref: '#/components/schemas/VersionResponse'
      description: API response in case of success.
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
  schemas:
    AuthErrorResponseSchema:
      properties:
        error:
          description: Human-readable error
          type: string
        error_description:
          description: Human-readable error description
          type: string
    Avoid:
      properties:
        features:
          description: |
            A comma-separated list of features avoided during isoline calculation.

            Available avoid feature options -
            * `tollRoad`
            * `controlledAccessHighway`
            * `ferry`
            * `carShuttleTrain`
            * `tunnel`
            * `dirtRoad`
            * `difficultTurns`: This option avoids difficult turns, sharp turns and U-turns on highways and motorways. It is only supported for the `truck` transport mode.
            * `uTurns`: This option avoids U-turns on highways and motorways. It is not supported for pedestrian, bicycle and scooter transport modes.
          example: 'controlledAccessHighway,tunnel'
          type: string
        truckRoadTypes:
          description: |
            A comma-separated list of identifiers of truck road types avoided during isoline calculation.

            A truck road type is an identifier associated with roads that have additional regulations applied by local administration for traversal by heavy vehicles like trucks.
            For example, the BK Bearing Class regulations in Sweden, and ET categories in Mexico.
            Identifiers for supported truck road types are specified at HERE Map Content
            [TruckRoadType](https://developer.here.com/documentation/here-map-content/dev_guide/topics_schema/truckroadtypeattribute.truckroadtype.html).

            Example: `avoid[truckRoadTypes]=BK1,BK2,BK3,BK4`
          example: 'BK1,BK2,BK3,BK4'
          type: string
        zoneCategories:
          description: |
            Specifies a list of categories of zones avoided during isoline calculation.

            Format: `Categories[ZoneCategoryOptions]`

            * Categories: `{cat1},{cat2}...`
              A comma separated list of zone categories.
            * ZoneCategoriesOptions (optional): `;option1=value1;options2=value2...`
              A list of options for zone categories in `KEY=VALUE` form.

            Supported zone category options:
              * exceptZoneIds: A comma-separated list of zone identifiers, which will not be taken into account for evaluation of zone categories to avoid.

            Supported zone categories:
              * `vignette`
              * `congestionPricing`
              * `environmental`

            Example of zone categories avoidance:
            `avoid[zoneCategories]=environmental,vignette`

            Example of zone categories avoidance with exceptions:
            `avoid[zoneCategories]=environmental,vignette;exceptZoneIds=here:cm:envzone:3`
          type: string
        zoneIdentifiers:
          description: |
            A comma separated list containing identifiers of zones avoided during isoline calculation.

            Example of an identifier referencing an environmental zone:
            `here:cm:envzone:2`
          type: string
      type: object
    BaseNoticeDetail:
      properties:
        cause:
          description: Cause of the notice
          type: string
        title:
          description: Detail title
          type: string
        type:
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
      required:
        - type
    BasePlace:
      properties:
        location:
          allOf:
            - $ref: '#/components/schemas/Location'
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
        name:
          description: Location name
          type: string
        originalLocation:
          allOf:
            - $ref: '#/components/schemas/Location'
          description: 'If present, the original position of this location provided in the request.'
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        waypoint:
          description: 'If present, this place corresponds to the waypoint in the request with the same index.'
          type: integer
      required:
        - type
        - location
    Connection:
      description: |
        Connection represents the geometry of special links that were reached but not included in the components.
        These links are connections like ferries.
      properties:
        fromPolygonIndex:
          description: Index of start component of the connection
          type: integer
        polyline:
          $ref: '#/components/schemas/Polyline'
        toPolygonIndex:
          description: Index of end component of the connection
          type: integer
      required:
        - fromPolygonIndex
        - toPolygonIndex
        - polyline
    ConsumptionSpeedTable:
      description: |
        Function curve specifying consumption rate at a given speed.

        The format of the string is a comma-separated list of numbers, as follows:

        ```
        <SPEED_0>,<CONSUMPTION_0>,<SPEED_1>,<CONSUMPTION_1>,...,<SPEED_N>,<CONSUMPTION_N>
        ```

        where speed values are strictly increasing, non-negative integers in units of (km/h), and
        consumption values are non-negative floating point values in units of (Wh/m).

        The function is linearly interpolated between data points. For speeds less than `SPEED_0`
        the value of the function is `CONSUMPTION_0`, and for speeds greater than `SPEED_N` the
        value of the function is `CONSUMPTION_N`.
      example: '0,0.2394,14,0.2394,36,0.2586,52,0.196,68,0.2074,83,0.238,95,0.2597,105,0.2597,115,0.2964,125,0.3367,135,0.3508'
      type: string
    DataVersion:
      description: Version of a specific data set
      properties:
        name:
          description: 'Identifies a data set, for example, a HRN, or a service specific identifier'
          type: string
        version:
          description: The current version of this data set
          type: string
      required:
        - name
        - version
    Departure:
      description: Describe a departure or arrival location and time.
      properties:
        place:
          $ref: '#/components/schemas/BasePlace'
        time:
          allOf:
            - $ref: '#/components/schemas/Time'
          description: 'Expected time of departure of the event. Format is **RFC 3339**, section 5.6 as defined by `date-time`.'
      required:
        - place
    Distance:
      description: Distance in meters.
      minimum: 0
      type: integer
    EV:
      description: |
        **Disclaimer: This parameter is currently in beta release, and is therefore subject to breaking changes.**

        EV parameters to be used for calculating consumption and for calculating isolines for EV.

        Attributes:
        * `freeFlowSpeedTable`
        * `trafficSpeedTable`
        * `ascent`
        * `descent`
        * `auxiliaryConsumption`
      properties:
        ascent:
          description: |
            Rate of energy consumed per meter rise in elevation (in Wh/m, i.e., Watt-hours per meter).
          minimum: 0
          type: number
        auxiliaryConsumption:
          description: |
            Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (for example, air conditioning, lights).
            The value represents the number of Watt-hours consumed per second of travel.
          minimum: 0
          type: number
        descent:
          description: |
            Rate of energy recovered per meter fall in elevation (in Wh/m, i.e., Watt-hours per meter).
          minimum: 0
          type: number
        freeFlowSpeedTable:
          allOf:
            - $ref: '#/components/schemas/ConsumptionSpeedTable'
        trafficSpeedTable:
          allOf:
            - $ref: '#/components/schemas/ConsumptionSpeedTable'
          description: |
            Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.

            See `freeFlowSpeedTable` for a description of the string format.
      required:
        - freeFlowSpeedTable
      type: object
    ErrorResponse:
      description: Response in case of error
      properties:
        action:
          description: Human-readable description of the action that can be taken to correct the error
          example: Request a valid id
          type: string
        cause:
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
          type: string
        code:
          description: |
            Error code.

            All error codes start with "`E60`".
          example: E600101
          type: string
        correlationId:
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        title:
          description: Human-readable error description
          example: Input data failed validation
          type: string
      required:
        - title
        - status
        - code
        - cause
        - action
        - correlationId
    HealthResponseFailSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          enum:
            - fail
          type: string
    HealthResponseOKSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          enum:
            - ok
          type: string
    Isoline:
      description: An isoline for the specified range parameter.
      properties:
        connections:
          description: |
            Connections represent the geometry of special links that were reached but not included in the components.
            These links are connections like ferries.
          items:
            $ref: '#/components/schemas/Connection'
          type: array
        polygons:
          allOf:
            - $ref: '#/components/schemas/MultiPolygon'
          description: |
            The polygons defining the approximate reachable area.
        range:
          allOf:
            - $ref: '#/components/schemas/ResponseRange'
          description: The range parameter used to calculate the Isoline
      required:
        - range
        - polygons
    IsolineErrorResponse:
      description: Response in case of error
      properties:
        action:
          description: Human-readable description of the action that can be taken to correct the error
          example: Request a valid id
          type: string
        cause:
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
          type: string
        code:
          description: |
            Machine-readable service error code.

            All error codes of this service start with "`E605`". The last three digits describe a specific error. Provide this error code when contacting support.

            **NOTE:** The list of possible error codes could be extended in the future. The client application is expected to handle such a case gracefully.

            | Code      | Reason  |
            | --------- | ------- |
            | `E605010` | Invalid combination of truck and transport mode. Check `truck` for valid truck transport modes. |
            | `E605011` | Invalid combination of avoid feature `difficultTurns` or `uTurns` and transport mode. Check `avoid` for details. |
            | `E605012` | Invalid combination of transport mode and routing mode. Check `routingMode` for a list of supported combinations. |
            | `E605019` | `truck[weightPerAxle]` and `truck[weightPerAxleGroup]` are incompatible |
            | `E605020` | Invalid combination of `radius` and `snapRadius`  |
            | `E605030` | Invalid EV options. Check `ev` for details on how valid EV options look. |
            | `E605040` | Invalid combination of EV and transport mode. Check `ev` for details. |
            | `E605041` | Invalid combination of EV and routing mode. Check `ev` for details. |
            | `E605048` | Invalid combination of avoid feature `difficultTurns` and truck category `lightTruck`. |
            | `E605070` | Invalid Range Type. |
            | `E605071` | Invalid Range for Range Type - Distance. |
            | `E605072` | Invalid Range for Range Type - Time. |
            | `E605073` | Invalid Shape Max Points. |
            | `E605074` | Invalid Range for Range Type - Consumption.  |
          example: E605001
          type: string
        correlationId:
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        title:
          description: Human-readable error description
          example: Input data failed validation
          type: string
      required:
        - title
        - status
        - code
        - cause
        - action
        - correlationId
    IsolineResponse:
      properties:
        arrival:
          allOf:
            - $ref: '#/components/schemas/Departure'
          description: Arrival point for the resulting isolines. This parameter is returned only if the `destination` parameters was provided in the request
        departure:
          allOf:
            - $ref: '#/components/schemas/Departure'
          description: 'Departure point for the resulting isolines. This parameter is returned only if `origin` parameter was provided in the request. '
        isolines:
          description: List of polygons calculated per specified range.
          items:
            $ref: '#/components/schemas/Isoline'
          type: array
        notices:
          description: |
            Contains a list of issues related to this isoline calculation.
            Please refer to the `code` attribute for possible values.
          items:
            $ref: '#/components/schemas/IsolineResponseNotice'
          type: array
      required:
        - isolines
    IsolineResponseNotice:
      description: A notice contains important notifications.
      properties:
        code:
          description: |
            Extensible enum: `avoidSegmentsInvalidId` `avoidSegmentsInvalidPrefix` `avoidZonesInvalidId` `cancelled` `couldNotMatchOrigin` `couldNotMatchDestination` `isolineCalculationFailed` `unknownParameter` `...`  
            Currently known codes (non-exhaustive: this list will be extended for new error situations):

            | Code      | Description  | Severity |
            | --------- | ------- | ----            |
            | avoidSegmentsInvalidId | Avoid segments: The provided segment ID was not found | info |
            | avoidSegmentsInvalidPrefix | Avoid segments: The provided domain prefix was not found | info |
            | avoidZonesInvalidId | Avoid zones: The provided zone ID was not found | info |
            | cancelled | Calculation took too long and was cancelled | critical |
            | couldNotMatchOrigin | Origin waypoint could not be matched | critical |
            | couldNotMatchDestination | Destination waypoint could not be matched | critical |
            | isolineCalculationFailed | Isolines could not be calculated. | critical |
            | unknownParameter | The provided parameter is unknown | info |
          example: noRouteFound
          type: string
          x-extensible-enum:
            - avoidSegmentsInvalidId
            - avoidSegmentsInvalidPrefix
            - avoidZonesInvalidId
            - cancelled
            - couldNotMatchOrigin
            - couldNotMatchDestination
            - isolineCalculationFailed
            - unknownParameter
        details:
          description: Additional details about the notice
          items:
            $ref: '#/components/schemas/BaseNoticeDetail'
          type: array
        severity:
          $ref: '#/components/schemas/NoticeSeverity'
        title:
          description: Human-readable notice description.
          example: No route found
          type: string
      required:
        - code
    LinearRing:
      description: 'A special case of a Polyline where the first and last elements in the coordinates array are equivalent. Encoded as a string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline) format.'
      example: BGk0owkBggpgrE1K6algB4KlgB3K3KlgB4KlgBmgB1KmgBqF2KkQA6a
      type: string
    Location:
      description: Location on the Earth
      example:
        lat: 52.531677
        lng: 13.381777
      properties:
        elv:
          description: |
            Ellipsoid(geodetic) height in meters. Difference between the WGS84 ellipsoid and a point on the Earthâs surface.
            Note: Similar elevation can be obtained from a GPS receiver.
          example: 512.5
          type: number
        lat:
          description: Location of a point on the Earth north or south of the equator in decimal degrees.
          example: 52.531677
          format: double
          type: number
        lng:
          description: Location of a place on the Earth east or west of the prime meridian in decimal degrees.
          example: 13.381777
          format: double
          type: number
      required:
        - lat
        - lng
    MaxSpeedOnSegment:
      description: |
        A comma separated list of segments with restrictions on maximum baseSpeed.

        Each entry has the following structure:
        `{segmentId}(#{direction})?;speed={maxBaseSpeed}`

        The individual parts are:
        * segmentId: The identifier of the referenced topology segment inside the catalog, example: `here:cm:segment:207551710`
        * direction (optional): Either '*' for bidirectional (default), '+' for positive direction, or '-' for negative direction
        * maxBaseSpeed: New value in m/s of baseSpeed on segment

        Example of a parameter value excluding two segments:
        `here:cm:segment:207551710#+;speed=10,here:cm:segment:76771992;speed=1`

        **Notes**:
        - It does not increase default baseSpeed on segment. If the value is greater than the default base speed, then such penalty will have no effect.
        - Minimum valid value for speed is 1
        - Using segments with a modified base speed does not trigger any notifications
        - Maximum amount of penalized segments in one request cannot be greater than 250.
          A "penalized segments" refers to segments that have a restrictions on maximum baseSpeed with `maxSpeedOnSegment`
          or avoided with `avoid[segments]`
      type: string
    MultiPolygon:
      description: A set of multiple polygons.
      items:
        $ref: '#/components/schemas/Polygon'
      type: array
    NotAllowed:
      description: 'Not Allowed, actions not permitted by server.'
      properties:
        action:
          description: Human-readable description of the action that can be taken to correct the error
          example: Request a valid id
          type: string
        cause:
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
          type: string
        code:
          description: |
            Machine-readable service error code.

            All error codes of this service start with "`E605`". The last three digits describe a specific error. Provide this error code when contacting support.

            **NOTE:** The list of possible error codes could be extended in the future. The client application is expected to handle such a case gracefully.

            | Code      | Reason  |
            | --------- | ------- |
            | `E605101` | Credentials not allowed for calculating routes in Japan. |
          example: E600101
          type: string
        correlationId:
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        title:
          description: Human-readable error description
          example: Input data failed validation
          type: string
      required:
        - title
        - status
        - code
        - cause
        - action
        - correlationId
    NoticeSeverity:
      description: |
        Describes the impact a notice has on the resource to which the notice is attached.
        * critical - The notice must not be ignored, even if the type of notice is not known to the user. Any associated resource (e.g., route section) must not be used without further evaluation.
        * info - The notice is for informative purposes, but does not affect usability of the route.
      enum:
        - critical
        - info
      type: string
    Polygon:
      description: A polygon is described by a boundary outer ring and a possible set of inner rings or holes.
      properties:
        inner:
          description: |
            A list of inner rings or holes for the polygon in the form of a list of LinearRings.
          items:
            $ref: '#/components/schemas/LinearRing'
          type: array
        outer:
          allOf:
            - $ref: '#/components/schemas/LinearRing'
          description: |
            Describes the outer ring of the polygon in the form of a LinearRing.
      type: object
    Polyline:
      description: 'Line string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline) format.'
      example: A05xgKuy2xCx9B7vUl0OhnR54EqSzpEl-HxjD3pBiGnyGi2CvwFsgD3nD4vB6e
      type: string
    Range:
      description: 'Ranges specified in terms of distance, travel time or energy consumption.'
      properties:
        type:
          description: |
            Specifies the type of range.

            Possible Values:
            - `distance` with units in meters with maximum value 1000000
            - `time` with units in seconds with maximum value 32400
            - `consumption` with units in Wh with maximum value 300000
          example: distance
          type: string
        values:
          description: A comma-separated list of ranges. The unit is defined by the `type` parameter.
          example: 10002000
          type: string
      required:
        - type
        - values
      type: object
    ResponseRange:
      description: 'Range specified in terms of distance, travel time or energy consumption.'
      properties:
        type:
          description: |
            Specifies the type of range.

            Possible Values:
            - `distance` with units in meters
            - `time` with units in seconds
            - `consumption` with units in Wh
          type: string
        value:
          description: Range value. The unit is defined by the `type` parameter.
          type: integer
      required:
        - type
        - values
      type: object
    RouterMode:
      description: Mode of transport to be used for route calculation.
      enum:
        - car
        - truck
        - pedestrian
        - taxi
        - bus
        - privateBus
        - scooter
        - bicycle
      type: string
    ServerInternal:
      description: Errors internal to server.
      properties:
        action:
          description: Human-readable description of the action that can be taken to correct the error
          example: Request a valid id
          type: string
        cause:
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
          type: string
        code:
          description: |
            Machine-readable service error code.

            All error codes of this service start with "`E605`". The last three digits describe a specific error. Provide this error code when contacting support.

            **NOTE:** The list of possible error codes could be extended in the future. The client application is expected to handle such a case gracefully.

            | Code      | Reason  |
            | --------- | ------- |
            | `E6055XX` | Internal server error. |
          example: E600101
          type: string
        correlationId:
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        title:
          description: Human-readable error description
          example: Input data failed validation
          type: string
      required:
        - title
        - status
        - code
        - cause
        - action
        - correlationId
    Shape:
      description: A struct used to control the shape of the returned isolines.
      properties:
        maxPoints:
          description: |
            Limits the number of points in the resulting isoline geometry.

            If the isoline consists of multiple components, the sum of points from all components is considered.
            This parameter doesn't affect performance. Look at `optimizeFor` parameter to optimize for performance.

            Notes:
              Quality of isolines degrades as maxPoints value is decreased,
              It is Recommended use `maxPoints` value greater than 100 for optimal quality isolines.
          example: 150
          exclusiveMinimum: true
          minimum: 30
          type: integer
        maxResolution:
          allOf:
            - $ref: '#/components/schemas/Distance'
          default: 0
          description: |
            Defines the minimum granularity at which the isoline is created. User can ask for a lower resolution by setting a larger value for this parameter. Unit is meters.
            For example, a max resolution of 400m causes the service to gloss over detailed geometry of less than 400m. This parameter is useful if the maximum detail of the isoline should be limited, e.g., based on the screen resolution, or the use case.
      type: object
    Taxi:
      description: Taxi specific parameters
      properties:
        allowDriveThroughTaxiRoads:
          default: true
          description: |
            Specifies if a vehicle is allowed to drive through taxi-only roads and lanes. Even if
            this option is set to false, the vehicle is still allowed on taxi-only roads at the
            start of the route and at the destination.

            **Disclaimer**: This parameter is currently provided as Beta with limited functionality.
          type: boolean
      type: object
    Time:
      description: '**RFC 3339**, section 5.6 as defined by either `date-time` or `date-only` ''T'' `partial-time` (ie no time-offset).'
      format: date-time
      type: string
    Traffic:
      description: Traffic specific parameters.
      properties:
        overrideFlowDuration:
          description: |
            Duration in seconds for which flow traffic event would be considered valid. While flow
            traffic event is valid it will be used over the historical traffic data.

            **Note**: Flow traffic represents congestion not caused by any long-term incidents.
            State of the flow traffic often changes fast. The farther away from the current time we
            move, the less precise current flow traffic data will be and the more precise historical
            traffic data becomes. That's why it's advised not to use this parameter unless you know
            what you want to achieve and use the default behavior which is almost always better.
          type: integer
      type: object
    Truck:
      deprecated: true
      description: Vehicle specific parameters
      properties:
        axleCount:
          description: |
            Value specifying the total number of axles the vehicle has i.e., axles on the base vehicle and any attached trailers.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 255
          minimum: 2
          type: integer
        category:
          default: undefined
          description: |
            Specifies the category of the vehicle. The supported values are:

            * `undefined`: The vehicle category is undefined and no special considerations are taken into
              account. Vehicle routing will proceed as normal.
            * `lightTruck`: The vehicle is a truck light enough to be classified more as a car than as a truck.
              I.e., this exempts it from many legal restrictions for normal trucks. Restrictions related
              to the physical dimensions of the truck, or its cargo, however, still apply.

              Please refer to the developer guide for further details on Truck Categories.

              **Limitations:** only valid for `transportMode=truck`.
          enum:
            - undefined
            - lightTruck
          type: string
        grossWeight:
          description: |
            Vehicle weight including trailers and shipped goods, in kilograms.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          minimum: 0
          type: integer
        height:
          description: |
            Vehicle height, in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 5000
          minimum: 0
          type: integer
        hovOccupancy:
          default: 1
          description: |
            Number of occupants (defined as occupying a seat with a restraint device) in the vehicle.
            This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.

            Limitations:
              * currently, any value over 1 is interpreted as being able to use any HOV lane (including, e.g. those restricted to 3+ passengers).
          minimum: 1
          type: integer
        length:
          description: |
            Vehicle length, in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 30000
          minimum: 0
          type: integer
        licensePlate:
          description: |
            Specifies information about the vehicle's license plate number.
            This information is used to evaluate whether certain vehicle restrictions in environmental zones apply.
            Currently, only the last character of the license plate can be provided.

            Format: `lastCharacter:{character}`

            Example: `lastCharacter:2`
          type: string
        shippedHazardousGoods:
          description: |
            Comma-separated list of shipped hazardous goods in the vehicle.

            Possible values are:

            * `explosive`: Explosive material
            * `gas`: Gas
            * `flammable`: Flammable material
            * `combustible`: Combustible material
            * `organic`: Organic material
            * `poison`: Poison
            * `radioactive`: Radioactive material
            * `corrosive`: Corrosive material
            * `poisonousInhalation`: Materials that are poisonous upon inhalation
            * `harmfulToWater`: Materials that are harmful to water
            * `other`: Other types of hazardous materials

            **Limitations:** only valid for `transportMode=truck`.
          example: 'explosive,gas,flammable'
          type: string
        speedCap:
          description: |
            Specifies the maximum speed, in m/s, which the user wishes not to exceed.
            This parameter affects route ETA and consumption calculation.

            Limitations:
              * valid for following transport modes: `car`, `truck`, `scooter`, `taxi`, `bus`, and `privateBus`

            Notes:
              * Car and Truck mode updates route ETA.
              * Scooter mode updates route optimization and ETA.
          maximum: 70
          minimum: 1
          type: number
        tiresCount:
          description: |
            Value specifying the total number of tires the vehicle has i.e., tires on the base vehicle and any attached trailers.

            Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.
          format: int32
          maximum: 255
          minimum: 1
          type: integer
        trailerAxleCount:
          description: |
            Value specifying the total number of axles across all the trailers attached to the vehicle.
            This number is included in `axleCount`, hence `trailerAxleCount` must be less than `axleCount`.

            **Limitations:** only valid for `transportMode=truck`, `trailerCount` > 0 and `axleCount` > 1.

            Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.
          format: int32
          minimum: 1
          type: integer
        trailerCount:
          default: 0
          description: |
            Number of trailers attached to the vehicle.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 255
          minimum: 0
          type: integer
        tunnelCategory:
          $ref: '#/components/schemas/TunnelCategory'
        type:
          $ref: '#/components/schemas/TruckTypeWithDefault'
        weightPerAxle:
          description: |
            Heaviest vehicle weight per axle, in kilograms.

            Heaviest weight per axle, regardless of axle type or axle group. It is evaluated against
            all axle weight restrictions, including single axle and tandem axle weight restrictions.
            It is useful if differences between axle types, like tandem and triple axles, are not
            relevant. This is the case in many countries, since they don't distinguish between these
            different axle groups on signs and in regulations.

            More fine-grained axle weight input is possible with `weightPerAxleGroup`.

            **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible.
            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          minimum: 0
          type: integer
        weightPerAxleGroup:
          $ref: '#/components/schemas/WeightPerAxleGroup'
        width:
          description: |
            Vehicle width, in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 5000
          minimum: 0
          type: integer
      type: object
    TruckTypeWithDefault:
      default: straight
      deprecated: true
      description: |
        Specifies the type of truck

        * `straight`: a truck on a single frame with a permanently attached cargo area
        * `tractor`: a towing vehicle that can pull one or more semi-trailers (aka semi-truck)
      enum:
        - straight
        - tractor
      type: string
    TunnelCategory:
      description: |
        Specifies the tunnel category used to restrict transport of specific goods.

        **Limitations:** only valid for `transportMode=truck`.
      enum:
        - B
        - C
        - D
        - E
      type: string
    Vehicle:
      description: Vehicle specific parameters
      properties:
        axleCount:
          description: |
            Value specifying the total number of axles the vehicle has i.e., axles on the base vehicle and any attached trailers.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 255
          minimum: 2
          type: integer
        category:
          default: undefined
          description: |
            Specifies the category of the vehicle. The supported values are:

            * `undefined`: The vehicle category is undefined and no special considerations are taken into
              account. Vehicle routing will proceed as normal.
            * `lightTruck`: The vehicle is a truck light enough to be classified more as a car than as a truck.
              I.e., this exempts it from many legal restrictions for normal trucks. Restrictions related
              to the physical dimensions of the truck, or its cargo, however, still apply.

              Please refer to the developer guide for further details on Truck Categories.

              **Limitations:** only valid for `transportMode=truck`.
          enum:
            - undefined
            - lightTruck
          type: string
        grossWeight:
          description: |
            Vehicle weight including trailers and shipped goods, in kilograms.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          minimum: 0
          type: integer
        height:
          description: |
            Vehicle height, in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 5000
          minimum: 0
          type: integer
        hovOccupancy:
          default: 1
          description: |
            Number of occupants (defined as occupying a seat with a restraint device) in the vehicle.
            This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.

            Limitations:
              * currently, any value over 1 is interpreted as being able to use any HOV lane (including, e.g. those restricted to 3+ passengers).
          minimum: 1
          type: integer
        length:
          description: |
            Vehicle length, in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 30000
          minimum: 0
          type: integer
        licensePlate:
          description: |
            Specifies information about the vehicle's license plate number.
            This information is used to evaluate whether certain vehicle restrictions in environmental zones apply.
            Currently, only the last character of the license plate can be provided.

            Format: `lastCharacter:{character}`

            Example: `lastCharacter:2`
          type: string
        shippedHazardousGoods:
          description: |
            Comma-separated list of shipped hazardous goods in the vehicle.

            Possible values are:

            * `explosive`: Explosive material
            * `gas`: Gas
            * `flammable`: Flammable material
            * `combustible`: Combustible material
            * `organic`: Organic material
            * `poison`: Poison
            * `radioactive`: Radioactive material
            * `corrosive`: Corrosive material
            * `poisonousInhalation`: Materials that are poisonous upon inhalation
            * `harmfulToWater`: Materials that are harmful to water
            * `other`: Other types of hazardous materials

            **Limitations:** only valid for `transportMode=truck`.
          example: 'explosive,gas,flammable'
          type: string
        speedCap:
          description: |
            Specifies the maximum speed, in m/s, which the user wishes not to exceed.
            This parameter affects route ETA and consumption calculation.

            Limitations:
              * valid for following transport modes: `car`, `truck`, `scooter`, `taxi`, `bus`, and `privateBus`

            Notes:
              * Car and Truck mode updates route ETA.
              * Scooter mode updates route optimization and ETA.
          maximum: 70
          minimum: 1
          type: number
        tiresCount:
          description: |
            Value specifying the total number of tires the vehicle has i.e., tires on the base vehicle and any attached trailers.

            Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.
          format: int32
          maximum: 255
          minimum: 1
          type: integer
        trailerAxleCount:
          description: |
            Value specifying the total number of axles across all the trailers attached to the vehicle.
            This number is included in `axleCount`, hence `trailerAxleCount` must be less than `axleCount`.

            **Limitations:** only valid for `transportMode=truck`, `trailerCount` > 0 and `axleCount` > 1.

            Note: This parameter is currently used only for calculation of tolls in regions where it is applicable.
          format: int32
          minimum: 1
          type: integer
        trailerCount:
          default: 0
          description: |
            Number of trailers attached to the vehicle.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 255
          minimum: 0
          type: integer
        tunnelCategory:
          $ref: '#/components/schemas/TunnelCategory'
        type:
          $ref: '#/components/schemas/VehicleType'
        weightPerAxle:
          description: |
            Heaviest vehicle weight per axle, in kilograms.

            Heaviest weight per axle, regardless of axle type or axle group. It is evaluated against
            all axle weight restrictions, including single axle and tandem axle weight restrictions.
            It is useful if differences between axle types, like tandem and triple axles, are not
            relevant. This is the case in many countries, since they don't distinguish between these
            different axle groups on signs and in regulations.

            More fine-grained axle weight input is possible with `weightPerAxleGroup`.

            **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible.
            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          minimum: 0
          type: integer
        weightPerAxleGroup:
          $ref: '#/components/schemas/WeightPerAxleGroup'
        width:
          description: |
            Vehicle width, in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          format: int32
          maximum: 5000
          minimum: 0
          type: integer
      type: object
    VehicleType:
      description: |
        Specifies the type of the vehicle

        * `straightTruck`: a truck on a single frame with a permanently attached cargo area. **Note:**
        default value when truck routing mode is used. **Limitations:** only valid for `transportMode=truck`.
        * `tractor`: a towing vehicle that can pull one or more semi-trailers (aka semi-truck).
        **Limitations:** only valid for `transportMode=truck`.
      enum:
        - straightTruck
        - tractor
      type: string
    VersionResponse:
      description: Returns the versions of the service components.
      properties:
        apiVersion:
          description: The current version of the API.
          type: string
        dataVersions:
          description: Returns the versions of data sets used by the service.
          items:
            $ref: '#/components/schemas/DataVersion'
          type: array
        serviceVersion:
          description: The current version of the service.
          type: string
      required:
        - apiVersion
    Waypoint:
      description: |
        A location defining an origin, destination or via point for a route or an isoline.

        Format: `Place[WaypointOptions]`

        * Place: `{lat},{lng}[PlaceOptions]`
        * PlaceOptions: `;option1=value1;option2=value2...`
        * WaypointOptions: `!option1=value1!option2=value2...`

        A waypoint consists of:
        * Exactly one place
        * Optional settings for the place
        * Optional settings for the waypoint itself

        Supported place options:
        * `course`: int, degrees clock-wise from north. Indicates the desired direction from the place. For example, `90` indicating `east`. Often combined with `radius` and/or `minCourseDistance`. This parameter takes preference over `matchSideOfStreet`.
        * `sideOfStreetHint`: `{lat},{lng}`. Indicates the side of the street that should be used. For example, if the location is to the left of the street, the router will prefer using that side in case the street has dividers. For example, `52.511496,13.304140;sideOfStreetHint=52.512149,13.304076` indicates that the `north` side of the street should be preferred. This options is required, if `matchSideOfStreet` is set to `always`.
        * `matchSideOfStreet`: enum `[always, onlyIfDivided]`. Specifies how the location set by `sideOfStreetHint` should be handled. Requires `sideOfStreetHint` to be specified as well. Note the exception above when combined with `course`.
          + `always` : Always prefer the given side of street.
          + `onlyIfDivided`: Only prefer using side of street set by `sideOfStreetHint` in case the street has dividers. This is the default behavior.
        * `nameHint`: string. Causes the router to look for the place with the most similar name. The typical examples include: `North` being used to differentiate between interstates `I66 North` and `I66 South`, `Downtown Avenue` being used to correctly select a residental street.
        * `radius`: int, meters. Instructs the router to consider all places within the given radius as potential candidates for matching the waypoint. This can be either because it is not important which place is used, or because it is unknown. Values higher than 200 meters are not supported. Option cannot be combined with `snapRadius`.
        * `snapRadius`: int, meters. Instructs the router to match the waypoint, within the specified radius, to the most "significant" road. In contrast to the regular `radius` parameter, `snapRadius` sorts potential candidates in order of "significance". For example, a highway is more significant on a zoomed-out map than a national road, a national road is more significant than a city road, etc. Hence, `snapRadius` cannot be combined with `radius` parameter. The typical use case for `snapRadius` is when selecting a waypoint on a zoomed-out view of a map on a drag-and-drop interface. The expectation on such UIs is that only roads that are visible at that zoom level are considered for matching and a large snapRadius would enable that.
        * `minCourseDistance`: int, meters. Instructs the routing service to try to find a route that avoids actions for the indicated distance. For example, if the origin is determined by a moving vehicle, the user might not have time to react to early actions.
        * `segmentIdHint`: string. Causes the router to try and match to the specified segment. Waypoint coordinates need to be on the segment, otherwise waypoint will be matched ignoring the segment hint. This parameter can be used when the waypoint is too close to more than one segment to force matching to a specific one.
        * `onRoadThreshold`: int, meters. allows specifying a distance within which the waypoint could be considered as being on a highway/bridge/tunnel/sliproad. Within this threshold, the attributes of the segments do not impact the matching. Outside the threshold only segments which aren't one of highway/bridge/tunnel/sliproad can be matched.

        Supported waypoint options:
        * `stopDuration`: desired duration for the stop, in seconds.
        * `passThrough`: boolean. Asks the router to avoid the following during route calculation:
          + Introducing a stop at the waypoint.
          + Splitting the route into sections.
          + Changing the direction of travel.

        Following scenarios is not supported for `passThrough` parameter:
          + Setting both `stopDuration` to a value greater than 0 and `passThrough=true`.
          + Setting `passThrough=true` for `origin` or `destination` of a route.
          The default value is `false`.
      type: string
    WeightPerAxleGroup:
      description: |
        Specifies the weights of different axle groups, like single and tandem axles.

        This allows specification of axle weights in a more fine-grained way than `weightPerAxle`. This
        is relevant in countries with signs and regulations that specify different limits for different
        axle groups, like the USA and Sweden.

        Format: `AxleGroup:Weight[,AxleGroup2:Weight2]...`

        Allowed axle groups currently are:
          * `single`
          * `tandem`
          * `triple`

        Weights are specified in kilograms (kg) and are the total weight of the axle group.

        **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible.
        **Limitations:** only valid for `transportMode=truck`.
      example: 'single:11000,tandem:18000'
      type: string
  securitySchemes:
    ApiKey:
      description: |
        A key generated specifically to authenticate API requests. For more information on how to get an API key, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.
      in: query
      name: apiKey
      type: apiKey
    Bearer:
      bearerFormat: JWT
      description: |
        A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.
        For more information on how to get a bearer token, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.
      scheme: bearer
      type: http
